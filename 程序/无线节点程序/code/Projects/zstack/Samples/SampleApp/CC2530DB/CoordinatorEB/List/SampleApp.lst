###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             14/Aug/2017  09:26:46 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\Source\SampleApp.c  #
#    Command line       =  -f E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wCoord.cfg (-DCPU32MHZ          #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\Tools\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO        #
#                          -DSECURE=0 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR       #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ #
#                          ©ÌïÐ¡Æøºò\³ÌÐò\code\Projects\zstack\Samples\Sample #
#                          App\Source\SampleApp.c -D ZTOOL_P1 -D HAL_PA_LNA   #
#                          -D NV_INIT -D NV_RESTORE -D xMT_TASK -D            #
#                          xMT_SYS_FUNC -D xMT_ZDO_FUNC -D                    #
#                          xLCD_SUPPORTED=DEBUG -lC                           #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\ -lA E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò #
#                          \³ÌÐò\code\Projects\zstack\Samples\SampleApp\CC253 #
#                          0DB\CoordinatorEB\List\ --diag_suppress            #
#                          Pe001,Pa010 -o E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøº #
#                          ò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\CC25 #
#                          30DB\CoordinatorEB\Obj\ -e --no_code_motion        #
#                          --debug --core=plain --dptr=16,1                   #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 8 -I  #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\ -I        #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\Source\ #
#                           -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code #
#                          \Projects\zstack\Samples\SampleApp\CC2530DB\..\Sou #
#                          rce\hardware\ -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æ #
#                          øºò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\ZMain\TI2530DB\ -I                 #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\Z #
#                          Main\ -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò #
#                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\. #
#                          .\..\..\..\..\Components\hal\include\ -I           #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\hal\target\CC2530EB\ -I            #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\include\ -I                    #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\high_level\ -I                 #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\low_level\srf04\ -I            #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\mac\low_level\srf04\single_chip\   #
#                          -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mt\ -I                          #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\osal\include\ -I                   #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\services\saddr\ -I                 #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\services\sdata\ -I                 #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\af\ -I                       #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\nwk\ -I                      #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\sapi\ -I                     #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\sec\ -I                      #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\sys\ -I                      #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\stack\zdo\ -I                      #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\zmac\ -I                           #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\. #
#                          .\..\Components\zmac\f8w\ -Ohz                     #
#                          --require_prototypes                               #
#    List file          =  E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\List\SampleApp.lst                             #
#    Object file        =  E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\Coordinato #
#                          rEB\Obj\SampleApp.r51                              #
#                                                                             #
#                                                                             #
###############################################################################

E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          #include  "MT.h"
     77          #include "wdt.h"
     78          #include "adc.h"
     79          
     80          #include "APSMEDE.h"
     81          #include "AddrMgr.h"
     82          
     83          #include <stdio.h>
     84          #include <stdlib.h>
     85          #include <string.h>
     86          
     87          #include "osal_nv.h"
     88          
     89          /*********************************************************************
     90           * MACROS£¨ºê¶¨Òå£©
     91           */
     92          #define DATASENSOR_COOR  67
     93          #define DATASENSOR_LEN  27
     94          
     95          #define DATA_OFFSET_ID    5
     96          #define DATA_OFFSET_T0    9
     97          #define DATA_OFFSET_U     14
     98          #define DATA_OFFSET_GH    18
     99          
    100          #define COOR_DATA_LEN   67
    101          
    102          /* AD²ÉÑùÄ£Äâ¿ª¹ØÍ¨µÀ */
    103          #define STDR_CHANNEL   0 //±ê×¼µç×è
    104          #define T0_CHANNEL     1 //ÎÂ¶È
    105          #define U_CHANNEL      2 //Êª¶È
    106          #define GH_CHANNEL     3 //¹âºÏ±í
    107          
    108          #define AD_VREF         1.25 //AD²Î¿¼µçÑ¹
    109          
    110          /*********************************************************************
    111           * CONSTANTS
    112           */
    113          
    114          /*********************************************************************
    115           * TYPEDEFS(ÀàÐÍ¶¨Òå)
    116           */
    117          typedef struct
    118          {
    119            int temperature;
    120            int humidity;
    121            int photosyn; //¹âºÏÁ¿
    122          }dataType_t;
    123          
    124          /*********************************************************************
    125           * GLOBAL VARIABLES(È«¾Ö±äÁ¿)
    126           */
    127          #if (!defined (ZDO_COORDINATOR)) && (!defined (RTR_NWK))  //ÖÕ¶Ë½Úµã
    128          
    129          /*ÈëÍø³¬Ê±¹ÜÀí*/    /* 16.8.5ÊÊµ±µ÷´óÀëÏßÊ±¼äÏÞÖÆ£¬·ÀÖ¹Ö»Ñ¡ÖÐµ¥Í¨µÀÊ±ÖØÆôÊ±¼ä¹ý¶Ì£¬×¢Òâ²»ÄÜ³¬¹ý255 */
    130          #define ORPHAN_MAX   (/*30*/60)   //ÀëÏßÊ±¼äÏÞÖÆ
    131          uint8 orphan=0;  //¹ÂÁ¢½Úµã¼ÆÊý£¬³¬¹ýÒ»¶¨Ê±¼äÎ´Á¬½Óµ½ÍøÂçÊ±ÖØÆôÉè±¸
    132          //uint8 heart=0;   //ÐÄÌø°ü¼ÆÊý£¬³¬¹ýÒ»¶¨Ê±¼äÎ´½ÓÊÕµ½ÐÄÌø°üÔòÖØÆôÉè±¸
    133          //uint8 heart_open=0;  //ÐÄÌø°ü¿ª¹Ø
    134          
    135          #endif //ÖÕ¶Ë
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          int debug = 0; //µ÷ÊÔÐÅÏ¢¿ª¹Ø£º1 ¿ª£¬0 ¹Ø£¬Ä¬ÈÏ¹Ø
   \                     debug:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    138          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    139          int sensor_id = 0; //´«¸ÐÆ÷ID
   \                     sensor_id:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    140          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          float gh_factor = 0; //¹âºÏ±íÏµÊý
   \                     gh_factor:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    142          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          int rs_flag = 0; //¸´Î»±êÖ¾£¬1 ¸´Î»£¬0 ÎÞ²Ù×÷
   \                     rs_flag:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    144          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    145          uint8 dev_id[10] = {0}; //±£´æÖÕ¶ËÉè±¸ID
   \                     dev_id:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          uint8 dev_gh[10] = {0}; //±£´æÖÕ¶ËÉè±¸¹âºÏ±íÏµÊý
   \                     dev_gh:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          uint8 dev_wddt[10] = {0}; //±£´æÖÕ¶ËÉè±¸ÎÂ¶È¶©Õý
   \                     dev_wddt:
   \   000000                DS 10
   \   00000A                REQUIRE __INIT_XDATA_Z
    150          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          float cal_t0 = 0; //ÎÂ¶È¶©ÕýÖµ±äÁ¿
   \                     cal_t0:
   \   000000                DS 4
   \   000004                REQUIRE __INIT_XDATA_Z
    152          
    153          #if defined (ZDO_COORDINATOR) || defined (RTR_NWK) //Ð­µ÷Æ÷

   \                                 In  segment XDATA_I, align 1, keep-with-next
    154          char data_coor[128]={"BG,ID001,-600,099,1234,ID002,-600,099,1234,ID003,-600,099,1234,ED\r\n"}; //Ð­µ÷Æ÷Êý¾Ý->Ö÷²É¼¯Æ÷
   \                     data_coor:
   \   000000                DS 128
   \   000080                REQUIRE `?<Initializer for data_coor>`
   \   000080                REQUIRE __INIT_XDATA_I

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    155          dataType_t coordi[3]; //Ð­µ÷Æ÷Êý¾Ý±äÁ¿
   \                     coordi:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    156          #else //ÖÕ¶Ë
    157          char data_sensor[128]={"BG,ID001,-600,099,1234,ED\r\n"}; //ÖÕ¶Ë´«¸ÐÆ÷Êý¾Ý->Ð­µ÷Æ÷
    158          dataType_t sensor; //´«¸ÐÆ÷Êý¾Ý±äÁ¿
    159          #endif
    160          
    161          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    162          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
   \   000004   0000         DW 0
   \   000006   0000         DW 0
    163          {
    164            SAMPLEAPP_PERIODIC_CLUSTERID,
    165            SAMPLEAPP_FLASH_CLUSTERID
    166          };
    167          

   \                                 In  segment XDATA_ROM_C, align 1
    168          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   04           DB 4
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   04           DB 4
   \   00000A   ....         DW SampleApp_ClusterList
    169          {
    170            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    171            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    172            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    173            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    174            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    175            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    176            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    177            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    178            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    179          };
    180          
    181          // This is the Endpoint/Interface description.  It is defined here, but
    182          // filled-in in SampleApp_Init().  Another way to go would be to fill
    183          // in the structure here and make it a "const" (in code space).  The
    184          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    185          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    186          
    187          /*********************************************************************
    188           * EXTERNAL VARIABLES
    189           */
    190          
    191          /*********************************************************************
    192           * EXTERNAL FUNCTIONS
    193           */
    194          
    195          /*********************************************************************
    196           * LOCAL VARIABLES
    197           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    198          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    199                                    // This variable will be received when
    200                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    201          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    202          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    204          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    206          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    207          afAddrType_t Point_To_Point_DstAddr; //Íø·äµã¶ÔµãÍ¨ÐÅ¶¨Òå
   \                     Point_To_Point_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    208          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    209          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    210          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    211          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    212          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    213          
    214          /*********************************************************************
    215           * LOCAL FUNCTIONS
    216           */
    217          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    218          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    219          void SampleApp_SendPeriodicMessage(char *p, int len );
    220          void SampleApp_SendPointToPointMessage( char *p, int len ); //µã¶Ôµã·¢ËÍº¯Êý
    221          void SampleApp_SerialCMD( mtOSALSerialData_t * MSGpkt); //´®¿ÚÊý¾Ý´¦Àíº¯Êý
    222          void SendDataToCollector(char *ptr, int len); //´®¿ÚÏò²É¼¯Æ÷·¢ËÍÊý¾Ý
    223          void ReturnTorF(int a, int b);//Ö¸Áî»Ø¸´'T'»ò'F'
    224          //void Order_Parse(char *str, int len, int flag); //Ð­µ÷Æ÷»ò´®¿ÚÖ¸Áî½âÎö
    225          
    226          /*********************************************************************
    227           * NETWORK LAYER CALLBACKS
    228           */
    229          
    230          /*********************************************************************
    231           * PUBLIC FUNCTIONS
    232           */
    233          
    234          /*********************************************************************
    235           * @fn      SampleApp_Init
    236           *
    237           * @brief   Initialization function for the Generic App Task.
    238           *          This is called during initialization and should contain
    239           *          any application specific initialization (ie. hardware
    240           *          initialization/setup, table initialization, power up
    241           *          notificaiton ... ).
    242           *
    243           * @param   task_id - the ID assigned by OSAL.  This ID should be
    244           *                    used to send messages and set timers.
    245           *
    246           * @return  none
    247           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    248          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    249          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    250            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    251            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    252            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    253            
    254          #if defined (ZDO_COORDINATOR) || defined (RTR_NWK) //Ð­µ÷Æ÷
    255            osal_memset(coordi, 0, sizeof(dataType_t)*3); //Ð­µ÷Æ÷Êý¾Ý±äÁ¿³õÊ¼»¯
   \   000016                ; Setup parameters for call to function osal_memset
   \   000016   7C12         MOV     R4,#0x12
   \   000018   FD           MOV     R5,A
   \   000019   F9           MOV     R1,A
   \   00001A   7A..         MOV     R2,#coordi & 0xff
   \   00001C   7B..         MOV     R3,#(coordi >> 8) & 0xff
   \   00001E   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    256          #else //ÖÕ¶Ë
    257            osal_memset(&sensor, 0, sizeof(dataType_t)); //´«¸ÐÆ÷Êý¾Ý±äÁ¿³õÊ¼»¯
    258          #endif
    259            
    260            MT_UartInit(); //´®¿Ú³õÊ¼»¯
   \   000021                ; Setup parameters for call to function MT_UartInit
   \   000021   12....       LCALL   ??MT_UartInit?relay  ; Banked call to: MT_UartInit
    261            MT_UartRegisterTaskID(task_id); //µÇ¼ÇÈÎÎñºÅ
   \   000024                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000024   EE           MOV     A,R6
   \   000025   F9           MOV     R1,A
   \   000026   12....       LCALL   ??MT_UartRegisterTaskID?relay; Banked call to: MT_UartRegisterTaskID
    262            printf("System init!\n"); //´òÓ¡¿ª»ú³õÊ¼»¯ÐÅÏ¢
   \   000029                ; Setup parameters for call to function printf
   \   000029   7A..         MOV     R2,#`?<Constant "System init!\\n">` & 0xff
   \   00002B   7B..         MOV     R3,#(`?<Constant "System init!\\n">` >> 8) & 0xff
   \   00002D   12....       LCALL   ??printf?relay       ; Banked call to: printf
    263            
    264            ADC_Init(); //AD7705³õÊ¼»¯£¬°üÀ¨³õÊ¼»¯SPI1ºÍ¸´Î»I/OÒý½ÅÅäÖÃ
   \   000030                ; Setup parameters for call to function ADC_Init
   \   000030   12....       LCALL   ??ADC_Init?relay     ; Banked call to: ADC_Init
    265            
    266            osal_start_reload_timer( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT, SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT ); //ÖÜÆÚ5s¶¨Ê±Æ÷
   \   000033                ; Setup parameters for call to function osal_start_reload_timer
   \   000033   7C88         MOV     R4,#-0x78
   \   000035   7D13         MOV     R5,#0x13
   \   000037   7A01         MOV     R2,#0x1
   \   000039   7B00         MOV     R3,#0x0
   \   00003B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003E   E0           MOVX    A,@DPTR
   \   00003F   F9           MOV     R1,A
   \   000040   12....       LCALL   ??osal_start_reload_timer?relay; Banked call to: osal_start_reload_timer
    267            
    268            osal_start_reload_timer( SampleApp_TaskID, SAMPLEAPP_WDT_PERIODIC_MSG_EVT, SAMPLEAPP_FEEDWDT_PERIODIC_TIMEOUT ); //ÖÜÆÚ500ms¶¨Ê±Æ÷
   \   000043                ; Setup parameters for call to function osal_start_reload_timer
   \   000043   7CF4         MOV     R4,#-0xc
   \   000045   7D01         MOV     R5,#0x1
   \   000047   7A02         MOV     R2,#0x2
   \   000049   7B00         MOV     R3,#0x0
   \   00004B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F9           MOV     R1,A
   \   000050   12....       LCALL   ??osal_start_reload_timer?relay; Banked call to: osal_start_reload_timer
    269                      
    270            WDT_Init();//¿´ÃÅ¹·³õÊ¼»¯£¬·Å¹·
   \   000053                ; Setup parameters for call to function WDT_Init
   \   000053   12....       LCALL   ??WDT_Init?relay     ; Banked call to: WDT_Init
    271            
    272          #if !(defined (ZDO_COORDINATOR)) || !(defined (RTR_NWK)) //ÖÕ¶Ë
    273            /* ³õÊ¼»¯±£´æÏµÍ³²ÎÊýµÄflashÇøÓò */
    274            if(SUCCESS != osal_nv_item_init(DEVICE_ID, DEVICE_ID_LEN, NULL)) //Éè±¸ID´æÈëflashÇøÓò³õÊ¼»¯
    275              printf("ID flash init failed!!\n");
    276            
    277            if(SUCCESS !=osal_nv_item_init(DEVICE_GH, DEVICE_GH_LEN, NULL)) //Éè±¸¹âºÏ±íÏµÊý´æÈëflashÇøÓò³õÊ¼»¯
    278              printf("GH flash init failed!!\n");
    279            
    280            if(SUCCESS !=osal_nv_item_init(DEVICE_WDDT, DEVICE_WDDT_LEN, NULL)) //Éè±¸ÎÂ¶È¶©ÕýÖµ´æÈëflashÇøÓò³õÊ¼»¯
    281              printf("WDDT flash init failed!!\n");
    282            
    283            /* ÖÕ¶Ë´«¸ÐÆ÷¶ÁÈëÏµÍ³³õÊ¼»¯²ÎÊý£¬Éè±¸IDÓë¹âºÏ±íÏµÊý */
    284            if(SUCCESS == osal_nv_read(DEVICE_ID, 0, DEVICE_ID_LEN, dev_id)) //¶ÁÈëflashÖÐ´æ·ÅµÄÉè±¸ID
    285              sensor_id = atoi(dev_id);
    286            else
    287              printf("ID flash read failed!!\n");
    288            
    289            if(SUCCESS == osal_nv_read(DEVICE_GH, 0, DEVICE_GH_LEN, dev_gh)) //¶ÁÈëflashÖÐ´æ·ÅµÄÉè±¸¹âºÏ±íÏµÊý
    290              gh_factor = atof(dev_gh);
    291            else
    292              printf("GH flash read failed!!\n");
    293            
    294            if(SUCCESS == osal_nv_read(DEVICE_WDDT, 0, DEVICE_WDDT_LEN, dev_wddt)) //¶ÁÈëflashÖÐ´æ·ÅµÄÉè±¸ÎÂ¶È¶©ÕýÖµ
    295              cal_t0 = atof(dev_wddt);
    296            else
    297              printf("WDDT flash read failed!!\n");
    298            
    299          #endif
    300            
    301            // Device hardware initialization can be added here or in main() (Zmain.c).
    302            // If the hardware is application specific - add it here.
    303            // If the hardware is other parts of the device add it in main().
    304          
    305           #if defined ( BUILD_ALL_DEVICES )
    306            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    307            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    308            // together - if they are - we will start up a coordinator. Otherwise,
    309            // the device will start as a router.
    310            if ( readCoordinatorJumper() )
    311              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    312            else
    313              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    314          #endif // BUILD_ALL_DEVICES
    315          
    316          #if defined ( HOLD_AUTO_START )
    317            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    318            //  from starting the device and wait for the application to
    319            //  start the device.
    320            ZDOInitDevice(0);
    321          #endif
    322          
    323            // Setup for the periodic message's destination address
    324            // Broadcast to everyone
    325            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   000056   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   000059   740F         MOV     A,#0xf
   \   00005B   F0           MOVX    @DPTR,A
    326            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00005C   A3           INC     DPTR
   \   00005D   7414         MOV     A,#0x14
   \   00005F   F0           MOVX    @DPTR,A
    327            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000060   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000063   74FF         MOV     A,#-0x1
   \   000065   F0           MOVX    @DPTR,A
   \   000066   A3           INC     DPTR
   \   000067   F0           MOVX    @DPTR,A
    328          
    329            // Setup for the flash command's destination address - Group 1
    330            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   000068   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   00006B   7401         MOV     A,#0x1
   \   00006D   F0           MOVX    @DPTR,A
    331            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   00006E   A3           INC     DPTR
   \   00006F   7414         MOV     A,#0x14
   \   000071   F0           MOVX    @DPTR,A
    332            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000072   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   000075   7401         MOV     A,#0x1
   \   000077   F0           MOVX    @DPTR,A
   \   000078   A3           INC     DPTR
   \   000079   E4           CLR     A
   \   00007A   F0           MOVX    @DPTR,A
    333            
    334            // Íø·äµã¶ÔµãÍ¨Ñ¶¶¨Òå
    335            Point_To_Point_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;//µã²¥
   \   00007B   90....       MOV     DPTR,#Point_To_Point_DstAddr + 8
   \   00007E   7402         MOV     A,#0x2
   \   000080   F0           MOVX    @DPTR,A
    336            Point_To_Point_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000081   A3           INC     DPTR
   \   000082   7414         MOV     A,#0x14
   \   000084   F0           MOVX    @DPTR,A
    337            Point_To_Point_DstAddr.addr.shortAddr = 0x0000; //·¢¸øÐ­µ÷Æ÷
   \   000085   90....       MOV     DPTR,#Point_To_Point_DstAddr
   \   000088   E4           CLR     A
   \   000089   F0           MOVX    @DPTR,A
   \   00008A   A3           INC     DPTR
   \   00008B   F0           MOVX    @DPTR,A
    338          
    339            // Fill out the endpoint description.
    340            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   00008C   90....       MOV     DPTR,#SampleApp_epDesc
   \   00008F   7414         MOV     A,#0x14
   \   000091   F0           MOVX    @DPTR,A
    341            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000092   A3           INC     DPTR
   \   000093   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000095   F0           MOVX    @DPTR,A
   \   000096   A3           INC     DPTR
   \   000097   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   000099   F0           MOVX    @DPTR,A
    342            SampleApp_epDesc.simpleDesc
    343                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00009A   A3           INC     DPTR
   \   00009B   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   00009D   F0           MOVX    @DPTR,A
   \   00009E   A3           INC     DPTR
   \   00009F   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   0000A1   F0           MOVX    @DPTR,A
    344            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   0000A2   A3           INC     DPTR
   \   0000A3   E4           CLR     A
   \   0000A4   F0           MOVX    @DPTR,A
    345          
    346            // Register the endpoint description with the AF
    347            afRegister( &SampleApp_epDesc );
   \   0000A5                ; Setup parameters for call to function afRegister
   \   0000A5   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   0000A7   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   0000A9   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    348          
    349            // Register for all key events - This app will handle all key events
    350            RegisterForKeys( SampleApp_TaskID );
   \   0000AC                ; Setup parameters for call to function RegisterForKeys
   \   0000AC   90....       MOV     DPTR,#SampleApp_TaskID
   \   0000AF   E0           MOVX    A,@DPTR
   \   0000B0   F9           MOV     R1,A
   \   0000B1   12....       LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
    351          
    352            // By default, all devices start out in Group 1
    353            SampleApp_Group.ID = 0x0001;
   \   0000B4   90....       MOV     DPTR,#SampleApp_Group
   \   0000B7   7401         MOV     A,#0x1
   \   0000B9   F0           MOVX    @DPTR,A
   \   0000BA   A3           INC     DPTR
   \   0000BB   E4           CLR     A
   \   0000BC   F0           MOVX    @DPTR,A
    354            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   0000BD                ; Setup parameters for call to function osal_memcpy
   \   0000BD   75....       MOV     ?V0,#`?<Constant "Group 1">` & 0xff
   \   0000C0   75....       MOV     ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   0000C3   F5..         MOV     ?V2,A
   \   0000C5   78..         MOV     R0,#?V0
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CA   7C07         MOV     R4,#0x7
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   0000D0   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   0000D2   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   0000D5   7403         MOV     A,#0x3
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
    355            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   0000DA                ; Setup parameters for call to function aps_AddGroup
   \   0000DA   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000DC   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000DE   7914         MOV     R1,#0x14
   \   0000E0   12....       LCALL   ??aps_AddGroup?relay ; Banked call to: aps_AddGroup
    356          
    357          #if defined ( LCD_SUPPORTED )
    358            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
    359          #endif
    360          }
   \   0000E3   7F03         MOV     R7,#0x3
   \   0000E5   02....       LJMP    ?BANKED_LEAVE_XDATA
    361          
    362          /*********************************************************************
    363           * @fn      SampleApp_ProcessEvent
    364           *
    365           * @brief   Generic Application Task event processor.  This function
    366           *          is called to process all events for the task.  Events
    367           *          include timers, messages and any other user defined events.
    368           *
    369           * @param   task_id  - The OSAL assigned task ID.
    370           * @param   events - events to process.  This is a bit map and can
    371           *                   contain more than one event.
    372           *
    373           * @return  none
    374           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    375          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    376          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    377            afIncomingMSGPacket_t *MSGpkt;
    378            (void)task_id;  // Intentionally unreferenced parameter
    379          
    380            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??SampleApp_ProcessEvent_0 & 0xFFFF
    381            {
    382              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000010                ; Setup parameters for call to function osal_msg_receive
   \   000010   800E         SJMP    ??SampleApp_ProcessEvent_1
    383              while ( MSGpkt )
    384              {
    385                switch ( MSGpkt->hdr.event )
    386                {
    387                  case CMD_SERIAL_MSG: //´®¿ÚÊÕµ½Êý¾ÝºóÓÉ MT_UART ²ã´«µÝ¹ýÀ´µÄÊý¾Ý£¬ÓÃÍø·ä·½·¨½ÓÊÕ£¬±àÒëÊ±²»¶¨Òå MTÏà¹ØÄÚÈÝ 
    388                    SampleApp_SerialCMD((mtOSALSerialData_t *)MSGpkt);
    389                    break;
    390          
    391                  // Received when a messages is received (OTA) for this endpoint
    392                  case AF_INCOMING_MSG_CMD: //ÎÞÏßÊý¾Ý½ÓÊÕ
    393                    SampleApp_MessageMSGCB( MSGpkt );
    394                    break;
    395          
    396                  // Received whenever the device changes state in the network
    397                  case ZDO_STATE_CHANGE:
    398                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
    399                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    400                        || (SampleApp_NwkState == DEV_ROUTER)
    401                        || (SampleApp_NwkState == DEV_END_DEVICE) ) //ÍøÂçÁ¬½Ó³É¹¦
    402                    {
    403                      printf("NET SUCCESS!\r\n");
    404                      switch(SampleApp_NwkState)   //¸ù¾Ý_NIB½á¹¹ÖÐµÄÄÚÈÝµÃµ½Éè±¸µÄ¶ÌµØÖ·¡¢¸¸½Úµã¶ÌµØÖ·¡¢ÐÅµÀºÅºÍÍøÂçPanID£¬²¢Í¨¹ý´®¿Ú´òÓ¡³öÈ¥
    405                      {
    406                      case DEV_ROUTER:  //Â·ÓÉÆ÷½Úµã
    407                        printf("Router:0x%04X\r\nParent:0x%04X\r\nChannel:%d\r\nPanID:0x%04X\r\n",
    408                                _NIB.nwkDevAddress,_NIB.nwkCoordAddress,_NIB.nwkLogicalChannel,_NIB.nwkPanId);
    409          
    410                        printf("IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\r\n",      //IEEEµØÖ·
    411                                aExtendedAddress[7],aExtendedAddress[6],aExtendedAddress[5],aExtendedAddress[4],
    412                                aExtendedAddress[3],aExtendedAddress[2],aExtendedAddress[1],aExtendedAddress[0]);
    413          
    414                        printf("Parent IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\r\n",      //¸¸½ÚµãIEEEµØÖ·
    415                                _NIB.nwkCoordExtAddress[7],_NIB.nwkCoordExtAddress[6],_NIB.nwkCoordExtAddress[5],_NIB.nwkCoordExtAddress[4],
    416                                _NIB.nwkCoordExtAddress[3],_NIB.nwkCoordExtAddress[2],_NIB.nwkCoordExtAddress[1],_NIB.nwkCoordExtAddress[0]);
    417          
    418                        break;
    419                      case DEV_END_DEVICE: //ÖÕ¶Ë½Úµã
    420                        printf("EndDevice:0x%04X\r\nParent:0x%04X\r\nChannel:%d\r\nPanID:0x%04X\r\n",
    421                                _NIB.nwkDevAddress,_NIB.nwkCoordAddress,_NIB.nwkLogicalChannel,_NIB.nwkPanId);
    422          
    423                        printf("IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\r\n",      //IEEEµØÖ·
    424                                aExtendedAddress[7],aExtendedAddress[6],aExtendedAddress[5],aExtendedAddress[4],
    425                                aExtendedAddress[3],aExtendedAddress[2],aExtendedAddress[1],aExtendedAddress[0]);
    426          
    427                        printf("Parent IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\r\n",      //¸¸½ÚµãIEEEµØÖ·
    428                                _NIB.nwkCoordExtAddress[7],_NIB.nwkCoordExtAddress[6],_NIB.nwkCoordExtAddress[5],_NIB.nwkCoordExtAddress[4],
    429                                _NIB.nwkCoordExtAddress[3],_NIB.nwkCoordExtAddress[2],_NIB.nwkCoordExtAddress[1],_NIB.nwkCoordExtAddress[0]);
    430          
    431                        break;
    432                      case DEV_ZB_COORD:  //Ð­µ÷Æ÷
    433                        printf("Coordinator:0x%04X\r\nChannel:%d\r\nPanID:0x%04X\r\n",
    434                                _NIB.nwkDevAddress,_NIB.nwkLogicalChannel,_NIB.nwkPanId);
    435          
    436                        printf("IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\r\n",      //IEEEµØÖ·
    437                                aExtendedAddress[7],aExtendedAddress[6],aExtendedAddress[5],aExtendedAddress[4],
    438                                aExtendedAddress[3],aExtendedAddress[2],aExtendedAddress[1],aExtendedAddress[0]);
    439          
    440                        break;
    441                      default:
    442                        break;
    443                      }
    444                    }
    445                    else
    446                    {
    447                      // Device is no longer in the network
    448                      printf("NO NET\r\n");
   \                     ??SampleApp_ProcessEvent_2:
   \   000012                ; Setup parameters for call to function printf
   \   000012   7A..         MOV     R2,#`?<Constant "NO NET\\r\\n">` & 0xff
   \   000014   7B..         MOV     R3,#(`?<Constant "NO NET\\r\\n">` >> 8) & 0xff
   \   000016   12....       LCALL   ??printf?relay       ; Banked call to: printf
    449                      
    450          #if (!defined (ZDO_COORDINATOR)) && (!defined (RTR_NWK))  //ÖÕ¶Ë½Úµã          
    451                      orphan++;  //¹ÂÁ¢ÀÛ¼Æ
    452                      if(orphan>ORPHAN_MAX)  //³¬¹ýÖ¸¶¨´ÎÊýÈëÍøÊ§°ÜÔòÖØÆôÉè±¸
    453                      {
    454                        rs_flag = 1; //Í£Ö¹Î¹¹·£¬ÖÂÊ¹ÏµÍ³¸´Î»
    455                      }
    456          #endif //ÖÕ¶Ë
    457                    }
    458                    break;
    459          
    460                  default:
    461                    break;
    462                }
    463          
    464                // Release the memory
    465                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_3:
   \   000019                ; Setup parameters for call to function osal_msg_deallocate
   \   000019   AA..         MOV     R2,?V0
   \   00001B   AB..         MOV     R3,?V1
   \   00001D   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
    466          
    467                // Next - if one is available
    468                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   000020                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   000020   90....       MOV     DPTR,#SampleApp_TaskID
   \   000023   E0           MOVX    A,@DPTR
   \   000024   F9           MOV     R1,A
   \   000025   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   000028   8A..         MOV     ?V0,R2
   \   00002A   8B..         MOV     ?V1,R3
   \   00002C   E5..         MOV     A,?V0
   \   00002E   45..         ORL     A,?V1
   \   000030   7003         JNZ     $+5
   \   000032   02....       LJMP    ??SampleApp_ProcessEvent_4 & 0xFFFF
   \   000035   85..82       MOV     DPL,?V0
   \   000038   85..83       MOV     DPH,?V1
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   14           DEC     A
   \   00003D   600A         JZ      ??SampleApp_ProcessEvent_5
   \   00003F   24E7         ADD     A,#-0x19
   \   000041   600F         JZ      ??SampleApp_ProcessEvent_6
   \   000043   2449         ADD     A,#0x49
   \   000045   6014         JZ      ??SampleApp_ProcessEvent_7
   \   000047   80D0         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_5:
   \   000049                ; Setup parameters for call to function SampleApp_SerialCMD
   \   000049   AA..         MOV     R2,?V0
   \   00004B   AB..         MOV     R3,?V1
   \   00004D   12....       LCALL   ??SampleApp_SerialCMD?relay; Banked call to: SampleApp_SerialCMD
   \   000050   80C7         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_6:
   \   000052                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000052   AA..         MOV     R2,?V0
   \   000054   AB..         MOV     R3,?V1
   \   000056   12....       LCALL   ??SampleApp_MessageMSGCB?relay; Banked call to: SampleApp_MessageMSGCB
   \   000059   80BE         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_7:
   \   00005B   A3           INC     DPTR
   \   00005C   E0           MOVX    A,@DPTR
   \   00005D   90....       MOV     DPTR,#SampleApp_NwkState
   \   000060   F0           MOVX    @DPTR,A
   \   000061   6409         XRL     A,#0x9
   \   000063   600A         JZ      ??SampleApp_ProcessEvent_8
   \   000065   E0           MOVX    A,@DPTR
   \   000066   6407         XRL     A,#0x7
   \   000068   6005         JZ      ??SampleApp_ProcessEvent_8
   \   00006A   E0           MOVX    A,@DPTR
   \   00006B   6406         XRL     A,#0x6
   \   00006D   70A3         JNZ     ??SampleApp_ProcessEvent_2
   \                     ??SampleApp_ProcessEvent_8:
   \   00006F                ; Setup parameters for call to function printf
   \   00006F   7A..         MOV     R2,#`?<Constant "NET SUCCESS!\\r\\n">` & 0xff
   \   000071   7B..         MOV     R3,#(`?<Constant "NET SUCCESS!\\r\\n">` >> 8) & 0xff
   \   000073   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   000076   90....       MOV     DPTR,#SampleApp_NwkState
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   24FA         ADD     A,#-0x6
   \   00007C   7003         JNZ     $+5
   \   00007E   02....       LJMP    ??SampleApp_ProcessEvent_9 & 0xFFFF
   \   000081   14           DEC     A
   \   000082   6009         JZ      ??SampleApp_ProcessEvent_10
   \   000084   24FE         ADD     A,#-0x2
   \   000086   7003         JNZ     $+5
   \   000088   02....       LJMP    ??SampleApp_ProcessEvent_11 & 0xFFFF
   \   00008B   808C         SJMP    ??SampleApp_ProcessEvent_3
   \                     ??SampleApp_ProcessEvent_10:
   \   00008D                ; Setup parameters for call to function printf
   \   00008D   90....       MOV     DPTR,#_NIB + 33
   \   000090   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000093   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000096   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000099   90....       MOV     DPTR,#_NIB + 23
   \   00009C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00009F   90....       MOV     DPTR,#_NIB + 20
   \   0000A2   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0000A5   7A..         MOV     R2,#`?<Constant "Router:0x%04X\\r\\nParent...">` & 0xff
   \   0000A7   7B..         MOV     R3,#(`?<Constant "Router:0x%04X\\r\\nParent...">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_12:
   \   0000A9   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   0000AC   7408         MOV     A,#0x8
   \   0000AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000B1                ; Setup parameters for call to function printf
   \   0000B1   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_33:
   \   0000B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B7   90....       MOV     DPTR,#aExtendedAddress + 1
   \   0000BA   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   0000BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C0   90....       MOV     DPTR,#aExtendedAddress + 2
   \   0000C3   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   0000C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000C9   90....       MOV     DPTR,#aExtendedAddress + 3
   \   0000CC   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   0000CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000D2   90....       MOV     DPTR,#aExtendedAddress + 4
   \   0000D5   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   0000D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000DB   90....       MOV     DPTR,#aExtendedAddress + 5
   \   0000DE   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000E1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000E4   90....       MOV     DPTR,#aExtendedAddress + 6
   \   0000E7   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000EA   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000ED   90....       MOV     DPTR,#aExtendedAddress + 7
   \   0000F0   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   0000F3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000F6   7A..         MOV     R2,#`?<Constant "IEEE:%02X%02X%02X%02X...">` & 0xff
   \   0000F8   7B..         MOV     R3,#(`?<Constant "IEEE:%02X%02X%02X%02X...">` >> 8) & 0xff
   \   0000FA   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   0000FD   7410         MOV     A,#0x10
   \   0000FF   12....       LCALL   ?DEALLOC_XSTACK8
   \   000102                ; Setup parameters for call to function printf
   \   000102   90....       MOV     DPTR,#_NIB + 25
   \   000105   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000108   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00010B   90....       MOV     DPTR,#_NIB + 26
   \   00010E   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000111   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000114   90....       MOV     DPTR,#_NIB + 27
   \   000117   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   00011A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00011D   90....       MOV     DPTR,#_NIB + 28
   \   000120   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000123   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000126   90....       MOV     DPTR,#_NIB + 29
   \   000129   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00012C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00012F   90....       MOV     DPTR,#_NIB + 30
   \   000132   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000135   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000138   90....       MOV     DPTR,#_NIB + 31
   \   00013B   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000141   90....       MOV     DPTR,#_NIB + 32
   \   000144   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_25:
   \   000147   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014A   7A..         MOV     R2,#`?<Constant "Parent IEEE:%02X%02X%...">` & 0xff
   \   00014C   7B..         MOV     R3,#(`?<Constant "Parent IEEE:%02X%02X%...">` >> 8) & 0xff
   \                     ??SampleApp_ProcessEvent_13:
   \   00014E   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   000151   7410         MOV     A,#0x10
   \   000153   12....       LCALL   ?DEALLOC_XSTACK8
   \   000156   02....       LJMP    ??SampleApp_ProcessEvent_3 & 0xFFFF
   \                     ??SampleApp_ProcessEvent_9:
   \   000159                ; Setup parameters for call to function printf
   \   000159   90....       MOV     DPTR,#_NIB + 33
   \   00015C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00015F   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000162   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000165   90....       MOV     DPTR,#_NIB + 23
   \   000168   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00016B   90....       MOV     DPTR,#_NIB + 20
   \   00016E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000171   7A..         MOV     R2,#`?<Constant "EndDevice:0x%04X\\r\\nPar...">` & 0xff
   \   000173   7B..         MOV     R3,#(`?<Constant "EndDevice:0x%04X\\r\\nPar...">` >> 8) & 0xff
   \   000175   02....       LJMP    ??SampleApp_ProcessEvent_12 & 0xFFFF
   \                     ??SampleApp_ProcessEvent_11:
   \   000178                ; Setup parameters for call to function printf
   \   000178   90....       MOV     DPTR,#_NIB + 33
   \   00017B   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00017E   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000181   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000184   90....       MOV     DPTR,#_NIB + 20
   \   000187   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00018A   7A..         MOV     R2,#`?<Constant "Coordinator:0x%04X\\r\\nC...">` & 0xff
   \   00018C   7B..         MOV     R3,#(`?<Constant "Coordinator:0x%04X\\r\\nC...">` >> 8) & 0xff
   \   00018E   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   000191   7406         MOV     A,#0x6
   \   000193   12....       LCALL   ?DEALLOC_XSTACK8
   \   000196                ; Setup parameters for call to function printf
   \   000196   12....       LCALL   ?Subroutine4 & 0xFFFF
    469              }
   \                     ??CrossCallReturnLabel_34:
   \   000199   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019C   90....       MOV     DPTR,#aExtendedAddress + 1
   \   00019F   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_26:
   \   0001A2   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001A5   90....       MOV     DPTR,#aExtendedAddress + 2
   \   0001A8   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_27:
   \   0001AB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001AE   90....       MOV     DPTR,#aExtendedAddress + 3
   \   0001B1   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_28:
   \   0001B4   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001B7   90....       MOV     DPTR,#aExtendedAddress + 4
   \   0001BA   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_29:
   \   0001BD   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C0   90....       MOV     DPTR,#aExtendedAddress + 5
   \   0001C3   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_30:
   \   0001C6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001C9   90....       MOV     DPTR,#aExtendedAddress + 6
   \   0001CC   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_31:
   \   0001CF   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001D2   90....       MOV     DPTR,#aExtendedAddress + 7
   \   0001D5   12....       LCALL   ??Subroutine9_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_32:
   \   0001D8   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001DB   7A..         MOV     R2,#`?<Constant "IEEE:%02X%02X%02X%02X...">` & 0xff
   \   0001DD   7B..         MOV     R3,#(`?<Constant "IEEE:%02X%02X%02X%02X...">` >> 8) & 0xff
   \   0001DF   02....       LJMP    ??SampleApp_ProcessEvent_13 & 0xFFFF
    470          
    471              // return unprocessed events
    472              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_4:
   \   0001E2   EE           MOV     A,R6
   \   0001E3   FA           MOV     R2,A
   \   0001E4   EF           MOV     A,R7
   \   0001E5   6480         XRL     A,#0x80
   \   0001E7   FB           MOV     R3,A
   \   0001E8   8027         SJMP    ??SampleApp_ProcessEvent_14
    473            }
    474          
    475            // Send a message out - This event is generated by a timer
    476            //  (setup in SampleApp_Init()).
    477            /* AD²ÉÑùÊÂ¼þ´¦Àí£¬ÖÕ¶Ë´«¸ÐÆ÷Êý¾Ý²É¼¯ºÍ·¢ËÍÍùÐ­µ÷Æ÷ */
    478            if ( events & SAMPLEAPP_ADC_MEA_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   0001EA   EE           MOV     A,R6
   \   0001EB   5404         ANL     A,#0x4
   \   0001ED   6005         JZ      ??SampleApp_ProcessEvent_15
    479            {
    480              int numbers;
                         ^
Warning[Pe177]: variable "numbers" was declared but never referenced
    481              static uint16 res_std;
                                   ^
Warning[Pe177]: variable "res_std" was declared but never referenced
    482              uint16 res_t0,res_u,res_gh;
                            ^
Warning[Pe177]: variable "res_t0" was declared but never referenced

      uint16 res_t0,res_u,res_gh;
                    ^
"E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",482  Warning[Pe177]: 
          variable "res_u" was declared but never referenced

      uint16 res_t0,res_u,res_gh;
                          ^
"E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",482  Warning[Pe177]: 
          variable "res_gh" was declared but never referenced
    483              float temp;
                           ^
Warning[Pe177]: variable "temp" was declared but never referenced
    484              
    485              
    486           #if !(defined (ZDO_COORDINATOR)) && !(defined (RTR_NWK)) //ÖÕ¶Ë
    487              /* ÖÕ¶ËÊý¾Ý²É¼¯´¦Àí */
    488              switch(adc_state)
    489              {
    490                case START: //¿ªÊ¼²âÁ¿
    491                      ADC_MeasureStart(STDR_CHANNEL, 0, 3, TRUE); //±ê×¼µç×èAD×ª»»¿ªÊ¼    
    492                      adc_state = READY1; //½øÈëÏÂÒ»×´Ì¬
    493                      osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_ADC_MEA_EVT,SAMPLEAPP_ADC_MEA_TIMEOUT ); //200ms¶¨Ê±Æ÷ÊÂ¼þ£¬ÓÃÓÚµÈ´ýADC×ª»»Íê³É
    494                      break;
    495                      
    496                case READY1: //±ê×¼µç×èAD²ÉÑùÖµ¶ÁÈ¡£¬¿ªÆôÎÂ¶ÈADC×ª»»
    497                      res_std = ADC_ReadData(0);
    498                      ADC_MeasureStart(T0_CHANNEL, 0, 3, TRUE); //ÎÂ¶ÈAD×ª»»¿ªÊ¼             
    499                      adc_state = READY2; //½øÈëÏÂÒ»×´Ì¬
    500                      osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_ADC_MEA_EVT,SAMPLEAPP_ADC_MEA_TIMEOUT ); //200ms¶¨Ê±Æ÷ÊÂ¼þ£¬ÓÃÓÚµÈ´ýADC×ª»»Íê³É
    501                      break;
    502                      
    503                case READY2: //ÎÂ¶ÈAD²ÉÑùÖµ¶ÁÈ¡£¬¿ªÆôÊª¶ÈADC×ª»»
    504                      res_t0 = ADC_ReadData(0);
    505                      ADC_MeasureStart(U_CHANNEL, 0, 0, TRUE); //Êª¶ÈAD×ª»»¿ªÊ¼
    506                      
    507                      if(res_std==0) //·ÀÖ¹³ýÊýÎªÁã
    508                      {
    509                        res_std = 1;
    510                      }            
    511                      temp = (float)res_t0/(float)res_std*100;
    512                      temp = CalculateTemp(temp) + cal_t0 + CAL_T0_CONSTANT; //¼ÓÉÏÎÂ¶ÈÐ£×¼Öµ
    513                      
    514                      temp = temp*10; //·Å´óÊ®±¶£¬ËÄÉáÎåÈë
    515                      if(temp<0)
    516                      {
    517                        temp -= 0.5; 
    518                      }
    519                      else
    520                      {
    521                        temp += 0.5;
    522                      }
    523                       
    524                      sensor.temperature = temp;
    525                      
    526                      if(debug)
    527                      {
    528                        printf("\r\nres_std=%u,res_t0=%u,temper=%5.2f\r\n", res_std, res_t0, temp/10);
    529                      }
    530                      
    531                      adc_state = READY3; //½øÈëÏÂÒ»×´Ì¬
    532                      osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_ADC_MEA_EVT,SAMPLEAPP_ADC_MEA_TIMEOUT ); //200ms¶¨Ê±Æ÷ÊÂ¼þ£¬ÓÃÓÚµÈ´ýADC×ª»»Íê³É
    533                      break;
    534                      
    535                case READY3: //Êª¶ÈAD²ÉÑùÖµ¶ÁÈ¡£¬¿ªÆô¹âºÏÁ¿ADC×ª»»
    536                      res_u = ADC_ReadData(0);
    537                      ADC_MeasureStart(GH_CHANNEL, 0, 3, TRUE); //¹âºÏÁ¿AD×ª»»¿ªÊ¼ £¬ÔöÒæ8±¶          
    538                      sensor.humidity = (float)res_u/65535*AD_VREF*100 + 0.5;
    539                      
    540                      if(debug)
    541                      {
    542                        printf("\r\nres_u=%u,humidity=%d\r\n", res_u, sensor.humidity);
    543                      }
    544                      
    545                      adc_state = READY4; //½øÈëÏÂÒ»×´Ì¬
    546                      osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_ADC_MEA_EVT,SAMPLEAPP_ADC_MEA_TIMEOUT ); //200ms¶¨Ê±Æ÷ÊÂ¼þ£¬ÓÃÓÚµÈ´ýADC×ª»»Íê³É
    547                      break;
    548                      
    549                case READY4: //¹âºÏÁ¿AD²ÉÑùÖµ¶ÁÈ¡£¬×ª»»Íê³É
    550                      res_gh = ADC_ReadData(0);
    551                      temp = (float)res_gh/65535*AD_VREF/8*1000; //³Ë1000µçÑ¹µ¥Î»×ª»»ÎªmV
    552                      sensor.photosyn = CalculateRadiation(temp, gh_factor) + 0.5 + CAL_GH; //¼ÓÉÏ¹âºÏÕûÌå¶©ÕýÖµ
    553                      if(debug)
    554                      {
    555                        printf("\r\nres_gh=%u,guanghe=%d\r\n", res_gh, sensor.photosyn);
    556                      }
    557                      adc_done = TRUE;
    558                      break;
    559              }
    560              
    561              if(adc_done) //²âÁ¿×ª»»Íê³É£¬Êý¾Ý´¦Àí·¢ËÍ
    562              {
    563                    
    564                adc_state = START; //³õÊ¼»¯
    565                
    566                adc_done = FALSE; //ÇåÁã£¬ÎªÏÂ´Î×ª»»×ö×¼±¸
    567                
    568                numbers = sprintf(data_sensor, "BG,ID%03u,%04d,%03d,%04d,ED\r\n", sensor_id, 
    569                                  sensor.temperature, sensor.humidity, sensor.photosyn);
    570                
    571                /* ÖÕ¶ËÊý¾Ý·¢ËÍ */
    572                if(debug)
    573                {
    574                  printf("\r\n%s", data_sensor);
    575                }
    576                
    577                SampleApp_SendPointToPointMessage(data_sensor, numbers); //µã¶Ôµã·¢ËÍº¯Êý,ÖÕ¶Ë´«¸ÐÆ÷Êý¾Ý·¢ÍùÐ­µ÷Æ÷
    578              }
    579          #endif
    580          
    581              // return unprocessed events
    582              return (events ^ SAMPLEAPP_ADC_MEA_EVT);
   \   0001EF   EE           MOV     A,R6
   \   0001F0   6404         XRL     A,#0x4
   \   0001F2   8007         SJMP    ??SampleApp_ProcessEvent_16
    583            }
    584            
    585            /* ÖÜÆÚ 5s ÊÂ¼þ´¦Àí */
    586            if( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_15:
   \   0001F4   EE           MOV     A,R6
   \   0001F5   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001F7   5005         JNC     ??SampleApp_ProcessEvent_17
    587            {
    588          #if !(defined (ZDO_COORDINATOR)) && !(defined (RTR_NWK)) //ÖÕ¶Ë
    589              osal_set_event( SampleApp_TaskID, SAMPLEAPP_ADC_MEA_EVT );//´¥·¢ADC²ÉÑù´¦ÀíÊÂ¼þ
    590          #endif
    591              // return unprocessed events
    592              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0001F9   6401         XRL     A,#0x1
   \                     ??SampleApp_ProcessEvent_16:
   \   0001FB   FA           MOV     R2,A
   \   0001FC   8013         SJMP    ??SampleApp_ProcessEvent_14
    593            }
    594            
    595            /* ÖÜÆÚ500msÎ¹¹·ÊÂ¼þ´¦Àí */
    596            if( events & SAMPLEAPP_WDT_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_17:
   \   0001FE   5402         ANL     A,#0x2
   \   000200   600B         JZ      ??SampleApp_ProcessEvent_18
    597            {
    598              if(!rs_flag)
   \   000202   90....       MOV     DPTR,#rs_flag
   \   000205   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000208   7003         JNZ     ??SampleApp_ProcessEvent_18
    599              {
    600                WDT_Feed();//Î¹¹·
   \   00020A                ; Setup parameters for call to function WDT_Feed
   \   00020A   12....       LCALL   ??WDT_Feed?relay     ; Banked call to: WDT_Feed
    601                //HalUARTWrite(0,"hellow!\n",strlen("hellow!\n") );
    602              }
    603            }
    604          
    605            // Discard unknown events
    606            return 0;
   \                     ??SampleApp_ProcessEvent_18:
   \   00020D   7A00         MOV     R2,#0x0
   \   00020F   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_14:
   \   000211                REQUIRE ?Subroutine0
   \   000211                ; // Fall through to label ?Subroutine0
    607          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   90....       MOV     DPTR,#_NIB + 22
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F5..         MOV     ?V2,A
   \   000006   75..00       MOV     ?V3,#0x0
   \   000009   78..         MOV     R0,#?V2
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   90....       MOV     DPTR,#aExtendedAddress
   \   000003                REQUIRE ??Subroutine9_0
   \   000003                ; // Fall through to label ??Subroutine9_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine9_0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F5..         MOV     ?V2,A
   \   000003   78..         MOV     R0,#?V2
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   F8           MOV     R0,A
   \   000002   A3           INC     DPTR
   \   000003   E0           MOVX    A,@DPTR
   \   000004   F9           MOV     R1,A
   \   000005   E8           MOV     A,R0
   \   000006   49           ORL     A,R1
   \   000007   22           RET
    608          
    609          /*********************************************************************
    610           * Event Generation Functions
    611           */
    612          
    613          
    614          /*********************************************************************
    615           * LOCAL FUNCTIONS
    616           */
    617          
    618          /*********************************************************************
    619           * @fn      SampleApp_MessageMSGCB
    620           *
    621           * @brief   ÎÞÏß½ÓÊÕÊý¾Ý½âÎö
    622           *          
    623           *          
    624           *
    625           * @param   none
    626           *
    627           * @return  none
    628           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    629          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt ) //2017.03.17 Ñî¹ãÏæ£ºÈ¥³ý´ØID·½Ê½½âÎöÐÅÏ¢£¬
   \                     SampleApp_MessageMSGCB:
    630          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
    631            char *str = &pkt->cmd.Data[0];
                               ^
Warning[Pe144]: a value of type "unsigned char *" cannot be used to initialize
          an entity of type "char *"
   \   000005   EA           MOV     A,R2
   \   000006   2422         ADD     A,#0x22
   \   000008   F582         MOV     DPL,A
   \   00000A   E4           CLR     A
   \   00000B   3B           ADDC    A,R3
   \   00000C   F583         MOV     DPH,A
   \   00000E   E0           MOVX    A,@DPTR
   \   00000F   F5..         MOV     ?V0,A
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \   000013   F5..         MOV     ?V1,A
    632            int len = pkt->cmd.DataLength;
   \   000015   EA           MOV     A,R2
   \   000016   2420         ADD     A,#0x20
   \   000018   F582         MOV     DPL,A
   \   00001A   E4           CLR     A
   \   00001B   3B           ADDC    A,R3
   \   00001C   F583         MOV     DPH,A
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   FE           MOV     R6,A
   \   000020   A3           INC     DPTR
   \   000021   E0           MOVX    A,@DPTR
   \   000022   FF           MOV     R7,A
    633            int sens_id = 0;
    634            char temp[20];
    635            int numbers;
    636            
    637            /* ÎÞÏß½ÓÊÕÊý¾Ý´òÓ¡ */
    638            if(debug) //µ÷ÊÔÐÅÏ¢
   \   000023   90....       MOV     DPTR,#debug
   \   000026   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   000029   600D         JZ      ??SampleApp_MessageMSGCB_0
    639            {
    640              HalUARTWrite(0, str,len);//´òÓ¡ÊÕµ½Êý¾Ý
                                     ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"

    char temp[20];
         ^
"E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",634  Warning[Pe177]: 
          variable "temp" was declared but never referenced

    int numbers;
        ^
"E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÅ©ÌïÐ¡Æøºò\³ÌÐò\code\Projects\zstack\Samples\SampleApp\Source\SampleApp.c",635  Warning[Pe177]: 
          variable "numbers" was declared but never referenced
   \   00002B                ; Setup parameters for call to function HalUARTWrite
   \   00002B   EE           MOV     A,R6
   \   00002C   FC           MOV     R4,A
   \   00002D   EF           MOV     A,R7
   \   00002E   FD           MOV     R5,A
   \   00002F   AA..         MOV     R2,?V0
   \   000031   AB..         MOV     R3,?V1
   \   000033   7900         MOV     R1,#0x0
   \   000035   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    641            }
    642            
    643            /* ÎÞÏß½ÓÊÕÊý¾Ý½âÎö */
    644            if(*(str+len-1)== '\n')
   \                     ??SampleApp_MessageMSGCB_0:
   \   000038   E5..         MOV     A,?V0
   \   00003A   2E           ADD     A,R6
   \   00003B   F8           MOV     R0,A
   \   00003C   E5..         MOV     A,?V1
   \   00003E   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000041   6003         JZ      $+5
   \   000043   02....       LJMP    ??SampleApp_MessageMSGCB_1 & 0xFFFF
    645            {
    646          #if defined (ZDO_COORDINATOR) || defined (RTR_NWK) //Ð­µ÷Æ÷
    647              /* Ð­µ÷Æ÷½ÓÊÕÊý¾Ý½âÎö */
    648              sens_id = atoi(str+DATA_OFFSET_ID);
   \   000046                ; Setup parameters for call to function atoi
   \   000046   E5..         MOV     A,?V0
   \   000048   2405         ADD     A,#0x5
   \   00004A   FA           MOV     R2,A
   \   00004B   E4           CLR     A
   \   00004C   35..         ADDC    A,?V1
   \   00004E   FB           MOV     R3,A
   \   00004F   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   000052   8A..         MOV     ?V2,R2
   \   000054   8B..         MOV     ?V3,R3
   \   000056   A8..         MOV     R0,?V2
   \   000058   A9..         MOV     R1,?V3
    649              if(sens_id>=1&&sens_id<=3) //ÌáÈ¡´«¸ÐÆ÷Êý¾Ý
   \   00005A   E8           MOV     A,R0
   \   00005B   24FF         ADD     A,#-0x1
   \   00005D   1A           DEC     R2
   \   00005E   E9           MOV     A,R1
   \   00005F   34FF         ADDC    A,#-0x1
   \   000061   FB           MOV     R3,A
   \   000062   C3           CLR     C
   \   000063   EA           MOV     A,R2
   \   000064   9403         SUBB    A,#0x3
   \   000066   EB           MOV     A,R3
   \   000067   9400         SUBB    A,#0x0
   \   000069   5064         JNC     ??SampleApp_MessageMSGCB_1
    650              {
    651                int i = 0;
    652                i = sens_id - 1;
   \   00006B   E8           MOV     A,R0
   \   00006C   24FF         ADD     A,#-0x1
   \   00006E   18           DEC     R0
   \   00006F   E9           MOV     A,R1
   \   000070   34FF         ADDC    A,#-0x1
   \   000072   F9           MOV     R1,A
    653                coordi[i].temperature = atoi(str+DATA_OFFSET_T0);
   \   000073   E8           MOV     A,R0
   \   000074   75F006       MOV     B,#0x6
   \   000077   A4           MUL     AB
   \   000078   F8           MOV     R0,A
   \   000079   AAF0         MOV     R2,B
   \   00007B   75F006       MOV     B,#0x6
   \   00007E   E9           MOV     A,R1
   \   00007F   A4           MUL     AB
   \   000080   2A           ADD     A,R2
   \   000081   F9           MOV     R1,A
   \   000082   74..         MOV     A,#coordi & 0xff
   \   000084   28           ADD     A,R0
   \   000085   FE           MOV     R6,A
   \   000086   74..         MOV     A,#(coordi >> 8) & 0xff
   \   000088   39           ADDC    A,R1
   \   000089   FF           MOV     R7,A
   \   00008A                ; Setup parameters for call to function atoi
   \   00008A   E5..         MOV     A,?V0
   \   00008C   2409         ADD     A,#0x9
   \   00008E   FA           MOV     R2,A
   \   00008F   E4           CLR     A
   \   000090   35..         ADDC    A,?V1
   \   000092   FB           MOV     R3,A
   \   000093   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   000096   8E82         MOV     DPL,R6
   \   000098   8F83         MOV     DPH,R7
   \   00009A   EA           MOV     A,R2
   \   00009B   F0           MOVX    @DPTR,A
   \   00009C   A3           INC     DPTR
   \   00009D   EB           MOV     A,R3
   \   00009E   F0           MOVX    @DPTR,A
    654                coordi[i].humidity = atoi(str+DATA_OFFSET_U);
   \   00009F                ; Setup parameters for call to function atoi
   \   00009F   E5..         MOV     A,?V0
   \   0000A1   240E         ADD     A,#0xe
   \   0000A3   FA           MOV     R2,A
   \   0000A4   E4           CLR     A
   \   0000A5   35..         ADDC    A,?V1
   \   0000A7   FB           MOV     R3,A
   \   0000A8   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   0000AB   8E82         MOV     DPL,R6
   \   0000AD   8F83         MOV     DPH,R7
   \   0000AF   A3           INC     DPTR
   \   0000B0   A3           INC     DPTR
   \   0000B1   EA           MOV     A,R2
   \   0000B2   F0           MOVX    @DPTR,A
   \   0000B3   A3           INC     DPTR
   \   0000B4   EB           MOV     A,R3
   \   0000B5   F0           MOVX    @DPTR,A
    655                coordi[i].photosyn = atoi(str+DATA_OFFSET_GH);
   \   0000B6                ; Setup parameters for call to function atoi
   \   0000B6   E5..         MOV     A,?V0
   \   0000B8   2412         ADD     A,#0x12
   \   0000BA   FA           MOV     R2,A
   \   0000BB   E4           CLR     A
   \   0000BC   35..         ADDC    A,?V1
   \   0000BE   FB           MOV     R3,A
   \   0000BF   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   0000C2   8E82         MOV     DPL,R6
   \   0000C4   8F83         MOV     DPH,R7
   \   0000C6   A3           INC     DPTR
   \   0000C7   A3           INC     DPTR
   \   0000C8   A3           INC     DPTR
   \   0000C9   A3           INC     DPTR
   \   0000CA   EA           MOV     A,R2
   \   0000CB   F0           MOVX    @DPTR,A
   \   0000CC   A3           INC     DPTR
   \   0000CD   EB           MOV     A,R3
   \   0000CE   F0           MOVX    @DPTR,A
    656              }
    657              
    658          #else //ÖÕ¶Ë
    659              /* ÖÕ¶Ë½ÓÊÕÊý¾Ý½âÎö */
    660              if(osal_memcmp(str,"#RS",3))//¸´Î»
    661              {
    662                if((len>5)&&(atoi(str+4)!=0))  //²ÎÊý²»Îª0Çå³ýµôÍøÂçÐÅÏ¢
    663                {
    664                  zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
    665                  printf("clear\r\n");
    666                }
    667                
    668                printf("reset\r\n");
    669                /* ¸´Î» */     
    670                rs_flag = 1;//ÖÃÎ»Í£Ö¹Î¹¹·±êÖ¾     
    671              }
    672              else if(osal_memcmp(str,"#GH",3))
    673              {
    674                if(len == 5) //¶ÁÈ¡¹âºÏ±íÏµÊý
    675                {
    676                  numbers = sprintf(temp,"<GH,%03u,%.2f>\r\n", sensor_id, gh_factor);
    677                  SampleApp_SendPointToPointMessage(temp, numbers);
    678                }
    679                else //ÉèÖÃ¹âºÏ±íÏµÊý
    680                {
    681                  float temp_gh;
    682                  int temp_id;
    683                  char *p = NULL;
    684                  
    685                  p = strchr(str, ','); //²éÕÒµÚÒ»¸ö","³öÏÖµÄÎ»ÖÃ
    686                  sscanf(p+1, "%d", &temp_id);
    687                  if(temp_id == sensor_id)
    688                  {
    689                    p = strchr(p+1, ','); //²éÕÒµÚ¶þ¸ö","³öÏÖµÄÎ»ÖÃ
    690                    sscanf(p+1, "%f", &temp_gh);
    691                    if(temp_gh>=1.0)
    692                    {
    693                      gh_factor = temp_gh;
    694                      
    695                      /* ¹âºÏ±íÏµÊý´æÈëflash */
    696                      sprintf(dev_gh, "%5.2f", gh_factor);
    697                      
    698                      if(SUCCESS == osal_nv_write(DEVICE_GH, 0, DEVICE_GH_LEN, dev_gh))
    699                        ReturnTorF(1,0); //´æÈë³É¹¦
    700                      else
    701                        ReturnTorF(0,0); //´æÈëÊ§°Ü
    702                    }
    703                    else
    704                    {
    705                      ReturnTorF(0,0); //´íÎó
    706                    }
    707                  }
    708                }
    709              }
    710          #endif
    711            }
    712          
    713          }
   \                     ??SampleApp_MessageMSGCB_1:
   \   0000CF   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   3F           ADDC    A,R7
   \   000001   F9           MOV     R1,A
   \   000002   E8           MOV     A,R0
   \   000003   24FF         ADD     A,#-0x1
   \   000005   F582         MOV     DPL,A
   \   000007   E9           MOV     A,R1
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   F583         MOV     DPH,A
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   640A         XRL     A,#0xa
   \   00000F   22           RET
    714          
    715          /*********************************************************************
    716           * @fn      SampleApp_SendPeriodicMessage
    717           *
    718           * @brief   Send the periodic message.Í¨¹ýÎÞÏßÏòÖÕ¶Ë´«¸ÐÆ÷·¢ËÍÊý¾Ý
    719           *
    720           * @param   none
    721           *
    722           * @return  none
    723           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    724          void SampleApp_SendPeriodicMessage(char *p, int len)
   \                     SampleApp_SendPeriodicMessage:
    725          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    726            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    727                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    728                                 len,//×Ö½ÚÊý
    729                                 p,//Ö¸ÕëÍ·
                                        ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    730                                 &SampleApp_TransID,
    731                                 AF_DISCV_ROUTE,
    732                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0,#0x1e
   \   000008   78..         MOV     R0,#?V0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   \   00001C   78..         MOV     R0,#?V0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8C..         MOV     ?V0,R4
   \   000023   8D..         MOV     ?V1,R5
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..01       MOV     ?V0,#0x1
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7920         MOV     R1,#0x20
   \   000037   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000039   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003B   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   00003D   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   00003F                REQUIRE ?Subroutine1
   \   00003F                ; // Fall through to label ?Subroutine1
    733            {
    734            }
    735            else
    736            {
    737              // Error occurred in request to send.
    738            }
    739          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000003   7409         MOV     A,#0x9
   \   000005   12....       LCALL   ?DEALLOC_XSTACK8
   \   000008   7F02         MOV     R7,#0x2
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA
    740          
    741          /*********************************************************************
    742           * @fn      SampleApp_SendPointToPointMessage
    743           *
    744           * @brief   Íø·äµã¶Ôµã·¢ËÍº¯Êý
    745           *
    746           * @param   none
    747           *
    748           * @return  none
    749           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    750          void SampleApp_SendPointToPointMessage( char *p, int len )
   \                     SampleApp_SendPointToPointMessage:
    751          { 
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    752            if ( AF_DataRequest( &Point_To_Point_DstAddr,&SampleApp_epDesc,
    753                                   SAMPLEAPP_POINT_TO_POINT_CLUSTERID,
    754                                   len,//×Ö½ÚÊý
    755                                   p,//Ê×µØÖ·
                                          ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    756                                   &SampleApp_TransID,
    757                                   AF_DISCV_ROUTE,
    758                                   AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000005                ; Setup parameters for call to function AF_DataRequest
   \   000005   75..1E       MOV     ?V0,#0x1e
   \   000008   78..         MOV     R0,#?V0
   \   00000A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00000D   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   000010   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000013   78..         MOV     R0,#?V0
   \   000015   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000018   8A..         MOV     ?V0,R2
   \   00001A   8B..         MOV     ?V1,R3
   \   00001C   78..         MOV     R0,#?V0
   \   00001E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000021   8C..         MOV     ?V0,R4
   \   000023   8D..         MOV     ?V1,R5
   \   000025   78..         MOV     R0,#?V0
   \   000027   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002A   75..03       MOV     ?V0,#0x3
   \   00002D   75..00       MOV     ?V1,#0x0
   \   000030   78..         MOV     R0,#?V0
   \   000032   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000035   7920         MOV     R1,#0x20
   \   000037   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000039   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   00003B   7A..         MOV     R2,#Point_To_Point_DstAddr & 0xff
   \   00003D   7B..         MOV     R3,#(Point_To_Point_DstAddr >> 8) & 0xff
   \   00003F   80..         SJMP    ?Subroutine1
    759            {
    760            }
    761            else
    762            {
    763              // Error occurred in request to send.
    764            }
    765          }
    766          
    767          /*********************************************************************
    768           * @fn      SampleApp_SerialCMD
    769           *
    770           * @brief   Í¨Ñ¶´®¿Ú½ÓÊÕÊý¾Ý½âÎö
    771           *
    772           * @param   none
    773           *
    774           * @return  none
    775           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    776          void SampleApp_SerialCMD(mtOSALSerialData_t *cmdMsg)
   \                     SampleApp_SerialCMD:
    777          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 2
   \   000005   74FE         MOV     A,#-0x2
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    778             uint8 i,len,*str=NULL; //len ÓÐÓÃÊý¾Ý³¤¶È
    779             int numbers;
    780             str=cmdMsg->msg; //Ö¸ÏòÊý¾Ý¿ªÍ·
   \   00000A   8A82         MOV     DPL,R2
   \   00000C   8B83         MOV     DPH,R3
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   FE           MOV     R6,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   FF           MOV     R7,A
    781             len=*str; //msg ÀïµÄµÚ 1 ¸ö×Ö½Ú´ú±íºóÃæµÄÊý¾Ý³¤¶È
   \   000015   8E82         MOV     DPL,R6
   \   000017   8F83         MOV     DPH,R7
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   F5..         MOV     ?V3,A
    782             str++; //ÁîÖ¸ÕëÖ¸ÏòµÚÒ»¸ö×Ö·û
   \   00001C   A3           INC     DPTR
   \   00001D   AE82         MOV     R6,DPL
   \   00001F   AF83         MOV     R7,DPH
    783             
    784             /********´òÓ¡³ö´®¿Ú½ÓÊÕµ½µÄÊý¾Ý£¬ÓÃÓÚÌáÊ¾*********/
    785             //HalUARTWrite(0,str,len);
    786             
    787             /* ÉÏÎ»»úÖ¸Áî½âÎö */
    788             if(*(str+len-1)== '\n')
   \   000021   F5..         MOV     ?V0,A
   \   000023   EE           MOV     A,R6
   \   000024   25..         ADD     A,?V0
   \   000026   F8           MOV     R0,A
   \   000027   E4           CLR     A
   \   000028   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00002B   6003         JZ      $+5
   \   00002D   02....       LJMP    ??SampleApp_SerialCMD_0 & 0xFFFF
    789             {
    790          #if defined (ZDO_COORDINATOR) || defined (RTR_NWK) //Ð­µ÷Æ÷
    791               
    792                //Êý¾Ý¶ÁÈ¡£¨DM£©
    793                if(osal_memcmp(str,"#DM",3)) //Ö÷²É¶ÁÈ¡Êý¾Ý
   \   000030                ; Setup parameters for call to function osal_memcmp
   \   000030   75....       MOV     ?V0,#`?<Constant "#DM">` & 0xff
   \   000033   75....       MOV     ?V1,#(`?<Constant "#DM">` >> 8) & 0xff
   \   000036   75..00       MOV     ?V2,#0x0
   \   000039   78..         MOV     R0,#?V0
   \   00003B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00003E   7C03         MOV     R4,#0x3
   \   000040   7D00         MOV     R5,#0x0
   \   000042   8E82         MOV     DPL,R6
   \   000044   8F83         MOV     DPH,R7
   \   000046   A982         MOV     R1,DPL
   \   000048   AA83         MOV     R2,DPH
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   00004F   7403         MOV     A,#0x3
   \   000051   12....       LCALL   ?DEALLOC_XSTACK8
   \   000054   E9           MOV     A,R1
   \   000055   6061         JZ      ??SampleApp_SerialCMD_1
    794                {
    795                  /* Ö÷²É¶ÁÈ¡Êý¾Ý */
    796                  numbers = sprintf(data_coor, "BG,ID001,%04d,%03d,%04d,ID002,%04d,%03d,%04d,ID003,%04d,%03d,%04d,ED\r\n",coordi[0].temperature,
    797                                    coordi[0].humidity,coordi[0].photosyn,coordi[1].temperature,coordi[1].humidity,coordi[1].photosyn,
    798                                    coordi[2].temperature,coordi[2].humidity,coordi[2].photosyn); //Êý¾ÝÌî³ä
    799                  
    800                  SendDataToCollector(data_coor, numbers); //Êý¾Ý·¢ÍùÖ÷²É
   \   000057                ; Setup parameters for call to function SendDataToCollector
   \   000057                ; Setup parameters for call to function sprintf
   \   000057   90....       MOV     DPTR,#coordi + 16
   \   00005A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00005D   90....       MOV     DPTR,#coordi + 14
   \   000060   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000063   90....       MOV     DPTR,#coordi + 12
   \   000066   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000069   90....       MOV     DPTR,#coordi + 10
   \   00006C   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00006F   90....       MOV     DPTR,#coordi + 8
   \   000072   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000075   90....       MOV     DPTR,#coordi + 6
   \   000078   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00007B   90....       MOV     DPTR,#coordi + 4
   \   00007E   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000081   90....       MOV     DPTR,#coordi + 2
   \   000084   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000087   90....       MOV     DPTR,#coordi
   \   00008A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00008D   7C..         MOV     R4,#`?<Constant "BG,ID001,%04d,%03d,%0...">` & 0xff
   \   00008F   7D..         MOV     R5,#(`?<Constant "BG,ID001,%04d,%03d,%0...">` >> 8) & 0xff
   \   000091   7A..         MOV     R2,#data_coor & 0xff
   \   000093   7B..         MOV     R3,#(data_coor >> 8) & 0xff
   \   000095   12....       LCALL   ??sprintf?relay      ; Banked call to: sprintf
   \   000098   7412         MOV     A,#0x12
   \   00009A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00009D   EA           MOV     A,R2
   \   00009E   FC           MOV     R4,A
   \   00009F   EB           MOV     A,R3
   \   0000A0   FD           MOV     R5,A
   \   0000A1   7A..         MOV     R2,#data_coor & 0xff
   \   0000A3   7B..         MOV     R3,#(data_coor >> 8) & 0xff
   \   0000A5   12....       LCALL   ??SendDataToCollector?relay; Banked call to: SendDataToCollector
    801                  
    802                  osal_memset(coordi, 0, sizeof(dataType_t)*3); //·¢ËÍºóÊý¾ÝÇåÁã
   \   0000A8                ; Setup parameters for call to function osal_memset
   \   0000A8   7C12         MOV     R4,#0x12
   \   0000AA   7D00         MOV     R5,#0x0
   \   0000AC   7900         MOV     R1,#0x0
   \   0000AE   7A..         MOV     R2,#coordi & 0xff
   \   0000B0   7B..         MOV     R3,#(coordi >> 8) & 0xff
   \   0000B2   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
   \   0000B5   02....       LJMP    ??SampleApp_SerialCMD_2 & 0xFFFF
    803                }
    804                
    805                //¸´Î»Ö¸Áî£¨RS£©
    806                else if(osal_memcmp(str,"#RS",3))
   \                     ??SampleApp_SerialCMD_1:
   \   0000B8                ; Setup parameters for call to function osal_memcmp
   \   0000B8   75....       MOV     ?V0,#`?<Constant "#RS">` & 0xff
   \   0000BB   75....       MOV     ?V1,#(`?<Constant "#RS">` >> 8) & 0xff
   \   0000BE   78..         MOV     R0,#?V0
   \   0000C0   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000C3   7C03         MOV     R4,#0x3
   \   0000C5   7D00         MOV     R5,#0x0
   \   0000C7   8E82         MOV     DPL,R6
   \   0000C9   8F83         MOV     DPH,R7
   \   0000CB   A982         MOV     R1,DPL
   \   0000CD   AA83         MOV     R2,DPH
   \   0000CF   7B00         MOV     R3,#0x0
   \   0000D1   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   0000D4   7403         MOV     A,#0x3
   \   0000D6   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D9   E9           MOV     A,R1
   \   0000DA   6047         JZ      ??SampleApp_SerialCMD_3
    807                {
    808                  /* ¸´Î» */
    809                  if((len>5)&&(atoi(str+4)!=0))  //²ÎÊý²»Îª0Çå³ýµôÍøÂçÐÅÏ¢
                                           ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   0000DC   E5..         MOV     A,?V3
   \   0000DE   C3           CLR     C
   \   0000DF   9406         SUBB    A,#0x6
   \   0000E1   401B         JC      ??SampleApp_SerialCMD_4
   \   0000E3                ; Setup parameters for call to function atoi
   \   0000E3   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_35:
   \   0000E6   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   0000E9   8B..         MOV     ?V1,R3
   \   0000EB   EA           MOV     A,R2
   \   0000EC   45..         ORL     A,?V1
   \   0000EE   600E         JZ      ??SampleApp_SerialCMD_4
    810                  {
    811                    zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
   \   0000F0                ; Setup parameters for call to function zgWriteStartupOptions
   \   0000F0   7A02         MOV     R2,#0x2
   \   0000F2   79FF         MOV     R1,#-0x1
   \   0000F4   12....       LCALL   ??zgWriteStartupOptions?relay; Banked call to: zgWriteStartupOptions
    812                    printf("clear\r\n");
   \   0000F7                ; Setup parameters for call to function printf
   \   0000F7   7A..         MOV     R2,#`?<Constant "clear\\r\\n">` & 0xff
   \   0000F9   7B..         MOV     R3,#(`?<Constant "clear\\r\\n">` >> 8) & 0xff
   \   0000FB   12....       LCALL   ??printf?relay       ; Banked call to: printf
    813                  }
    814                  
    815                  ReturnTorF( 1, 1 ); //ÕýÈ·
   \                     ??SampleApp_SerialCMD_4:
   \   0000FE                ; Setup parameters for call to function ReturnTorF
   \   0000FE   7C01         MOV     R4,#0x1
   \   000100   7D00         MOV     R5,#0x0
   \   000102   7A01         MOV     R2,#0x1
   \   000104   7B00         MOV     R3,#0x0
   \   000106   12....       LCALL   ??ReturnTorF?relay   ; Banked call to: ReturnTorF
    816                  SampleApp_SendPeriodicMessage(str, len); //×ª·¢¸´Î»Ö¸Áî¸øÖÕ¶Ë´«¸ÐÆ÷
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000109                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000109   85....       MOV     ?V0,?V3
   \   00010C   AC..         MOV     R4,?V0
   \   00010E   7D00         MOV     R5,#0x0
   \   000110   EE           MOV     A,R6
   \   000111   FA           MOV     R2,A
   \   000112   EF           MOV     A,R7
   \   000113   FB           MOV     R3,A
   \   000114   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay; Banked call to: SampleApp_SendPeriodicMessage
    817                  
    818                  rs_flag = 1;//ÖÃÎ»Í£Ö¹Î¹¹·±êÖ¾
   \   000117   90....       MOV     DPTR,#rs_flag
   \   00011A   7401         MOV     A,#0x1
   \   00011C   F0           MOVX    @DPTR,A
   \   00011D   A3           INC     DPTR
   \   00011E   E4           CLR     A
   \   00011F   F0           MOVX    @DPTR,A
   \   000120   02....       LJMP    ??SampleApp_SerialCMD_2 & 0xFFFF
    819                  
    820                }
    821                else if(osal_memcmp(str,"#GH",3)) //Ð­µ÷Æ÷Ê¹ÓÃGHÖ¸Áî¸ø´«¸ÐÆ÷ÉèÖÃ¹âºÏ±íÏµÊý
   \                     ??SampleApp_SerialCMD_3:
   \   000123                ; Setup parameters for call to function osal_memcmp
   \   000123   75....       MOV     ?V0,#`?<Constant "#GH">` & 0xff
   \   000126   75....       MOV     ?V1,#(`?<Constant "#GH">` >> 8) & 0xff
   \   000129   78..         MOV     R0,#?V0
   \   00012B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00012E   7C03         MOV     R4,#0x3
   \   000130   7D00         MOV     R5,#0x0
   \   000132   8E82         MOV     DPL,R6
   \   000134   8F83         MOV     DPH,R7
   \   000136   A982         MOV     R1,DPL
   \   000138   AA83         MOV     R2,DPH
   \   00013A   7B00         MOV     R3,#0x0
   \   00013C   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   00013F   7403         MOV     A,#0x3
   \   000141   12....       LCALL   ?DEALLOC_XSTACK8
   \   000144   E9           MOV     A,R1
   \   000145   6011         JZ      ??SampleApp_SerialCMD_5
    822                {
    823                  SampleApp_SendPeriodicMessage(str, len);
                                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char *"
   \   000147                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   000147   85....       MOV     ?V0,?V3
   \   00014A   AC..         MOV     R4,?V0
   \   00014C   7D00         MOV     R5,#0x0
   \   00014E   EE           MOV     A,R6
   \   00014F   FA           MOV     R2,A
   \   000150   EF           MOV     A,R7
   \   000151   FB           MOV     R3,A
   \   000152   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay; Banked call to: SampleApp_SendPeriodicMessage
   \   000155   02....       LJMP    ??SampleApp_SerialCMD_2 & 0xFFFF
    824                }
    825          #else //ÖÕ¶Ë½Úµã
    826                
    827                //Éè±¸ID¶ÁÈ¡ºÍÉèÖÃ£¨ID£©
    828                if(osal_memcmp(str,"#ID",3))
    829                {
    830                  if(len == 5) //¶ÁÈ¡Éè±¸ID
    831                  {          
    832                    printf("<ID,%03u>\r\n", sensor_id);
    833                  }
    834                  else //ÉèÖÃÉè±¸ID
    835                  {
    836                    int temp_id;
    837                    
    838                    sscanf(str+4, "%d", &temp_id);                           
    839                    if(temp_id>=1 && temp_id<=3)
    840                    {
    841                      sensor_id = temp_id;
    842                      
    843                      /* Éè±¸ID´æÈëflash */
    844                      sprintf(dev_id, "%03u", sensor_id);
    845                      
    846                      if(SUCCESS == osal_nv_write(DEVICE_ID, 0, DEVICE_ID_LEN, dev_id))
    847                        ReturnTorF( 1, 1 ); //´æÈë³É¹¦
    848                      else
    849                        ReturnTorF( 0, 1 ); //´æÈëÊ§°Ü
    850                    }
    851                    else
    852                    {
    853                      ReturnTorF( 0, 1 ); //´íÎó
    854                    }
    855                  }
    856                }
    857                
    858                //¹âºÏ±í¶ÁÈ¡ºÍÉèÖÃ£¨GH£©
    859                else if(osal_memcmp(str,"#GH",3))
    860                {
    861                  if(len == 5) //¶ÁÈ¡¹âºÏ±íÏµÊý
    862                  {
    863                    printf("<GH,%03u,%.2f>\r\n", sensor_id, gh_factor);
    864                  }
    865                  else //ÉèÖÃ¹âºÏ±íÏµÊý
    866                  {
    867                    float temp_gh;
    868                    char *p = NULL;
    869                    
    870                    p = strchr(str, ','); //²éÕÒµÚÒ»¸ö","³öÏÖµÄÎ»ÖÃ
    871                    p = strchr(p+1, ','); //²éÕÒµÚ¶þ¸ö","³öÏÖµÄÎ»ÖÃ
    872                    sscanf(p+1, "%f", &temp_gh);
    873                    if(temp_gh>=1.0)
    874                    {
    875                      gh_factor = temp_gh;
    876                      
    877                      /* ¹âºÏ±íÏµÊý´æÈëflash */
    878                      sprintf(dev_gh, "%5.2f", gh_factor);
    879                      
    880                      if(SUCCESS == osal_nv_write(DEVICE_GH, 0, DEVICE_GH_LEN, dev_gh))
    881                        ReturnTorF( 1, 1 ); //´æÈë³É¹¦
    882                      else
    883                        ReturnTorF( 0, 1 ); //´æÈëÊ§°Ü
    884                    }
    885                    else
    886                    {
    887                      ReturnTorF( 0, 1 ); //´íÎó
    888                    }
    889                  }
    890                }
    891                
    892                //¸´Î»Ö¸Áî£¨RS£©
    893                else if(osal_memcmp(str,"#RS",3)) 
    894                {
    895                  /* ¸´Î» */
    896                  if((len>5)&&(atoi(str+4)!=0))  //²ÎÊý²»Îª0Çå³ýµôÍøÂçÐÅÏ¢
    897                  {
    898                    zgWriteStartupOptions(ZG_STARTUP_SET, ZCD_STARTOPT_DEFAULT_NETWORK_STATE);
    899                    printf("clear\r\n");
    900                  }
    901                  ReturnTorF( 1, 1 );//¸´Î»³É¹¦
    902                  rs_flag = 1;//ÖÃÎ»Í£Ö¹Î¹¹·±êÖ¾
    903                }
    904                
    905                //ÎÂ¶È¶©Õý£¨CR£©
    906                else if(osal_memcmp(str,"#CR",3)) //ÎÂ¶È¶©Õý
    907                {
    908                  if( len == 5 ) //¶ÁÈ¡ÎÂ¶È¶©ÕýÖµ
    909                  {
    910                    printf("<CR,%.2f>\r\n", cal_t0);
    911                  }
    912                  else if( len > 5 )
    913                  {
    914                    float temp_wddt;
    915                    char *p = NULL;
    916                      
    917                    p = strchr(str, ','); //²éÕÒµÚÒ»¸ö","³öÏÖµÄÎ»ÖÃ
    918                    sscanf( p+1, "%f", &temp_wddt);
    919                    if( temp_wddt>-10.0 && temp_wddt<10.00 )
    920                    {
    921                      cal_t0 = temp_wddt;
    922                       /* ÎÂ¶È¶©Õý´æÈëflash */
    923                      sprintf(dev_wddt, "%5.2f", cal_t0);
    924                      
    925                      if(SUCCESS == osal_nv_write(DEVICE_WDDT, 0, DEVICE_WDDT_LEN, dev_wddt))
    926                        ReturnTorF( 1, 1 ); //´æÈë³É¹¦
    927                      else
    928                        ReturnTorF( 0, 1 ); //´æÈëÊ§°Ü
    929                      
    930                    }
    931                    else
    932                    {
    933                      ReturnTorF( 0, 1 );
    934                    }
    935                     
    936                  }
    937                  else
    938                  {
    939                    ReturnTorF( 0, 1 );
    940                  }
    941                }
    942          #endif
    943                //²éÑ¯»òÉèÖÃPANID£¨PD£©
    944                else if(osal_memcmp(str,"#PD",3))
   \                     ??SampleApp_SerialCMD_5:
   \   000158                ; Setup parameters for call to function osal_memcmp
   \   000158   75....       MOV     ?V0,#`?<Constant "#PD">` & 0xff
   \   00015B   75....       MOV     ?V1,#(`?<Constant "#PD">` >> 8) & 0xff
   \   00015E   78..         MOV     R0,#?V0
   \   000160   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000163   7C03         MOV     R4,#0x3
   \   000165   7D00         MOV     R5,#0x0
   \   000167   8E82         MOV     DPL,R6
   \   000169   8F83         MOV     DPH,R7
   \   00016B   A982         MOV     R1,DPL
   \   00016D   AA83         MOV     R2,DPH
   \   00016F   7B00         MOV     R3,#0x0
   \   000171   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   000174   7403         MOV     A,#0x3
   \   000176   12....       LCALL   ?DEALLOC_XSTACK8
   \   000179   E9           MOV     A,R1
   \   00017A   6046         JZ      ??SampleApp_SerialCMD_6
    945                {
    946                  if(len==5)  //¶ÁÈ¡
   \   00017C   7405         MOV     A,#0x5
   \   00017E   65..         XRL     A,?V3
   \   000180   700D         JNZ     ??SampleApp_SerialCMD_7
    947                  {
    948                    printf("<PD,0x%04X>\r\n", _NIB.nwkPanId);
   \   000182                ; Setup parameters for call to function printf
   \   000182   90....       MOV     DPTR,#_NIB + 33
   \   000185   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000188   7A..         MOV     R2,#`?<Constant "<PD,0x%04X>\\r\\n">` & 0xff
   \   00018A   7B..         MOV     R3,#(`?<Constant "<PD,0x%04X>\\r\\n">` >> 8) & 0xff
   \   00018C   02....       LJMP    ??SampleApp_SerialCMD_8 & 0xFFFF
    949                  }
    950                  else if(len>5)  //ÉèÖÃ
   \                     ??SampleApp_SerialCMD_7:
   \   00018F   E5..         MOV     A,?V3
   \   000191   C3           CLR     C
   \   000192   9406         SUBB    A,#0x6
   \   000194   5003         JNC     $+5
   \   000196   02....       LJMP    ??SampleApp_SerialCMD_0 & 0xFFFF
    951                  {
    952                    uint16 panid=0;
   \   000199   12....       LCALL   ?Subroutine3 & 0xFFFF
    953                    
    954                    sscanf(str+4,"%x",&panid);  //µÃµ½ÐÂµÄPanID
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??CrossCallReturnLabel_0:
   \   00019C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00019F   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_37:
   \   0001A2   12....       LCALL   ??sscanf?relay       ; Banked call to: sscanf
   \   0001A5   7402         MOV     A,#0x2
   \   0001A7   12....       LCALL   ?DEALLOC_XSTACK8
    955                    _NIB.nwkPanId=panid;  //¸üÐÂPanID
   \   0001AA   85..82       MOV     DPL,?XSP + 0
   \   0001AD   85..83       MOV     DPH,?XSP + 1
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F8           MOV     R0,A
   \   0001B2   A3           INC     DPTR
   \   0001B3   E0           MOVX    A,@DPTR
   \   0001B4   F9           MOV     R1,A
   \   0001B5   90....       MOV     DPTR,#_NIB + 33
   \   0001B8   E8           MOV     A,R0
   \   0001B9   F0           MOVX    @DPTR,A
   \   0001BA   A3           INC     DPTR
   \   0001BB   E9           MOV     A,R1
   \   0001BC   F0           MOVX    @DPTR,A
    956                    
    957                    /* 2017.4.10Ìí¼ÓÊ¹ÄÜNV_INITºÍNV_RESTOREÊ±ÉèÖÃchannelºÍpanidÊ±Í¬Ê±Çå³ýµô½Úµã±£´æµÄÐ­µ÷Æ÷ÍøÂçÐÅÏ¢£¬
    958                       ÕâÑù±ã¿ÉÒÔÔÚ¸ü¸Ächannel»òpanidºó¼ÓÈëÓÐÏàÍ¬channelºÍpanidµÄÈÎÒâÐ­µ÷Æ÷µÄÍøÂç¶ø²»»á¸ü»»Ð­µ÷Æ÷ºóÎÞ·¨ÈëÍø£¬
    959                       µ«»¹ÊÇÐèÒªÖØÆô½Úµã²ÅÄÜ¼ÓÈëÐÂÍøÂç£¬¶øÇÒPANID±àÒëÊ±ÐèÒªÉèÎª0xFFFF£¬channelÒªÑ¡ÔòÈ«²¿11-26Í¨µÀ */
    960                    _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   0001BD   90....       MOV     DPTR,#_NIB + 23
   \   0001C0   8066         SJMP    ??SampleApp_SerialCMD_9
    961                    osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
    962                    /* */
    963                    
    964                    NLME_UpdateNV(0x01);  //½« NIB ÐÅÏ¢´æÈë NV ÖÐ£¬ÖØÆôºóÊ¹ÓÃÐÂµÄPanID
    965                    
    966                    ReturnTorF( 1, 1 );
    967                  }
    968                  else
    969                  {
    970                    ReturnTorF( 0, 1 );
    971                  }
    972                }
    973                
    974                //²éÑ¯ÉèÖÃÐÅµÀºÅ£¨CH£©
    975                else if(osal_memcmp(str,"#CH",3))
   \                     ??SampleApp_SerialCMD_6:
   \   0001C2                ; Setup parameters for call to function osal_memcmp
   \   0001C2   75....       MOV     ?V0,#`?<Constant "#CH">` & 0xff
   \   0001C5   75....       MOV     ?V1,#(`?<Constant "#CH">` >> 8) & 0xff
   \   0001C8   78..         MOV     R0,#?V0
   \   0001CA   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0001CD   7C03         MOV     R4,#0x3
   \   0001CF   7D00         MOV     R5,#0x0
   \   0001D1   8E82         MOV     DPL,R6
   \   0001D3   8F83         MOV     DPH,R7
   \   0001D5   A982         MOV     R1,DPL
   \   0001D7   AA83         MOV     R2,DPH
   \   0001D9   7B00         MOV     R3,#0x0
   \   0001DB   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   0001DE   7403         MOV     A,#0x3
   \   0001E0   12....       LCALL   ?DEALLOC_XSTACK8
   \   0001E3   E9           MOV     A,R1
   \   0001E4   605D         JZ      ??SampleApp_SerialCMD_10
    976                {
    977                  if(len==5)  //¶ÁÈ¡
   \   0001E6   7405         MOV     A,#0x5
   \   0001E8   65..         XRL     A,?V3
   \   0001EA   7015         JNZ     ??SampleApp_SerialCMD_11
    978                  {
    979                    printf("<CH,0x%02X>\r\n", _NIB.nwkLogicalChannel);
   \   0001EC                ; Setup parameters for call to function printf
   \   0001EC   90....       MOV     DPTR,#_NIB + 22
   \   0001EF   E0           MOVX    A,@DPTR
   \   0001F0   F5..         MOV     ?V0,A
   \   0001F2   75..00       MOV     ?V1,#0x0
   \   0001F5   78..         MOV     R0,#?V0
   \   0001F7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0001FA   7A..         MOV     R2,#`?<Constant "<CH,0x%02X>\\r\\n">` & 0xff
   \   0001FC   7B..         MOV     R3,#(`?<Constant "<CH,0x%02X>\\r\\n">` >> 8) & 0xff
   \   0001FE   02....       LJMP    ??SampleApp_SerialCMD_8 & 0xFFFF
    980                  }
    981                  else if(len>5)  //ÉèÖÃ
   \                     ??SampleApp_SerialCMD_11:
   \   000201   E5..         MOV     A,?V3
   \   000203   C3           CLR     C
   \   000204   9406         SUBB    A,#0x6
   \   000206   5003         JNC     $+5
   \   000208   02....       LJMP    ??SampleApp_SerialCMD_0 & 0xFFFF
    982                  {
    983                    uint16 channel=0;
   \   00020B   12....       LCALL   ?Subroutine3 & 0xFFFF
    984                    
    985                    sscanf(str+4,"%x",&channel);  //µÃµ½ÐÂµÄchannel
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??CrossCallReturnLabel_1:
   \   00020E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000211   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_38:
   \   000214   12....       LCALL   ??sscanf?relay       ; Banked call to: sscanf
   \   000217   7402         MOV     A,#0x2
   \   000219   12....       LCALL   ?DEALLOC_XSTACK8
    986                    _NIB.nwkLogicalChannel=channel;  //¸üÐÂchannel
   \   00021C   85..82       MOV     DPL,?XSP + 0
   \   00021F   85..83       MOV     DPH,?XSP + 1
   \   000222   E0           MOVX    A,@DPTR
   \   000223   90....       MOV     DPTR,#_NIB + 22
   \   000226   F0           MOVX    @DPTR,A
    987                    
    988                    /* 2017.4.10Ìí¼ÓÊ¹ÄÜNV_INITºÍNV_RESTOREÊ±ÉèÖÃchannelºÍpanidÊ±Í¬Ê±Çå³ýµô½Úµã±£´æµÄÐ­µ÷Æ÷ÍøÂçÐÅÏ¢£¬
    989                       ÕâÑù±ã¿ÉÒÔÔÚ¸ü¸Ächannel»òpanidºó¼ÓÈëÓÐÏàÍ¬channelºÍpanidµÄÈÎÒâÐ­µ÷Æ÷µÄÍøÂç¶ø²»»á¸ü»»Ð­µ÷Æ÷ºóÎÞ·¨ÈëÍø£¬
    990                       µ«»¹ÊÇÐèÒªÖØÆô½Úµã²ÅÄÜ¼ÓÈëÐÂÍøÂç£¬¶øÇÒPANID±àÒëÊ±ÐèÒªÉèÎª0xFFFF£¬channelÒªÑ¡ÔòÈ«²¿11-26Í¨µÀ */
    991                    _NIB.nwkCoordAddress = INVALID_NODE_ADDR;
   \   000227   A3           INC     DPTR
   \                     ??SampleApp_SerialCMD_9:
   \   000228   74FE         MOV     A,#-0x2
   \   00022A   F0           MOVX    @DPTR,A
   \   00022B   A3           INC     DPTR
   \   00022C   04           INC     A
   \   00022D   F0           MOVX    @DPTR,A
    992                    osal_memset( _NIB.nwkCoordExtAddress, 0, Z_EXTADDR_LEN );
   \   00022E                ; Setup parameters for call to function osal_memset
   \   00022E   7C08         MOV     R4,#0x8
   \   000230   7D00         MOV     R5,#0x0
   \   000232   7900         MOV     R1,#0x0
   \   000234   7A..         MOV     R2,#(_NIB + 25) & 0xff
   \   000236   7B..         MOV     R3,#((_NIB + 25) >> 8) & 0xff
   \   000238   12....       LCALL   ??osal_memset?relay  ; Banked call to: osal_memset
    993                    /* */
    994                    
    995                    NLME_UpdateNV(0x01);  //½« NIB ÐÅÏ¢´æÈë NV ÖÐ£¬ÖØÆôºóÓ¦ÓÃ
   \   00023B                ; Setup parameters for call to function NLME_UpdateNV
   \   00023B   7901         MOV     R1,#0x1
   \   00023D   12....       LCALL   ??NLME_UpdateNV?relay; Banked call to: NLME_UpdateNV
    996                    
    997                    ReturnTorF( 1, 1 );
   \   000240                ; Setup parameters for call to function ReturnTorF
   \   000240   02....       LJMP    ??SampleApp_SerialCMD_12 & 0xFFFF
    998                  }
    999                  else
   1000                  {
   1001                    ReturnTorF( 0, 1 );
   1002                  }
   1003                }
   1004                
   1005                //²éÑ¯¶ÌµØÖ·£¨SA£©
   1006                else if(osal_memcmp(str,"#SA",3))
   \                     ??SampleApp_SerialCMD_10:
   \   000243                ; Setup parameters for call to function osal_memcmp
   \   000243   75....       MOV     ?V0,#`?<Constant "#SA">` & 0xff
   \   000246   75....       MOV     ?V1,#(`?<Constant "#SA">` >> 8) & 0xff
   \   000249   78..         MOV     R0,#?V0
   \   00024B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00024E   7C03         MOV     R4,#0x3
   \   000250   7D00         MOV     R5,#0x0
   \   000252   8E82         MOV     DPL,R6
   \   000254   8F83         MOV     DPH,R7
   \   000256   A982         MOV     R1,DPL
   \   000258   AA83         MOV     R2,DPH
   \   00025A   7B00         MOV     R3,#0x0
   \   00025C   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   00025F   7403         MOV     A,#0x3
   \   000261   12....       LCALL   ?DEALLOC_XSTACK8
   \   000264   E9           MOV     A,R1
   \   000265   600D         JZ      ??SampleApp_SerialCMD_13
   1007                {
   1008                  printf("<SA,0x%04X>\r\n", _NIB.nwkDevAddress);
   \   000267                ; Setup parameters for call to function printf
   \   000267   90....       MOV     DPTR,#_NIB + 20
   \   00026A   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   00026D   7A..         MOV     R2,#`?<Constant "<SA,0x%04X>\\r\\n">` & 0xff
   \   00026F   7B..         MOV     R3,#(`?<Constant "<SA,0x%04X>\\r\\n">` >> 8) & 0xff
   \   000271   02....       LJMP    ??SampleApp_SerialCMD_8 & 0xFFFF
   1009                }
   1010                
   1011                /* 2017.4.10Ìí¼ÓÐÞ¸ÄÈëÍøÊ±Ä¬ÈÏµÄchennelºÍpanid£¬²»´ò¿ªNV_INITºÍNV_RESTORE£»
   1012                   ½öÖÕ¶Ë½ÚµãÌí¼Ó£¬Ð­µ÷Æ÷»¹ÊÇÊ¹ÓÃNV_INITºÍNV_RESTORE±£³Ö²»±ä£¬ÒòÎªÐ­µ÷Æ÷ÐèÒª±£´æÍøÂçÐÅÏ¢ÈçÁÚ¾Ó±íµÈ£¬
   1013                   ÕâÑùÖÕ¶Ë½ÚµãÖØÐÂÈëÍøºóµØÖ·µÈÐÅÏ¢²»»á¸Ä±ä */
   1014                /* 16.8.5Ìí¼ÓDCHºÍCPDÃüÁî¶ÁÈ¡ºÍÉèÖÃÄ¬ÈÏÈëÍøÐÅµÀºÍPANID£¬ÕâÑùÔ­À´µÄCHºÍPDÃüÁîÓÃÀ´²é¿´µ±Ç°ÍøÂçµÄÐÅµÀºÍPANID */
   1015                //²éÑ¯»òÉèÖÃÄ¬ÈÏÈëÍøPANID£¨DPD£©
   1016                else if(osal_memcmp(str,"#DPD",3))
   \                     ??SampleApp_SerialCMD_13:
   \   000274                ; Setup parameters for call to function osal_memcmp
   \   000274   75....       MOV     ?V0,#`?<Constant "#DPD">` & 0xff
   \   000277   75....       MOV     ?V1,#(`?<Constant "#DPD">` >> 8) & 0xff
   \   00027A   78..         MOV     R0,#?V0
   \   00027C   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00027F   7C03         MOV     R4,#0x3
   \   000281   7D00         MOV     R5,#0x0
   \   000283   8E82         MOV     DPL,R6
   \   000285   8F83         MOV     DPH,R7
   \   000287   A982         MOV     R1,DPL
   \   000289   AA83         MOV     R2,DPH
   \   00028B   7B00         MOV     R3,#0x0
   \   00028D   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   000290   7403         MOV     A,#0x3
   \   000292   12....       LCALL   ?DEALLOC_XSTACK8
   \   000295   E9           MOV     A,R1
   \   000296   6074         JZ      ??SampleApp_SerialCMD_14
   1017                {
   1018                  if(len==6)  //¶ÁÈ¡
   \   000298   7406         MOV     A,#0x6
   \   00029A   65..         XRL     A,?V3
   \   00029C   700D         JNZ     ??SampleApp_SerialCMD_15
   1019                  {
   1020                    printf("<DPD,0x%04X>\r\n", zgConfigPANID);   /* Ä¬ÈÏPANID */
   \   00029E                ; Setup parameters for call to function printf
   \   00029E   90....       MOV     DPTR,#zgConfigPANID
   \   0002A1   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   0002A4   7A..         MOV     R2,#`?<Constant "<DPD,0x%04X>\\r\\n">` & 0xff
   \   0002A6   7B..         MOV     R3,#(`?<Constant "<DPD,0x%04X>\\r\\n">` >> 8) & 0xff
   \   0002A8   02....       LJMP    ??SampleApp_SerialCMD_8 & 0xFFFF
   1021                  }
   1022                  else if(len>6)  //ÉèÖÃ
   \                     ??SampleApp_SerialCMD_15:
   \   0002AB   E5..         MOV     A,?V3
   \   0002AD   C3           CLR     C
   \   0002AE   9407         SUBB    A,#0x7
   \   0002B0   4053         JC      ??SampleApp_SerialCMD_16
   1023                  {
   1024                    uint16 panid=0;
   \   0002B2   12....       LCALL   ?Subroutine3 & 0xFFFF
   1025                    
   1026                    sscanf(str+5,"%x",&panid);  //µÃµ½ÐÂµÄPanID
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??CrossCallReturnLabel_2:
   \   0002B5   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002B8   7C..         MOV     R4,#`?<Constant "%x">` & 0xff
   \   0002BA   7D..         MOV     R5,#(`?<Constant "%x">` >> 8) & 0xff
   \   0002BC   EE           MOV     A,R6
   \   0002BD   2405         ADD     A,#0x5
   \   0002BF   FA           MOV     R2,A
   \   0002C0   E4           CLR     A
   \   0002C1   3F           ADDC    A,R7
   \   0002C2   FB           MOV     R3,A
   \   0002C3   12....       LCALL   ??sscanf?relay       ; Banked call to: sscanf
   \   0002C6   7402         MOV     A,#0x2
   \   0002C8   12....       LCALL   ?DEALLOC_XSTACK8
   1027                    
   1028                    extern uint8 nvItemInit( uint16 id, uint16 len, void *buf, uint8 set );
   1029                    zgConfigPANID = panid;   /* ÐÞ¸ÄÄ¬ÈÏpanid */
   \   0002CB   85..82       MOV     DPL,?XSP + 0
   \   0002CE   85..83       MOV     DPH,?XSP + 1
   \   0002D1   E0           MOVX    A,@DPTR
   \   0002D2   F8           MOV     R0,A
   \   0002D3   A3           INC     DPTR
   \   0002D4   E0           MOVX    A,@DPTR
   \   0002D5   F9           MOV     R1,A
   \   0002D6   90....       MOV     DPTR,#zgConfigPANID
   \   0002D9   E8           MOV     A,R0
   \   0002DA   F0           MOVX    @DPTR,A
   \   0002DB   A3           INC     DPTR
   \   0002DC   E9           MOV     A,R1
   \   0002DD   F0           MOVX    @DPTR,A
   1030                    //±£´æµ½NV
   1031                    if(nvItemInit(ZCD_NV_PANID,sizeof(zgConfigPANID), &zgConfigPANID,TRUE) != ZSUCCESS)
   \   0002DE                ; Setup parameters for call to function nvItemInit
   \   0002DE   75....       MOV     ?V0,#zgConfigPANID & 0xff
   \   0002E1   75....       MOV     ?V1,#(zgConfigPANID >> 8) & 0xff
   \   0002E4   78..         MOV     R0,#?V0
   \   0002E6   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0002E9   7901         MOV     R1,#0x1
   \   0002EB   7C02         MOV     R4,#0x2
   \   0002ED   7D00         MOV     R5,#0x0
   \   0002EF   7A83         MOV     R2,#-0x7d
   \   0002F1   7B00         MOV     R3,#0x0
   \   0002F3   12....       LCALL   ??nvItemInit?relay   ; Banked call to: nvItemInit
   \   0002F6   7402         MOV     A,#0x2
   \   0002F8   12....       LCALL   ?DEALLOC_XSTACK8
   \   0002FB   E9           MOV     A,R1
   \   0002FC   7007         JNZ     ??SampleApp_SerialCMD_16
   1032                    {
   1033                      printf("<DPD,F>\r\n");
   1034                    }
   1035                    else
   1036                    {
   1037                      printf("<DPD,T>\r\n");
   \   0002FE                ; Setup parameters for call to function printf
   \   0002FE   7A..         MOV     R2,#`?<Constant "<DPD,T>\\r\\n">` & 0xff
   \   000300   7B..         MOV     R3,#(`?<Constant "<DPD,T>\\r\\n">` >> 8) & 0xff
   \   000302   02....       LJMP    ??SampleApp_SerialCMD_17 & 0xFFFF
   1038                    }
   1039                    
   1040                  }
   1041                  else
   1042                  {
   1043                    printf("<DPD,F>\r\n");
   \                     ??SampleApp_SerialCMD_16:
   \   000305                ; Setup parameters for call to function printf
   \   000305   7A..         MOV     R2,#`?<Constant "<DPD,F>\\r\\n">` & 0xff
   \   000307   7B..         MOV     R3,#(`?<Constant "<DPD,F>\\r\\n">` >> 8) & 0xff
   \   000309   02....       LJMP    ??SampleApp_SerialCMD_17 & 0xFFFF
   1044                  }
   1045                }
   1046                
   1047                
   1048                //²éÑ¯ÉèÖÃÄ¬ÈÏÈëÍøÐÅµÀºÅ£¨DCH£©
   1049                else if(osal_memcmp(str,"#DCH",4))
   \                     ??SampleApp_SerialCMD_14:
   \   00030C                ; Setup parameters for call to function osal_memcmp
   \   00030C   75....       MOV     ?V0,#`?<Constant "#DCH">` & 0xff
   \   00030F   75....       MOV     ?V1,#(`?<Constant "#DCH">` >> 8) & 0xff
   \   000312   78..         MOV     R0,#?V0
   \   000314   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   000317   7C04         MOV     R4,#0x4
   \   000319   7D00         MOV     R5,#0x0
   \   00031B   8E82         MOV     DPL,R6
   \   00031D   8F83         MOV     DPH,R7
   \   00031F   A982         MOV     R1,DPL
   \   000321   AA83         MOV     R2,DPH
   \   000323   7B00         MOV     R3,#0x0
   \   000325   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   000328   7403         MOV     A,#0x3
   \   00032A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00032D   E9           MOV     A,R1
   \   00032E   7003         JNZ     $+5
   \   000330   02....       LJMP    ??SampleApp_SerialCMD_18 & 0xFFFF
   1050                {
   1051                  if(len==6)  //¶ÁÈ¡
   \   000333   7406         MOV     A,#0x6
   \   000335   65..         XRL     A,?V3
   \   000337   7051         JNZ     ??SampleApp_SerialCMD_19
   1052                  {
   1053                    if(zgDefaultChannelList == MAX_CHANNELS_24GHZ)  //Í¨µÀÈ«Ñ¡
   \   000339   90....       MOV     DPTR,#__Constant_7fff800
   \   00033C   78..         MOV     R0,#?V0
   \   00033E   12....       LCALL   ?L_MOV_X
   \   000341   90....       MOV     DPTR,#zgDefaultChannelList
   \   000344   78..         MOV     R0,#?V0
   \   000346   12....       LCALL   ?L_EQ_X
   \   000349   7007         JNZ     ??SampleApp_SerialCMD_20
   1054                    {
   1055                      printf("<DCH,ALL>\r\n");
   \   00034B                ; Setup parameters for call to function printf
   \   00034B   7A..         MOV     R2,#`?<Constant "<DCH,ALL>\\r\\n">` & 0xff
   \   00034D   7B..         MOV     R3,#(`?<Constant "<DCH,ALL>\\r\\n">` >> 8) & 0xff
   \   00034F   02....       LJMP    ??SampleApp_SerialCMD_17 & 0xFFFF
   1056                    }
   1057                    else
   1058                    {
   1059                      for(i=11;i<=26;i++)  //¸ù¾Ýchannel listµÃµ½ÐÅµÀ£¬ÐÅµÀÉèÖÃÊ±Ö»Ñ¡Ò»¸ö»òÕßÈ«Ñ¡
   \                     ??SampleApp_SerialCMD_20:
   \   000352   75..0B       MOV     ?V4,#0xb
   1060                      {
   1061                        if(zgDefaultChannelList&((uint32)1<<i)) break;
   \                     ??SampleApp_SerialCMD_21:
   \   000355   90....       MOV     DPTR,#zgDefaultChannelList
   \   000358   78..         MOV     R0,#?V0
   \   00035A   12....       LCALL   ?L_MOV_X
   \   00035D   E5..         MOV     A,?V4
   \   00035F   78..         MOV     R0,#?V0
   \   000361   12....       LCALL   ?UL_SHR
   \   000364   E5..         MOV     A,?V0
   \   000366   A2E0         MOV     C,0xE0 /* A   */.0
   \   000368   4009         JC      ??SampleApp_SerialCMD_22
   1062                      }
   \   00036A   05..         INC     ?V4
   \   00036C   E5..         MOV     A,?V4
   \   00036E   C3           CLR     C
   \   00036F   941B         SUBB    A,#0x1b
   \   000371   40E2         JC      ??SampleApp_SerialCMD_21
   1063                      printf("<DCH,0x%02X>\r\n", i);
   \                     ??SampleApp_SerialCMD_22:
   \   000373                ; Setup parameters for call to function printf
   \   000373   75..00       MOV     ?V5,#0x0
   \   000376   78..         MOV     R0,#?V4
   \   000378   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00037B   7A..         MOV     R2,#`?<Constant "<DCH,0x%02X>\\r\\n">` & 0xff
   \   00037D   7B..         MOV     R3,#(`?<Constant "<DCH,0x%02X>\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_SerialCMD_8:
   \   00037F   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   000382   7402         MOV     A,#0x2
   \   000384   12....       LCALL   ?DEALLOC_XSTACK8
   \   000387   02....       LJMP    ??SampleApp_SerialCMD_2 & 0xFFFF
   1064                    }
   1065                  }
   1066                  else if(len>6)  //ÉèÖÃ
   \                     ??SampleApp_SerialCMD_19:
   \   00038A   E5..         MOV     A,?V3
   \   00038C   C3           CLR     C
   \   00038D   9407         SUBB    A,#0x7
   \   00038F   5003         JNC     $+5
   \   000391   02....       LJMP    ??SampleApp_SerialCMD_23 & 0xFFFF
   1067                  {
   1068                    uint16 channel=0;
   \   000394   85..82       MOV     DPL,?XSP + 0
   \   000397   85..83       MOV     DPH,?XSP + 1
   \   00039A   E4           CLR     A
   \   00039B   F0           MOVX    @DPTR,A
   \   00039C   A3           INC     DPTR
   \   00039D   F0           MOVX    @DPTR,A
   1069                    
   1070                    sscanf(str+5,"%x",&channel);  //µÃµ½ÐÂµÄchannel
                                  ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   00039E   EE           MOV     A,R6
   \   00039F   2405         ADD     A,#0x5
   \   0003A1   F5..         MOV     ?V4,A
   \   0003A3   E4           CLR     A
   \   0003A4   3F           ADDC    A,R7
   \   0003A5   F5..         MOV     ?V5,A
   \   0003A7                ; Setup parameters for call to function sscanf
   \   0003A7   A8..         MOV     R0,?XSP + 0
   \   0003A9   A9..         MOV     R1,?XSP + 1
   \   0003AB   88..         MOV     ?V0,R0
   \   0003AD   89..         MOV     ?V1,R1
   \   0003AF   78..         MOV     R0,#?V0
   \   0003B1   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0003B4   7C..         MOV     R4,#`?<Constant "%x">` & 0xff
   \   0003B6   7D..         MOV     R5,#(`?<Constant "%x">` >> 8) & 0xff
   \   0003B8   AA..         MOV     R2,?V4
   \   0003BA   AB..         MOV     R3,?V5
   \   0003BC   12....       LCALL   ??sscanf?relay       ; Banked call to: sscanf
   \   0003BF   7402         MOV     A,#0x2
   \   0003C1   12....       LCALL   ?DEALLOC_XSTACK8
   1071                    
   1072                    /* 2017.4.10Èç¹ûÐÅµÀÉèÖÃÎª"ALL"»ò"all"Ê±±íÊ¾Í¨µÀÈ«Ñ¡£¬´ËÊ±½«channelÉèÎª0±íÊ¾Í¨µÀÈ«Ñ¡ */
   1073                    if(osal_memcmp(str+5,"ALL",3) || osal_memcmp(str+5,"all",3))  //11-26Í¨µÀÈ«Ñ¡
   \   0003C4                ; Setup parameters for call to function osal_memcmp
   \   0003C4   75....       MOV     ?V0,#`?<Constant "ALL">` & 0xff
   \   0003C7   75....       MOV     ?V1,#(`?<Constant "ALL">` >> 8) & 0xff
   \   0003CA   78..         MOV     R0,#?V0
   \   0003CC   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003CF   7C03         MOV     R4,#0x3
   \   0003D1   7D00         MOV     R5,#0x0
   \   0003D3   85..82       MOV     DPL,?V4
   \   0003D6   85..83       MOV     DPH,?V5
   \   0003D9   A982         MOV     R1,DPL
   \   0003DB   AA83         MOV     R2,DPH
   \   0003DD   7B00         MOV     R3,#0x0
   \   0003DF   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   0003E2   7403         MOV     A,#0x3
   \   0003E4   12....       LCALL   ?DEALLOC_XSTACK8
   \   0003E7   E9           MOV     A,R1
   \   0003E8   7029         JNZ     ??SampleApp_SerialCMD_24
   \   0003EA                ; Setup parameters for call to function osal_memcmp
   \   0003EA   75....       MOV     ?V0,#`?<Constant "all">` & 0xff
   \   0003ED   75....       MOV     ?V1,#(`?<Constant "all">` >> 8) & 0xff
   \   0003F0   78..         MOV     R0,#?V0
   \   0003F2   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0003F5   7C03         MOV     R4,#0x3
   \   0003F7   7D00         MOV     R5,#0x0
   \   0003F9   8E82         MOV     DPL,R6
   \   0003FB   8F83         MOV     DPH,R7
   \   0003FD   A3           INC     DPTR
   \   0003FE   A3           INC     DPTR
   \   0003FF   A3           INC     DPTR
   \   000400   A3           INC     DPTR
   \   000401   A3           INC     DPTR
   \   000402   A982         MOV     R1,DPL
   \   000404   AA83         MOV     R2,DPH
   \   000406   7B00         MOV     R3,#0x0
   \   000408   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   00040B   7403         MOV     A,#0x3
   \   00040D   12....       LCALL   ?DEALLOC_XSTACK8
   \   000410   E9           MOV     A,R1
   \   000411   600C         JZ      ??SampleApp_SerialCMD_25
   1074                    {
   1075                      channel=0;
   \                     ??SampleApp_SerialCMD_24:
   \   000413   85..82       MOV     DPL,?XSP + 0
   \   000416   85..83       MOV     DPH,?XSP + 1
   \   000419   E4           CLR     A
   \   00041A   F0           MOVX    @DPTR,A
   \   00041B   A3           INC     DPTR
   \   00041C   F0           MOVX    @DPTR,A
   \   00041D   802B         SJMP    ??SampleApp_SerialCMD_26
   1076                    }
   1077                    
   1078                    extern uint8 nvItemInit( uint16 id, uint16 len, void *buf, uint8 set );
   1079                    if(((channel<11) || (channel>26)) && (channel!=0))  //ÎÞÐ§ÐÅµÀÇÒ²»Îª0
   \                     ??SampleApp_SerialCMD_25:
   \   00041F   85..82       MOV     DPL,?XSP + 0
   \   000422   85..83       MOV     DPH,?XSP + 1
   \   000425   E0           MOVX    A,@DPTR
   \   000426   24F5         ADD     A,#-0xb
   \   000428   F8           MOV     R0,A
   \   000429   A3           INC     DPTR
   \   00042A   E0           MOVX    A,@DPTR
   \   00042B   34FF         ADDC    A,#-0x1
   \   00042D   F9           MOV     R1,A
   \   00042E   C3           CLR     C
   \   00042F   E8           MOV     A,R0
   \   000430   9410         SUBB    A,#0x10
   \   000432   E9           MOV     A,R1
   \   000433   9400         SUBB    A,#0x0
   \   000435   85..82       MOV     DPL,?XSP + 0
   \   000438   85..83       MOV     DPH,?XSP + 1
   \   00043B   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00043E   4008         JC      ??SampleApp_SerialCMD_27
   \   000440   6008         JZ      ??SampleApp_SerialCMD_26
   1080                    {
   1081                      printf("<CH,F>\r\n");
   \   000442                ; Setup parameters for call to function printf
   \   000442   7A..         MOV     R2,#`?<Constant "<CH,F>\\r\\n">` & 0xff
   \   000444   7B..         MOV     R3,#(`?<Constant "<CH,F>\\r\\n">` >> 8) & 0xff
   \   000446   8076         SJMP    ??SampleApp_SerialCMD_17
   1082                    }
   1083                    else
   1084                    {
   1085                      //¸ù¾ÝchannelµÃµ½channel list£¬×¢ÒâÇ¿ÖÆÀàÐÍ×ª»»
   1086                      if(channel==0)  //Îª0Ê±½«ÐÅµÀÈ«Ñ¡
   \                     ??SampleApp_SerialCMD_27:
   \   000448   7013         JNZ     ??SampleApp_SerialCMD_28
   1087                      {
   1088                        zgDefaultChannelList=MAX_CHANNELS_24GHZ;
   \                     ??SampleApp_SerialCMD_26:
   \   00044A   90....       MOV     DPTR,#zgDefaultChannelList
   \   00044D   E4           CLR     A
   \   00044E   F0           MOVX    @DPTR,A
   \   00044F   A3           INC     DPTR
   \   000450   74F8         MOV     A,#-0x8
   \   000452   F0           MOVX    @DPTR,A
   \   000453   A3           INC     DPTR
   \   000454   74FF         MOV     A,#-0x1
   \   000456   F0           MOVX    @DPTR,A
   \   000457   A3           INC     DPTR
   \   000458   7407         MOV     A,#0x7
   \   00045A   F0           MOVX    @DPTR,A
   \   00045B   801D         SJMP    ??SampleApp_SerialCMD_29
   1089                      }
   1090                      else
   1091                      {
   1092                        zgDefaultChannelList=(uint32)((uint32)1<<channel);
   \                     ??SampleApp_SerialCMD_28:
   \   00045D   75..01       MOV     ?V0,#0x1
   \   000460   75..00       MOV     ?V1,#0x0
   \   000463   75..00       MOV     ?V3,#0x0
   \   000466   85..82       MOV     DPL,?XSP + 0
   \   000469   85..83       MOV     DPH,?XSP + 1
   \   00046C   E0           MOVX    A,@DPTR
   \   00046D   78..         MOV     R0,#?V0
   \   00046F   12....       LCALL   ?L_SHL
   \   000472   90....       MOV     DPTR,#zgDefaultChannelList
   \   000475   78..         MOV     R0,#?V0
   \   000477   12....       LCALL   ?L_MOV_TO_X
   1093                      }
   1094                      printf("<CH,0x%02X,0x%08lX>\r\n", channel, zgDefaultChannelList);
   \                     ??SampleApp_SerialCMD_29:
   \   00047A                ; Setup parameters for call to function printf
   \   00047A   90....       MOV     DPTR,#zgDefaultChannelList
   \   00047D   12....       LCALL   ?PUSH_XSTACK8_X_FOUR
   \   000480   7404         MOV     A,#0x4
   \   000482   12....       LCALL   ?XSTACK_DISP0_8
   \   000485   12....       LCALL   ?PUSH_XSTACK8_X_TWO
   \   000488   7A..         MOV     R2,#`?<Constant "<CH,0x%02X,0x%08lX>\\r\\n">` & 0xff
   \   00048A   7B..         MOV     R3,#(`?<Constant "<CH,0x%02X,0x%08lX>\\r\\n">` >> 8) & 0xff
   \   00048C   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   00048F   7406         MOV     A,#0x6
   \   000491   12....       LCALL   ?DEALLOC_XSTACK8
   1095                      //±£´æµ½NV
   1096                      if(nvItemInit(ZCD_NV_CHANLIST,sizeof(zgDefaultChannelList), &zgDefaultChannelList,TRUE) != ZSUCCESS)
   \   000494                ; Setup parameters for call to function nvItemInit
   \   000494   75....       MOV     ?V0,#zgDefaultChannelList & 0xff
   \   000497   75....       MOV     ?V1,#(zgDefaultChannelList >> 8) & 0xff
   \   00049A   78..         MOV     R0,#?V0
   \   00049C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00049F   7901         MOV     R1,#0x1
   \   0004A1   7C04         MOV     R4,#0x4
   \   0004A3   7D00         MOV     R5,#0x0
   \   0004A5   7A84         MOV     R2,#-0x7c
   \   0004A7   7B00         MOV     R3,#0x0
   \   0004A9   12....       LCALL   ??nvItemInit?relay   ; Banked call to: nvItemInit
   \   0004AC   7402         MOV     A,#0x2
   \   0004AE   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004B1   E9           MOV     A,R1
   \   0004B2   7006         JNZ     ??SampleApp_SerialCMD_23
   1097                      {
   1098                        printf("<DCH,F>\r\n");
   1099                      }
   1100                      else
   1101                      {
   1102                        printf("<DCH,T>\r\n");
   \   0004B4                ; Setup parameters for call to function printf
   \   0004B4   7A..         MOV     R2,#`?<Constant "<DCH,T>\\r\\n">` & 0xff
   \   0004B6   7B..         MOV     R3,#(`?<Constant "<DCH,T>\\r\\n">` >> 8) & 0xff
   \   0004B8   8004         SJMP    ??SampleApp_SerialCMD_17
   1103                      }
   1104                    }
   1105                  }
   1106                  else
   1107                  {
   1108                    printf("<DCH,F>\r\n");
   \                     ??SampleApp_SerialCMD_23:
   \   0004BA                ; Setup parameters for call to function printf
   \   0004BA   7A..         MOV     R2,#`?<Constant "<DCH,F>\\r\\n">` & 0xff
   \   0004BC   7B..         MOV     R3,#(`?<Constant "<DCH,F>\\r\\n">` >> 8) & 0xff
   \                     ??SampleApp_SerialCMD_17:
   \   0004BE   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   0004C1   8057         SJMP    ??SampleApp_SerialCMD_2
   1109                  }
   1110                }
   1111                
   1112                //µ÷ÊÔÐÅÏ¢¿ª¹Ø£¨DG£©
   1113                else if(osal_memcmp(str,"#DG",3)) 
   \                     ??SampleApp_SerialCMD_18:
   \   0004C3                ; Setup parameters for call to function osal_memcmp
   \   0004C3   75....       MOV     ?V0,#`?<Constant "#DG">` & 0xff
   \   0004C6   75....       MOV     ?V1,#(`?<Constant "#DG">` >> 8) & 0xff
   \   0004C9   78..         MOV     R0,#?V0
   \   0004CB   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0004CE   7C03         MOV     R4,#0x3
   \   0004D0   7D00         MOV     R5,#0x0
   \   0004D2   8E82         MOV     DPL,R6
   \   0004D4   8F83         MOV     DPH,R7
   \   0004D6   A982         MOV     R1,DPL
   \   0004D8   AA83         MOV     R2,DPH
   \   0004DA   7B00         MOV     R3,#0x0
   \   0004DC   12....       LCALL   ??osal_memcmp?relay  ; Banked call to: osal_memcmp
   \   0004DF   7403         MOV     A,#0x3
   \   0004E1   12....       LCALL   ?DEALLOC_XSTACK8
   \   0004E4   E9           MOV     A,R1
   \   0004E5   6028         JZ      ??SampleApp_SerialCMD_0
   1114                {
   1115                  int temp;
   1116                  
   1117                  temp = atoi(str+4);
                                     ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \   0004E7                ; Setup parameters for call to function atoi
   \   0004E7   12....       LCALL   ??Subroutine10_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_36:
   \   0004EA   12....       LCALL   ??atoi?relay         ; Banked call to: atoi
   \   0004ED   8A..         MOV     ?V0,R2
   \   0004EF   8B..         MOV     ?V1,R3
   \   0004F1   A8..         MOV     R0,?V0
   \   0004F3   A9..         MOV     R1,?V1
   1118                  if(temp==0||temp==1)
   \   0004F5   E8           MOV     A,R0
   \   0004F6   49           ORL     A,R1
   \   0004F7   6006         JZ      ??SampleApp_SerialCMD_30
   \   0004F9   7401         MOV     A,#0x1
   \   0004FB   68           XRL     A,R0
   \   0004FC   49           ORL     A,R1
   \   0004FD   7010         JNZ     ??SampleApp_SerialCMD_0
   1119                  {
   1120                    debug = temp;
   \                     ??SampleApp_SerialCMD_30:
   \   0004FF   90....       MOV     DPTR,#debug
   \   000502   E8           MOV     A,R0
   \   000503   F0           MOVX    @DPTR,A
   \   000504   A3           INC     DPTR
   \   000505   E9           MOV     A,R1
   \   000506   F0           MOVX    @DPTR,A
   1121                    ReturnTorF( 1, 1 ); //ÕýÈ·
   \   000507                ; Setup parameters for call to function ReturnTorF
   \                     ??SampleApp_SerialCMD_12:
   \   000507   7C01         MOV     R4,#0x1
   \   000509   7D00         MOV     R5,#0x0
   \   00050B   7A01         MOV     R2,#0x1
   \   00050D   8006         SJMP    ??SampleApp_SerialCMD_31
   1122                  }
   1123                  else
   1124                  {
   1125                    ReturnTorF( 0, 1 ); //´íÎó
   1126                  }
   1127                  
   1128                }
   1129                else
   1130                {
   1131                  ReturnTorF( 0, 1 ); //´íÎó
   1132                }
   1133             }
   1134             else
   1135             {
   1136                ReturnTorF( 0, 1 ); //´íÎó
   \                     ??SampleApp_SerialCMD_0:
   \   00050F                ; Setup parameters for call to function ReturnTorF
   \   00050F   7C01         MOV     R4,#0x1
   \   000511   7D00         MOV     R5,#0x0
   \   000513   7A00         MOV     R2,#0x0
   \                     ??SampleApp_SerialCMD_31:
   \   000515   7B00         MOV     R3,#0x0
   \   000517   12....       LCALL   ??ReturnTorF?relay   ; Banked call to: ReturnTorF
   1137             }
   1138             
   1139          }
   \                     ??SampleApp_SerialCMD_2:
   \   00051A   7402         MOV     A,#0x2
   \   00051C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00051F   7F06         MOV     R7,#0x6
   \   000521   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   7C..         MOV     R4,#`?<Constant "%x">` & 0xff
   \   000002   7D..         MOV     R5,#(`?<Constant "%x">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine10_0
   \   000004                ; // Fall through to label ??Subroutine10_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine10_0:
   \   000000   EE           MOV     A,R6
   \   000001   2404         ADD     A,#0x4
   \   000003   FA           MOV     R2,A
   \   000004   E4           CLR     A
   \   000005   3F           ADDC    A,R7
   \   000006   FB           MOV     R3,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   85..82       MOV     DPL,?XSP + 0
   \   000003   85..83       MOV     DPH,?XSP + 1
   \   000006   E4           CLR     A
   \   000007   F0           MOVX    @DPTR,A
   \   000008   A3           INC     DPTR
   \   000009   F0           MOVX    @DPTR,A
   \   00000A                ; Setup parameters for call to function sscanf
   \   00000A                ; Setup parameters for call to function sscanf
   \   00000A                ; Setup parameters for call to function sscanf
   \   00000A   A8..         MOV     R0,?XSP + 0
   \   00000C   A9..         MOV     R1,?XSP + 1
   \   00000E   88..         MOV     ?V0,R0
   \   000010   89..         MOV     ?V1,R1
   \   000012   78..         MOV     R0,#?V0
   \   000014   22           RET
   1140          
   1141          /*********************************************************************
   1142           * @fn      sendData
   1143           *
   1144           * @brief   ´®¿ÚÏò²É¼¯Æ÷·¢ËÍÊý¾Ý
   1145           *
   1146           * @param   none
   1147           *
   1148           * @return  none
   1149           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1150          void SendDataToCollector(char *ptr, int len)
   \                     SendDataToCollector:
   1151          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1152              HalUARTWrite(0,ptr,len);
                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
   \   000004                ; Setup parameters for call to function HalUARTWrite
   \   000004   7900         MOV     R1,#0x0
   \   000006   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
   1153          }
   \   000009                REQUIRE ?Subroutine2
   \   000009                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
   1154          
   1155          /*********************************************************************
   1156           * @fn      Order_Parse
   1157           *
   1158           * @brief   Ð­µ÷Æ÷»ò´®¿ÚÖ¸Áî½âÎö,flag£º1 Ö¸Ê¾ÖÕ¶ËÉè±¸£¬0 Ö¸Ê¾Ð­µ÷Æ÷Éè±¸
   1159           *
   1160           * @param   none
   1161           *
   1162           * @return  none
   1163           */
   1164          //void Order_Parse(char *str, int len, int flag)
   1165          //{
   1166          //   uint8 i;
   1167          //   int numbers;
   1168          //     /* ÉÏÎ»»úÖ¸Áî½âÎö */
   1169          //   if(*(str+len-1)== '\n')
   1170          //   {
   1171          //#if defined (ZDO_COORDINATOR) || defined (RTR_NWK) //Ð­µ÷Æ÷
   1172          //      if(osal_memcmp(str,"#DM",3)) //Ö÷²É¶ÁÈ¡Êý¾Ý
   1173          //      {
   1174          //        /* Ö÷²É¶ÁÈ¡Êý¾Ý */
   1175          //        numbers = sprintf(data_coor, "BG,ID001,%04d,%03d,%04d,ID002,%04d,%03d,%04d,ID003,%04d,%03d,%04d,ED\r\n",coordi[0].temperature,
   1176          //                          coordi[0].humidity,coordi[0].photosyn,coordi[1].temperature,coordi[1].humidity,coordi[1].photosyn,
   1177          //                          coordi[2].temperature,coordi[2].humidity,coordi[2].photosyn); //Êý¾ÝÌî³ä
   1178          //        
   1179          //        SendDataToCollector(data_coor, COOR_DATA_LEN); //Êý¾Ý·¢ÍùÖ÷²É¼¯Æ÷
   1180          //        
   1181          //        osal_memset(coordi, 0, sizeof(dataType_t)*3); //·¢ËÍºóÊý¾ÝÇåÁã
   1182          //      }
   1183          //      else if(osal_memcmp(str,"#RS",3))
   1184          //      {
   1185          //        /* ¸´Î» */
   1186          //        ReturnTorF(1, 1); //ÕýÈ·
   1187          //        SampleApp_SendPeriodicMessage(str, len); //×ª·¢¸´Î»Ö¸Áî¸øÖÕ¶Ë´«¸ÐÆ÷
   1188          //        
   1189          //        rs_flag = 1;//ÖÃÎ»Í£Ö¹Î¹¹·±êÖ¾
   1190          //        
   1191          //      }
   1192          //      else if(osal_memcmp(str,"#GH",3)) //Ð­µ÷Æ÷Ê¹ÓÃGHÖ¸Áî¸ø´«¸ÐÆ÷ÉèÖÃ¹âºÏ±íÏµÊý
   1193          //      {
   1194          //        SampleApp_SendPeriodicMessage(str, len);
   1195          //      }
   1196          //#else //ÖÕ¶Ë½Úµã
   1197          //      if(osal_memcmp(str,"#ID",3))
   1198          //      {
   1199          //        if(len == 5) //¶ÁÈ¡Éè±¸ID
   1200          //        {          
   1201          //          printf("<ID,%03u>\r\n", sensor_id);
   1202          //        }
   1203          //        else //ÉèÖÃÉè±¸ID
   1204          //        {
   1205          //          int temp_id;
   1206          //          
   1207          //          sscanf(str+4, "%d", &temp_id);                           
   1208          //          if(temp_id>=1 && temp_id<=3)
   1209          //          {
   1210          //            sensor_id = temp_id;
   1211          //            
   1212          //            /* Éè±¸ID´æÈëflash */
   1213          //            sprintf(dev_id, "%03u", sensor_id);
   1214          //            
   1215          //            if(SUCCESS == osal_nv_write(DEVICE_ID, 0, DEVICE_ID_LEN, dev_id))
   1216          //              HalUARTWrite(0,"T\n",2 ); //´æÈë³É¹¦
   1217          //            else
   1218          //              HalUARTWrite(0,"F\n",2 ); //´æÈëÊ§°Ü
   1219          //          }
   1220          //          else
   1221          //          {
   1222          //            HalUARTWrite(0,"F\n",2 ); //´íÎó
   1223          //          }
   1224          //        }
   1225          //      }
   1226          //      else if(osal_memcmp(str,"#GH",3))
   1227          //      {
   1228          //        if(len == 5) //¶ÁÈ¡¹âºÏ±íÏµÊý
   1229          //        {
   1230          //          printf("<GH,%05.2f>\r\n", gh_factor);
   1231          //        }
   1232          //        else //ÉèÖÃ¹âºÏ±íÏµÊý
   1233          //        {
   1234          //          float temp_gh;
   1235          //          
   1236          //          sscanf(str+4, "%f", &temp_gh);
   1237          //          if(temp_gh>=1.0)
   1238          //          {
   1239          //            gh_factor = temp_gh;
   1240          //            
   1241          //            /* ¹âºÏ±íÏµÊý´æÈëflash */
   1242          //            sprintf(dev_gh, "%5.2f", gh_factor);
   1243          //            
   1244          //            if(SUCCESS == osal_nv_write(DEVICE_GH, 0, DEVICE_GH_LEN, dev_gh))
   1245          //              HalUARTWrite(0,"T\n",2 ); //´æÈë³É¹¦
   1246          //            else
   1247          //              HalUARTWrite(0,"F\n",2 ); //´æÈëÊ§°Ü
   1248          //          }
   1249          //          else
   1250          //          {
   1251          //            HalUARTWrite(0,"F\n",2 ); //´íÎó
   1252          //          }
   1253          //        }
   1254          //      }
   1255          //      else if(osal_memcmp(str,"#RS",3))//¸´Î»
   1256          //      {
   1257          //        /* ¸´Î» */     
   1258          //        rs_flag = 1;//ÖÃÎ»Í£Ö¹Î¹¹·±êÖ¾     
   1259          //      }
   1260          //#endif
   1261          //      else if(osal_memcmp(str,"#DG",3)) //µ÷ÊÔÐÅÏ¢¿ª¹Ø
   1262          //      {
   1263          //        int temp;
   1264          //        
   1265          //        temp = atoi(str+4);
   1266          //        if(temp==0||temp==1)
   1267          //        {
   1268          //          debug = temp;
   1269          //          HalUARTWrite(0,"T\n",2 ); //ÕýÈ·
   1270          //        }
   1271          //        else
   1272          //        {
   1273          //          HalUARTWrite(0,"F\n",2 ); //´íÎó
   1274          //        }
   1275          //        
   1276          //      }
   1277          //      else
   1278          //      {
   1279          //        HalUARTWrite(0,"F\n",2 ); //´íÎó
   1280          //      }
   1281          //   }
   1282          //   else
   1283          //   {
   1284          //      HalUARTWrite(0,"F\n",2 ); //´íÎó
   1285          //   }
   1286          //}
   1287          
   1288          /*********************************************************************
   1289           * @fn      ReturnTorF
   1290           *
   1291           * @brief   Ö¸Áî·µ»Ø'T'»ò'F'£¬²ÎÊýa:1 »Ø¸´'T',0 »Ø¸´'F'£»²ÎÊýb:1 ·¢Íù´®¿Ú£¬0 ·¢ÍùÐ­µ÷Æ÷
   1292           *
   1293           * @param   none
   1294           *
   1295           * @return  none
   1296           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   1297          void ReturnTorF(int a, int b)
   \                     ReturnTorF:
   1298          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
   1299            if(a)
   \   000004   EA           MOV     A,R2
   \   000005   4B           ORL     A,R3
   \   000006   6014         JZ      ??ReturnTorF_0
   1300            {
   1301              if(b)
   \   000008   EC           MOV     A,R4
   \   000009   4D           ORL     A,R5
   \   00000A   6006         JZ      ??ReturnTorF_1
   1302              {
   1303                printf("T\r\n");
   \   00000C                ; Setup parameters for call to function printf
   \   00000C   7A..         MOV     R2,#`?<Constant "T\\r\\n">` & 0xff
   \   00000E   7B..         MOV     R3,#(`?<Constant "T\\r\\n">` >> 8) & 0xff
   \   000010   8012         SJMP    ??ReturnTorF_2
   1304              }
   1305              else
   1306              {
   1307                SampleApp_SendPointToPointMessage("T\r\n", sizeof("T\r\n"));
   \                     ??ReturnTorF_1:
   \   000012                ; Setup parameters for call to function SampleApp_SendPointToPointMessage
   \   000012   7C04         MOV     R4,#0x4
   \   000014   7D00         MOV     R5,#0x0
   \   000016   7A..         MOV     R2,#`?<Constant "T\\r\\n">` & 0xff
   \   000018   7B..         MOV     R3,#(`?<Constant "T\\r\\n">` >> 8) & 0xff
   \   00001A   8015         SJMP    ??ReturnTorF_3
   1308              }
   1309            }
   1310            else
   1311            {
   1312              if(b)
   \                     ??ReturnTorF_0:
   \   00001C   EC           MOV     A,R4
   \   00001D   4D           ORL     A,R5
   \   00001E   6009         JZ      ??ReturnTorF_4
   1313              {
   1314                printf("F\r\n");
   \   000020                ; Setup parameters for call to function printf
   \   000020   7A..         MOV     R2,#`?<Constant "F\\r\\n">` & 0xff
   \   000022   7B..         MOV     R3,#(`?<Constant "F\\r\\n">` >> 8) & 0xff
   \                     ??ReturnTorF_2:
   \   000024   12....       LCALL   ??printf?relay       ; Banked call to: printf
   \   000027   800B         SJMP    ??ReturnTorF_5
   1315              }
   1316              else
   1317              {
   1318                SampleApp_SendPointToPointMessage("F\r\n", sizeof("F\r\n"));
   \                     ??ReturnTorF_4:
   \   000029                ; Setup parameters for call to function SampleApp_SendPointToPointMessage
   \   000029   7C04         MOV     R4,#0x4
   \   00002B   7D00         MOV     R5,#0x0
   \   00002D   7A..         MOV     R2,#`?<Constant "F\\r\\n">` & 0xff
   \   00002F   7B..         MOV     R3,#(`?<Constant "F\\r\\n">` >> 8) & 0xff
   \                     ??ReturnTorF_3:
   \   000031   12....       LCALL   ??SampleApp_SendPointToPointMessage?relay; Banked call to: SampleApp_SendPointToPointMessage
   1319              }
   1320              
   1321            }
   1322            
   1323          }
   \                     ??ReturnTorF_5:
   \   000034   80..         SJMP    ?Subroutine2

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for data_coor>`:
   \   000000   42472C49     DB 42H, 47H, 2CH, 49H, 44H, 30H, 30H, 31H
   \            44303031
   \   000008   2C2D3630     DB 2CH, 2DH, 36H, 30H, 30H, 2CH, 30H, 39H
   \            302C3039
   \   000010   392C3132     DB 39H, 2CH, 31H, 32H, 33H, 34H, 2CH, 49H
   \            33342C49
   \   000018   44303032     DB 44H, 30H, 30H, 32H, 2CH, 2DH, 36H, 30H
   \            2C2D3630
   \   000020   302C3039     DB 30H, 2CH, 30H, 39H, 39H, 2CH, 31H, 32H
   \            392C3132
   \   000028   33342C49     DB 33H, 34H, 2CH, 49H, 44H, 30H, 30H, 33H
   \            44303033
   \   000030   2C2D3630     DB 2CH, 2DH, 36H, 30H, 30H, 2CH, 30H, 39H
   \            302C3039
   \   000038   392C3132     DB 39H, 2CH, 31H, 32H, 33H, 34H, 2CH, 45H
   \            33342C45
   \   000040   440D0A00     DB 44H, 0DH, 0AH, 0
   \   000044   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00004C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000054   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00005C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000064   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00006C   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   000074   00000000     DB 0, 0, 0, 0, 0, 0, 0, 0
   \            00000000
   \   00007C   00000000     DB 0, 0, 0, 0

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPointToPointMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPointToPointMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SerialCMD?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SerialCMD

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SendDataToCollector?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SendDataToCollector

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ReturnTorF?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ReturnTorF

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "System init!\\n">`:
   \   000000   53797374     DB "System init!\012"
   \            656D2069
   \            6E697421
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NET SUCCESS!\\r\\n">`:
   \   000000   4E455420     DB "NET SUCCESS!\015\012"
   \            53554343
   \            45535321
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Router:0x%04X\\r\\nParent...">`:
   \   000000   526F7574     DB 52H, 6FH, 75H, 74H, 65H, 72H, 3AH, 30H
   \            65723A30
   \   000008   78253034     DB 78H, 25H, 30H, 34H, 58H, 0DH, 0AH, 50H
   \            580D0A50
   \   000010   6172656E     DB 61H, 72H, 65H, 6EH, 74H, 3AH, 30H, 78H
   \            743A3078
   \   000018   25303458     DB 25H, 30H, 34H, 58H, 0DH, 0AH, 43H, 68H
   \            0D0A4368
   \   000020   616E6E65     DB 61H, 6EH, 6EH, 65H, 6CH, 3AH, 25H, 64H
   \            6C3A2564
   \   000028   0D0A5061     DB 0DH, 0AH, 50H, 61H, 6EH, 49H, 44H, 3AH
   \            6E49443A
   \   000030   30782530     DB 30H, 78H, 25H, 30H, 34H, 58H, 0DH, 0AH
   \            34580D0A
   \   000038   00           DB 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IEEE:%02X%02X%02X%02X...">`:
   \   000000   49454545     DB "IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\015\012"
   \            3A253032
   \            58253032
   \            58253032
   \            58253032
   \            58253032
   \            58253032
   \            58253032
   \            58253032
   \            580D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Parent IEEE:%02X%02X%...">`:
   \   000000   50617265     DB "Parent IEEE:%02X%02X%02X%02X%02X%02X%02X%02X\015\012"
   \            6E742049
   \            4545453A
   \            25303258
   \            25303258
   \            25303258
   \            25303258
   \            25303258
   \            25303258
   \            25303258
   \            25303258
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "EndDevice:0x%04X\\r\\nPar...">`:
   \   000000   456E6444     DB 45H, 6EH, 64H, 44H, 65H, 76H, 69H, 63H
   \            65766963
   \   000008   653A3078     DB 65H, 3AH, 30H, 78H, 25H, 30H, 34H, 58H
   \            25303458
   \   000010   0D0A5061     DB 0DH, 0AH, 50H, 61H, 72H, 65H, 6EH, 74H
   \            72656E74
   \   000018   3A307825     DB 3AH, 30H, 78H, 25H, 30H, 34H, 58H, 0DH
   \            3034580D
   \   000020   0A436861     DB 0AH, 43H, 68H, 61H, 6EH, 6EH, 65H, 6CH
   \            6E6E656C
   \   000028   3A25640D     DB 3AH, 25H, 64H, 0DH, 0AH, 50H, 61H, 6EH
   \            0A50616E
   \   000030   49443A30     DB 49H, 44H, 3AH, 30H, 78H, 25H, 30H, 34H
   \            78253034
   \   000038   580D0A00     DB 58H, 0DH, 0AH, 0

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Coordinator:0x%04X\\r\\nC...">`:
   \   000000   436F6F72     DB "Coordinator:0x%04X\015\012Channel:%d\015\012PanID:0x%04X\015\012"
   \            64696E61
   \            746F723A
   \            30782530
   \            34580D0A
   \            4368616E
   \            6E656C3A
   \            25640D0A
   \            50616E49
   \            443A3078
   \            25303458
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "NO NET\\r\\n">`:
   \   000000   4E4F204E     DB "NO NET\015\012"
   \            45540D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#DM">`:
   \   000000   23444D00     DB "#DM"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "BG,ID001,%04d,%03d,%0...">`:
   \   000000   42472C49     DB 42H, 47H, 2CH, 49H, 44H, 30H, 30H, 31H
   \            44303031
   \   000008   2C253034     DB 2CH, 25H, 30H, 34H, 64H, 2CH, 25H, 30H
   \            642C2530
   \   000010   33642C25     DB 33H, 64H, 2CH, 25H, 30H, 34H, 64H, 2CH
   \            3034642C
   \   000018   49443030     DB 49H, 44H, 30H, 30H, 32H, 2CH, 25H, 30H
   \            322C2530
   \   000020   34642C25     DB 34H, 64H, 2CH, 25H, 30H, 33H, 64H, 2CH
   \            3033642C
   \   000028   25303464     DB 25H, 30H, 34H, 64H, 2CH, 49H, 44H, 30H
   \            2C494430
   \   000030   30332C25     DB 30H, 33H, 2CH, 25H, 30H, 34H, 64H, 2CH
   \            3034642C
   \   000038   25303364     DB 25H, 30H, 33H, 64H, 2CH, 25H, 30H, 34H
   \            2C253034
   \   000040   642C4544     DB 64H, 2CH, 45H, 44H, 0DH, 0AH, 0
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#RS">`:
   \   000000   23525300     DB "#RS"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "clear\\r\\n">`:
   \   000000   636C6561     DB "clear\015\012"
   \            720D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#GH">`:
   \   000000   23474800     DB "#GH"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#PD">`:
   \   000000   23504400     DB "#PD"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<PD,0x%04X>\\r\\n">`:
   \   000000   3C50442C     DB "<PD,0x%04X>\015\012"
   \            30782530
   \            34583E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "%x">`:
   \   000000   257800       DB "%x"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#CH">`:
   \   000000   23434800     DB "#CH"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<CH,0x%02X>\\r\\n">`:
   \   000000   3C43482C     DB "<CH,0x%02X>\015\012"
   \            30782530
   \            32583E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#SA">`:
   \   000000   23534100     DB "#SA"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<SA,0x%04X>\\r\\n">`:
   \   000000   3C53412C     DB "<SA,0x%04X>\015\012"
   \            30782530
   \            34583E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#DPD">`:
   \   000000   23445044     DB "#DPD"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DPD,0x%04X>\\r\\n">`:
   \   000000   3C445044     DB "<DPD,0x%04X>\015\012"
   \            2C307825
   \            3034583E
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DPD,F>\\r\\n">`:
   \   000000   3C445044     DB "<DPD,F>\015\012"
   \            2C463E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DPD,T>\\r\\n">`:
   \   000000   3C445044     DB "<DPD,T>\015\012"
   \            2C543E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#DCH">`:
   \   000000   23444348     DB "#DCH"
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DCH,ALL>\\r\\n">`:
   \   000000   3C444348     DB "<DCH,ALL>\015\012"
   \            2C414C4C
   \            3E0D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DCH,0x%02X>\\r\\n">`:
   \   000000   3C444348     DB "<DCH,0x%02X>\015\012"
   \            2C307825
   \            3032583E
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ALL">`:
   \   000000   414C4C00     DB "ALL"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "all">`:
   \   000000   616C6C00     DB "all"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<CH,F>\\r\\n">`:
   \   000000   3C43482C     DB "<CH,F>\015\012"
   \            463E0D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<CH,0x%02X,0x%08lX>\\r\\n">`:
   \   000000   3C43482C     DB "<CH,0x%02X,0x%08lX>\015\012"
   \            30782530
   \            32582C30
   \            78253038
   \            6C583E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DCH,F>\\r\\n">`:
   \   000000   3C444348     DB "<DCH,F>\015\012"
   \            2C463E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "<DCH,T>\\r\\n">`:
   \   000000   3C444348     DB "<DCH,T>\015\012"
   \            2C543E0D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "#DG">`:
   \   000000   23444700     DB "#DG"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "T\\r\\n">`:
   \   000000   540D0A00     DB "T\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "F\\r\\n">`:
   \   000000   460D0A00     DB "F\015\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_7fff800:
   \   000000   00F8FF07     DD 134215680
   1324          
   1325          /*********************************************************************
   1326          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     16   ReturnTorF
        2      0   -> SampleApp_SendPointToPointMessage
        2      0   -> printf
      0     14   SampleApp_Init
        0     11   -> ADC_Init
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> WDT_Init
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
        0     11   -> osal_memset
        0     11   -> osal_start_reload_timer
        0     11   -> printf
      0     24   SampleApp_MessageMSGCB
        0     12   -> HalUARTWrite
        0     12   -> atoi
      0     28   SampleApp_ProcessEvent
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SerialCMD
        0     12   -> WDT_Feed
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> printf
        0     18   -> printf
        0     20   -> printf
        0     28   -> printf
      0     35   SampleApp_SendPeriodicMessage
        0     19   -> AF_DataRequest
      0     19   SampleApp_SendPointToPointMessage
        0     19   -> AF_DataRequest
      0     46   SampleApp_SerialCMD
        0     16   -> NLME_UpdateNV
        0     16   -> ReturnTorF
        0     16   -> SampleApp_SendPeriodicMessage
        0     16   -> SendDataToCollector
        0     16   -> atoi
        0     18   -> nvItemInit
        0     19   -> osal_memcmp
        0     16   -> osal_memset
        0     16   -> printf
        0     18   -> printf
        0     22   -> printf
        0     34   -> sprintf
        0     18   -> sscanf
        0     16   -> zgWriteStartupOptions
      2     16   SendDataToCollector
        2      0   -> HalUARTWrite


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "#CH">
       5  ?<Constant "#DCH">
       4  ?<Constant "#DG">
       4  ?<Constant "#DM">
       5  ?<Constant "#DPD">
       4  ?<Constant "#GH">
       4  ?<Constant "#PD">
       4  ?<Constant "#RS">
       4  ?<Constant "#SA">
       3  ?<Constant "%x">
      22  ?<Constant "<CH,0x%02X,0x%08lX>\r\n">
      14  ?<Constant "<CH,0x%02X>\r\n">
       9  ?<Constant "<CH,F>\r\n">
      15  ?<Constant "<DCH,0x%02X>\r\n">
      12  ?<Constant "<DCH,ALL>\r\n">
      10  ?<Constant "<DCH,F>\r\n">
      10  ?<Constant "<DCH,T>\r\n">
      15  ?<Constant "<DPD,0x%04X>\r\n">
      10  ?<Constant "<DPD,F>\r\n">
      10  ?<Constant "<DPD,T>\r\n">
      14  ?<Constant "<PD,0x%04X>\r\n">
      14  ?<Constant "<SA,0x%04X>\r\n">
       4  ?<Constant "ALL">
      71  ?<Constant "BG,ID001,%04d,%03d,%0...">
      47  ?<Constant "Coordinator:0x%04X\r\nC...">
      60  ?<Constant "EndDevice:0x%04X\r\nPar...">
       4  ?<Constant "F\r\n">
       8  ?<Constant "Group 1">
      40  ?<Constant "IEEE:%02X%02X%02X%02X...">
      15  ?<Constant "NET SUCCESS!\r\n">
       9  ?<Constant "NO NET\r\n">
      47  ?<Constant "Parent IEEE:%02X%02X%...">
      57  ?<Constant "Router:0x%04X\r\nParent...">
      14  ?<Constant "System init!\n">
       4  ?<Constant "T\r\n">
       4  ?<Constant "all">
       8  ?<Constant "clear\r\n">
     128  ?<Initializer for data_coor>
       6  ??ReturnTorF?relay
       6  ??SampleApp_Init?relay
       6  ??SampleApp_MessageMSGCB?relay
       6  ??SampleApp_ProcessEvent?relay
       6  ??SampleApp_SendPeriodicMessage?relay
       6  ??SampleApp_SendPointToPointMessage?relay
       6  ??SampleApp_SerialCMD?relay
       6  ??SendDataToCollector?relay
       8  ??Subroutine10_0
       6  ??Subroutine9_0
       5  ?Subroutine0
      13  ?Subroutine1
       7  ?Subroutine2
      21  ?Subroutine3
       3  ?Subroutine4
      16  ?Subroutine5
      12  ?Subroutine6
       8  ?Subroutine7
       4  ?Subroutine8
      12  Point_To_Point_DstAddr
      54  ReturnTorF
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       8  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
     232  SampleApp_Init
     210  SampleApp_MessageMSGCB
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     529  SampleApp_ProcessEvent
      63  SampleApp_SendPeriodicMessage
      65  SampleApp_SendPointToPointMessage
    1316  SampleApp_SerialCMD
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc
       9  SendDataToCollector
       4  __Constant_7fff800
       4  cal_t0
      18  coordi
     128  data_coor
       2  debug
      10  dev_gh
      10  dev_id
      10  dev_wddt
       4  gh_factor
       2  rs_flag
       2  sensor_id

 
 2 581 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
   128 bytes in segment XDATA_I
   128 bytes in segment XDATA_ID
   612 bytes in segment XDATA_ROM_C
   127 bytes in segment XDATA_Z
 
 2 757 bytes of CODE  memory
   608 bytes of CONST memory (+ 4 bytes shared)
   255 bytes of XDATA memory

Errors: none
Warnings: 21
