###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             17/Mar/2017  10:41:07 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\Source\SampleApp.c     #
#    Command line       =  -f E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Pro #
#                          jects\zstack\Samples\SampleApp\CC2530DB\..\..\..\T #
#                          ools\CC2530DB\f8wRouter.cfg (-DCPU32MHZ            #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8       #
#                          -DMAC_CFG_RX_MAX=5 -DRTR_NWK) -f                   #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wConfig.cfg (-DZIGBEEPRO -DSECURE=0   #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFF00                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ #
#                          ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleApp #
#                          \Source\SampleApp.c -D ZTOOL_P1 -D MT_TASK -D      #
#                          MT_SYS_FUNC -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG  #
#                          -lC E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Pr #
#                          ojects\zstack\Samples\SampleApp\CC2530DB\RouterEB\ #
#                          List\ -lA E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æ #
#                          øºò\Projects\zstack\Samples\SampleApp\CC2530DB\Rou #
#                          terEB\List\ --diag_suppress Pe001,Pa010 -o         #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\ #
#                           -e --no_code_motion --debug --core=plain          #
#                          --dptr=16,1 --data_model=large                     #
#                          --code_model=banked --calling_convention=xdata_ree #
#                          ntrant --place_constants=data_rom                  #
#                          --nr_virtual_regs 16 -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝ #
#                          Ð¡Æøºò\ËÞÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleAp #
#                          p\CC2530DB\ -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞ #
#                          ÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleApp\CC2530D #
#                          B\..\Source\ -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\Ë #
#                          ÞÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleApp\CC2530 #
#                          DB\..\..\..\ZMain\TI2530DB\ -I                     #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\include\ -I                       #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\hal\target\CC2530EB\ -I               #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\include\ -I                       #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\high_level\ -I                    #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\ -I               #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mac\low_level\srf04\single_chip\ -I   #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\mt\ -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æø #
#                          ºò\ËÞÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleApp\CC #
#                          2530DB\..\..\..\..\..\Components\osal\include\ -I  #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\saddr\ -I                    #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\services\sdata\ -I                    #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\af\ -I                          #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\nwk\ -I                         #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sapi\ -I                        #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sec\ -I                         #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\sys\ -I                         #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\stack\zdo\ -I                         #
#                          E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\..\..\..\..\. #
#                          .\Components\zmac\ -I E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡ #
#                          Æøºò\ËÞÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleApp\ #
#                          CC2530DB\..\..\..\..\..\Components\zmac\f8w\ -Ohz  #
#                          --require_prototypes                               #
#    List file          =  E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\RouterEB\List #
#                          \SampleApp.lst                                     #
#    Object file        =  E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projec #
#                          ts\zstack\Samples\SampleApp\CC2530DB\RouterEB\Obj\ #
#                          SampleApp.r51                                      #
#                                                                             #
#                                                                             #
###############################################################################

E:\¹¤×÷\ÉÏº£³¤Íû\ÏîÄ¿\ËÞÖÝÐ¡Æøºò\ËÞÖÝÐ¡Æøºò\Projects\zstack\Samples\SampleApp\Source\SampleApp.c
      1          /**************************************************************************************************
      2            Filename:       SampleApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Sample Application (no Profile).
      7          
      8          
      9            Copyright 2007 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com.
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends it's messages either as broadcast or
     45            broadcast filtered group messages.  The other (more normal)
     46            message addressing is unicast.  Most of the other sample
     47            applications are written to support the unicast message model.
     48          
     49            Key control:
     50              SW1:  Sends a flash command to all devices in Group 1.
     51              SW2:  Adds/Removes (toggles) this device in and out
     52                    of Group 1.  This will enable and disable the
     53                    reception of the flash command.
     54          *********************************************************************/
     55          
     56          /*********************************************************************
     57           * INCLUDES
     58           */
     59          #include "OSAL.h"
     60          #include "ZGlobals.h"
     61          #include "AF.h"
     62          #include "aps_groups.h"
     63          #include "ZDApp.h"
     64          
     65          #include "SampleApp.h"
     66          #include "SampleAppHw.h"
     67          
     68          #include "OnBoard.h"
     69          
     70          /* HAL */
     71          #include "hal_lcd.h"
     72          #include "hal_led.h"
     73          #include "hal_key.h"
     74          
     75          #include  "MT_UART.h" //´Ë´¦ÓÃÓÚ´®¿Ú
     76          
     77          /*********************************************************************
     78           * MACROS
     79           */
     80          
     81          /*********************************************************************
     82           * CONSTANTS
     83           */
     84          
     85          /*********************************************************************
     86           * TYPEDEFS
     87           */
     88          
     89          /*********************************************************************
     90           * GLOBAL VARIABLES
     91           */
     92          
     93          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
     94          const cId_t SampleApp_ClusterList[SAMPLEAPP_MAX_CLUSTERS] =
   \                     SampleApp_ClusterList:
   \   000000   0100         DW 1
   \   000002   0200         DW 2
     95          {
     96            SAMPLEAPP_PERIODIC_CLUSTERID,
     97            SAMPLEAPP_FLASH_CLUSTERID
     98          };
     99          

   \                                 In  segment XDATA_ROM_C, align 1
    100          const SimpleDescriptionFormat_t SampleApp_SimpleDesc =
   \                     SampleApp_SimpleDesc:
   \   000000   14           DB 20
   \   000001   080F         DW 3848
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   02           DB 2
   \   000007   ....         DW SampleApp_ClusterList
   \   000009   02           DB 2
   \   00000A   ....         DW SampleApp_ClusterList
    101          {
    102            SAMPLEAPP_ENDPOINT,              //  int Endpoint;
    103            SAMPLEAPP_PROFID,                //  uint16 AppProfId[2];
    104            SAMPLEAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    105            SAMPLEAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    106            SAMPLEAPP_FLAGS,                 //  int   AppFlags:4;
    107            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    108            (cId_t *)SampleApp_ClusterList,  //  uint8 *pAppInClusterList;
    109            SAMPLEAPP_MAX_CLUSTERS,          //  uint8  AppNumInClusters;
    110            (cId_t *)SampleApp_ClusterList   //  uint8 *pAppInClusterList;
    111          };
    112          
    113          // This is the Endpoint/Interface description.  It is defined here, but
    114          // filled-in in SampleApp_Init().  Another way to go would be to fill
    115          // in the structure here and make it a "const" (in code space).  The
    116          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    117          endPointDesc_t SampleApp_epDesc;
   \                     SampleApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    118          
    119          /*********************************************************************
    120           * EXTERNAL VARIABLES
    121           */
    122          
    123          /*********************************************************************
    124           * EXTERNAL FUNCTIONS
    125           */
    126          
    127          /*********************************************************************
    128           * LOCAL VARIABLES
    129           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    130          uint8 SampleApp_TaskID;   // Task ID for internal task/event processing
   \                     SampleApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    131                                    // This variable will be received when
    132                                    // SampleApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    133          devStates_t SampleApp_NwkState;
   \                     SampleApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    134          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    135          uint8 SampleApp_TransID;  // This is the unique message ID (counter)
   \                     SampleApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    136          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    137          afAddrType_t SampleApp_Periodic_DstAddr;
   \                     SampleApp_Periodic_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    138          afAddrType_t SampleApp_Flash_DstAddr;
   \                     SampleApp_Flash_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z
    139          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    140          aps_Group_t SampleApp_Group;
   \                     SampleApp_Group:
   \   000000                DS 18
   \   000012                REQUIRE __INIT_XDATA_Z
    141          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    142          uint8 SampleAppPeriodicCounter = 0;
   \                     SampleAppPeriodicCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    143          uint8 SampleAppFlashCounter = 0;
   \                     SampleAppFlashCounter:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    144          
    145          /*********************************************************************
    146           * LOCAL FUNCTIONS
    147           */
    148          void SampleApp_HandleKeys( uint8 shift, uint8 keys );
    149          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    150          void SampleApp_SendPeriodicMessage( void );
    151          void SampleApp_SendFlashMessage( uint16 flashTime );
    152          
    153          /*********************************************************************
    154           * NETWORK LAYER CALLBACKS
    155           */
    156          
    157          /*********************************************************************
    158           * PUBLIC FUNCTIONS
    159           */
    160          
    161          /*********************************************************************
    162           * @fn      SampleApp_Init
    163           *
    164           * @brief   Initialization function for the Generic App Task.
    165           *          This is called during initialization and should contain
    166           *          any application specific initialization (ie. hardware
    167           *          initialization/setup, table initialization, power up
    168           *          notificaiton ... ).
    169           *
    170           * @param   task_id - the ID assigned by OSAL.  This ID should be
    171           *                    used to send messages and set timers.
    172           *
    173           * @return  none
    174           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    175          void SampleApp_Init( uint8 task_id )
   \                     SampleApp_Init:
    176          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
    177            SampleApp_TaskID = task_id;
   \   000007   90....       MOV     DPTR,#SampleApp_TaskID
   \   00000A   F0           MOVX    @DPTR,A
    178            SampleApp_NwkState = DEV_INIT;
   \   00000B   90....       MOV     DPTR,#SampleApp_NwkState
   \   00000E   7401         MOV     A,#0x1
   \   000010   F0           MOVX    @DPTR,A
    179            SampleApp_TransID = 0;
   \   000011   90....       MOV     DPTR,#SampleApp_TransID
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
    180            
    181            MT_UartInit();//´®¿Ú³õÊ¼»¯
   \   000016                ; Setup parameters for call to function MT_UartInit
   \   000016   12....       LCALL   ??MT_UartInit?relay  ; Banked call to: MT_UartInit
    182            MT_UartRegisterTaskID(task_id);//µÇ¼ÇÈÎÎñºÅ
   \   000019                ; Setup parameters for call to function MT_UartRegisterTaskID
   \   000019   EE           MOV     A,R6
   \   00001A   F9           MOV     R1,A
   \   00001B   12....       LCALL   ??MT_UartRegisterTaskID?relay; Banked call to: MT_UartRegisterTaskID
    183            HalUARTWrite(0,"Hello World\n",12); //£¨´®¿Ú0£¬'×Ö·û'£¬×Ö·û¸öÊý¡££©
   \   00001E                ; Setup parameters for call to function HalUARTWrite
   \   00001E   7C0C         MOV     R4,#0xc
   \   000020   7D00         MOV     R5,#0x0
   \   000022   7A..         MOV     R2,#`?<Constant "Hello World\\n">` & 0xff
   \   000024   7B..         MOV     R3,#(`?<Constant "Hello World\\n">` >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    184            
    185            // Device hardware initialization can be added here or in main() (Zmain.c).
    186            // If the hardware is application specific - add it here.
    187            // If the hardware is other parts of the device add it in main().
    188          
    189           #if defined ( BUILD_ALL_DEVICES )
    190            // The "Demo" target is setup to have BUILD_ALL_DEVICES and HOLD_AUTO_START
    191            // We are looking at a jumper (defined in SampleAppHw.c) to be jumpered
    192            // together - if they are - we will start up a coordinator. Otherwise,
    193            // the device will start as a router.
    194            if ( readCoordinatorJumper() )
    195              zgDeviceLogicalType = ZG_DEVICETYPE_COORDINATOR;
    196            else
    197              zgDeviceLogicalType = ZG_DEVICETYPE_ROUTER;
    198          #endif // BUILD_ALL_DEVICES
    199          
    200          #if defined ( HOLD_AUTO_START )
    201            // HOLD_AUTO_START is a compile option that will surpress ZDApp
    202            //  from starting the device and wait for the application to
    203            //  start the device.
    204            ZDOInitDevice(0);
    205          #endif
    206          
    207            // Setup for the periodic message's destination address
    208            // Broadcast to everyone
    209            SampleApp_Periodic_DstAddr.addrMode = (afAddrMode_t)AddrBroadcast;
   \   00002B   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr + 8
   \   00002E   740F         MOV     A,#0xf
   \   000030   F0           MOVX    @DPTR,A
    210            SampleApp_Periodic_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000031   A3           INC     DPTR
   \   000032   7414         MOV     A,#0x14
   \   000034   F0           MOVX    @DPTR,A
    211            SampleApp_Periodic_DstAddr.addr.shortAddr = 0xFFFF;
   \   000035   90....       MOV     DPTR,#SampleApp_Periodic_DstAddr
   \   000038   74FF         MOV     A,#-0x1
   \   00003A   F0           MOVX    @DPTR,A
   \   00003B   A3           INC     DPTR
   \   00003C   F0           MOVX    @DPTR,A
    212          
    213            // Setup for the flash command's destination address - Group 1
    214            SampleApp_Flash_DstAddr.addrMode = (afAddrMode_t)afAddrGroup;
   \   00003D   90....       MOV     DPTR,#SampleApp_Flash_DstAddr + 8
   \   000040   7401         MOV     A,#0x1
   \   000042   F0           MOVX    @DPTR,A
    215            SampleApp_Flash_DstAddr.endPoint = SAMPLEAPP_ENDPOINT;
   \   000043   A3           INC     DPTR
   \   000044   7414         MOV     A,#0x14
   \   000046   F0           MOVX    @DPTR,A
    216            SampleApp_Flash_DstAddr.addr.shortAddr = SAMPLEAPP_FLASH_GROUP;
   \   000047   90....       MOV     DPTR,#SampleApp_Flash_DstAddr
   \   00004A   7401         MOV     A,#0x1
   \   00004C   F0           MOVX    @DPTR,A
   \   00004D   A3           INC     DPTR
   \   00004E   E4           CLR     A
   \   00004F   F0           MOVX    @DPTR,A
    217          
    218            // Fill out the endpoint description.
    219            SampleApp_epDesc.endPoint = SAMPLEAPP_ENDPOINT;
   \   000050   90....       MOV     DPTR,#SampleApp_epDesc
   \   000053   7414         MOV     A,#0x14
   \   000055   F0           MOVX    @DPTR,A
    220            SampleApp_epDesc.task_id = &SampleApp_TaskID;
   \   000056   A3           INC     DPTR
   \   000057   74..         MOV     A,#SampleApp_TaskID & 0xff
   \   000059   F0           MOVX    @DPTR,A
   \   00005A   A3           INC     DPTR
   \   00005B   74..         MOV     A,#(SampleApp_TaskID >> 8) & 0xff
   \   00005D   F0           MOVX    @DPTR,A
    221            SampleApp_epDesc.simpleDesc
    222                      = (SimpleDescriptionFormat_t *)&SampleApp_SimpleDesc;
   \   00005E   A3           INC     DPTR
   \   00005F   74..         MOV     A,#SampleApp_SimpleDesc & 0xff
   \   000061   F0           MOVX    @DPTR,A
   \   000062   A3           INC     DPTR
   \   000063   74..         MOV     A,#(SampleApp_SimpleDesc >> 8) & 0xff
   \   000065   F0           MOVX    @DPTR,A
    223            SampleApp_epDesc.latencyReq = noLatencyReqs;
   \   000066   A3           INC     DPTR
   \   000067   E4           CLR     A
   \   000068   F0           MOVX    @DPTR,A
    224          
    225            // Register the endpoint description with the AF
    226            afRegister( &SampleApp_epDesc );
   \   000069                ; Setup parameters for call to function afRegister
   \   000069   7A..         MOV     R2,#SampleApp_epDesc & 0xff
   \   00006B   7B..         MOV     R3,#(SampleApp_epDesc >> 8) & 0xff
   \   00006D   12....       LCALL   ??afRegister?relay   ; Banked call to: afRegister
    227          
    228            // Register for all key events - This app will handle all key events
    229            RegisterForKeys( SampleApp_TaskID );
   \   000070                ; Setup parameters for call to function RegisterForKeys
   \   000070   90....       MOV     DPTR,#SampleApp_TaskID
   \   000073   E0           MOVX    A,@DPTR
   \   000074   F9           MOV     R1,A
   \   000075   12....       LCALL   ??RegisterForKeys?relay; Banked call to: RegisterForKeys
    230          
    231            // By default, all devices start out in Group 1
    232            SampleApp_Group.ID = 0x0001;
   \   000078   90....       MOV     DPTR,#SampleApp_Group
   \   00007B   7401         MOV     A,#0x1
   \   00007D   F0           MOVX    @DPTR,A
   \   00007E   A3           INC     DPTR
   \   00007F   E4           CLR     A
   \   000080   F0           MOVX    @DPTR,A
    233            osal_memcpy( SampleApp_Group.name, "Group 1", 7  );
   \   000081                ; Setup parameters for call to function osal_memcpy
   \   000081   75....       MOV     ?V0,#`?<Constant "Group 1">` & 0xff
   \   000084   75....       MOV     ?V1,#(`?<Constant "Group 1">` >> 8) & 0xff
   \   000087   F5..         MOV     ?V2,A
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00008E   7C07         MOV     R4,#0x7
   \   000090   7D00         MOV     R5,#0x0
   \   000092   7A..         MOV     R2,#(SampleApp_Group + 2) & 0xff
   \   000094   7B..         MOV     R3,#((SampleApp_Group + 2) >> 8) & 0xff
   \   000096   12....       LCALL   ??osal_memcpy?relay  ; Banked call to: osal_memcpy
   \   000099   7403         MOV     A,#0x3
   \   00009B   12....       LCALL   ?DEALLOC_XSTACK8
    234            aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \   00009E                ; Setup parameters for call to function aps_AddGroup
   \   00009E   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   0000A0   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   0000A2   7914         MOV     R1,#0x14
   \   0000A4   12....       LCALL   ??aps_AddGroup?relay ; Banked call to: aps_AddGroup
    235          
    236          #if defined ( LCD_SUPPORTED )
    237            HalLcdWriteString( "SampleApp", HAL_LCD_LINE_1 );
   \   0000A7                ; Setup parameters for call to function HalLcdWriteString
   \   0000A7   7901         MOV     R1,#0x1
   \   0000A9   7A..         MOV     R2,#`?<Constant "SampleApp">` & 0xff
   \   0000AB   7B..         MOV     R3,#(`?<Constant "SampleApp">` >> 8) & 0xff
   \   0000AD   12....       LCALL   ??HalLcdWriteString?relay; Banked call to: HalLcdWriteString
    238          #endif
    239          }
   \   0000B0   7F03         MOV     R7,#0x3
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA
    240          
    241          /*********************************************************************
    242           * @fn      SampleApp_ProcessEvent
    243           *
    244           * @brief   Generic Application Task event processor.  This function
    245           *          is called to process all events for the task.  Events
    246           *          include timers, messages and any other user defined events.
    247           *
    248           * @param   task_id  - The OSAL assigned task ID.
    249           * @param   events - events to process.  This is a bit map and can
    250           *                   contain more than one event.
    251           *
    252           * @return  none
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          uint16 SampleApp_ProcessEvent( uint8 task_id, uint16 events )
   \                     SampleApp_ProcessEvent:
    255          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    256            afIncomingMSGPacket_t *MSGpkt;
    257            (void)task_id;  // Intentionally unreferenced parameter
    258          
    259            if ( events & SYS_EVENT_MSG )
   \   000009   5480         ANL     A,#0x80
   \   00000B   6078         JZ      ??SampleApp_ProcessEvent_0
    260            {
    261              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   802B         SJMP    ??SampleApp_ProcessEvent_1
    262              while ( MSGpkt )
    263              {
    264                switch ( MSGpkt->hdr.event )
    265                {
    266                  // Received when a key is pressed
    267                  case KEY_CHANGE:
    268                    SampleApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    269                    break;
    270          
    271                  // Received when a messages is received (OTA) for this endpoint
    272                  case AF_INCOMING_MSG_CMD:
    273                    SampleApp_MessageMSGCB( MSGpkt );
    274                    break;
    275          
    276                  // Received whenever the device changes state in the network
    277                  case ZDO_STATE_CHANGE:
    278                    SampleApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??SampleApp_ProcessEvent_2:
   \   00000F   A3           INC     DPTR
   \   000010   E0           MOVX    A,@DPTR
   \   000011   90....       MOV     DPTR,#SampleApp_NwkState
   \   000014   F0           MOVX    @DPTR,A
    279                    if ( (SampleApp_NwkState == DEV_ZB_COORD)
    280                        || (SampleApp_NwkState == DEV_ROUTER)
    281                        || (SampleApp_NwkState == DEV_END_DEVICE) )
   \   000015   6409         XRL     A,#0x9
   \   000017   600A         JZ      ??SampleApp_ProcessEvent_3
   \   000019   E0           MOVX    A,@DPTR
   \   00001A   6407         XRL     A,#0x7
   \   00001C   6005         JZ      ??SampleApp_ProcessEvent_3
   \   00001E   E0           MOVX    A,@DPTR
   \   00001F   6406         XRL     A,#0x6
   \   000021   7010         JNZ     ??SampleApp_ProcessEvent_4
    282                    {
    283                      // Start sending the periodic message in a regular interval.
    284                      osal_start_timerEx( SampleApp_TaskID,
    285                                        SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    286                                        SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT );
   \                     ??SampleApp_ProcessEvent_3:
   \   000023                ; Setup parameters for call to function osal_start_timerEx
   \   000023   7C88         MOV     R4,#-0x78
   \   000025   7D13         MOV     R5,#0x13
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   90....       MOV     DPTR,#SampleApp_TaskID
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   F9           MOV     R1,A
   \   000030   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
    287                    }
    288                    else
    289                    {
    290                      // Device is no longer in the network
    291                    }
    292                    break;
    293          
    294                  default:
    295                    break;
    296                }
    297          
    298                // Release the memory
    299                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??SampleApp_ProcessEvent_4:
   \   000033                ; Setup parameters for call to function osal_msg_deallocate
   \   000033   AA..         MOV     R2,?V0
   \   000035   AB..         MOV     R3,?V1
   \   000037   12....       LCALL   ??osal_msg_deallocate?relay; Banked call to: osal_msg_deallocate
    300          
    301                // Next - if one is available
    302                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( SampleApp_TaskID );
   \   00003A                ; Setup parameters for call to function osal_msg_receive
   \                     ??SampleApp_ProcessEvent_1:
   \   00003A   90....       MOV     DPTR,#SampleApp_TaskID
   \   00003D   E0           MOVX    A,@DPTR
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??osal_msg_receive?relay; Banked call to: osal_msg_receive
   \   000042   8A..         MOV     ?V0,R2
   \   000044   8B..         MOV     ?V1,R3
   \   000046   E5..         MOV     A,?V0
   \   000048   45..         ORL     A,?V1
   \   00004A   6032         JZ      ??SampleApp_ProcessEvent_5
   \   00004C   85..82       MOV     DPL,?V0
   \   00004F   85..83       MOV     DPH,?V1
   \   000052   E0           MOVX    A,@DPTR
   \   000053   24E6         ADD     A,#-0x1a
   \   000055   601E         JZ      ??SampleApp_ProcessEvent_6
   \   000057   245A         ADD     A,#0x5a
   \   000059   6006         JZ      ??SampleApp_ProcessEvent_7
   \   00005B   24EF         ADD     A,#-0x11
   \   00005D   60B0         JZ      ??SampleApp_ProcessEvent_2
   \   00005F   80D2         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_7:
   \   000061                ; Setup parameters for call to function SampleApp_HandleKeys
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   FA           MOV     R2,A
   \   000066   85..82       MOV     DPL,?V0
   \   000069   85..83       MOV     DPH,?V1
   \   00006C   A3           INC     DPTR
   \   00006D   A3           INC     DPTR
   \   00006E   E0           MOVX    A,@DPTR
   \   00006F   F9           MOV     R1,A
   \   000070   12....       LCALL   ??SampleApp_HandleKeys?relay; Banked call to: SampleApp_HandleKeys
   \   000073   80BE         SJMP    ??SampleApp_ProcessEvent_4
   \                     ??SampleApp_ProcessEvent_6:
   \   000075                ; Setup parameters for call to function SampleApp_MessageMSGCB
   \   000075   AA..         MOV     R2,?V0
   \   000077   AB..         MOV     R3,?V1
   \   000079   12....       LCALL   ??SampleApp_MessageMSGCB?relay; Banked call to: SampleApp_MessageMSGCB
   \   00007C   80B5         SJMP    ??SampleApp_ProcessEvent_4
    303              }
    304          
    305              // return unprocessed events
    306              return (events ^ SYS_EVENT_MSG);
   \                     ??SampleApp_ProcessEvent_5:
   \   00007E   EE           MOV     A,R6
   \   00007F   FA           MOV     R2,A
   \   000080   EF           MOV     A,R7
   \   000081   6480         XRL     A,#0x80
   \   000083   8024         SJMP    ??SampleApp_ProcessEvent_8
    307            }
    308          
    309            // Send a message out - This event is generated by a timer
    310            //  (setup in SampleApp_Init()).
    311            if ( events & SAMPLEAPP_SEND_PERIODIC_MSG_EVT )
   \                     ??SampleApp_ProcessEvent_0:
   \   000085   EE           MOV     A,R6
   \   000086   A2E0         MOV     C,0xE0 /* A   */.0
   \   000088   5022         JNC     ??SampleApp_ProcessEvent_9
    312            {
    313              // Send the periodic message
    314              SampleApp_SendPeriodicMessage();//ÖÜÆÚÐÔ·¢ËÍº¯Êý
   \   00008A                ; Setup parameters for call to function SampleApp_SendPeriodicMessage
   \   00008A   12....       LCALL   ??SampleApp_SendPeriodicMessage?relay; Banked call to: SampleApp_SendPeriodicMessage
    315          
    316              // Setup to send message again in normal period (+ a little jitter)
    317              osal_start_timerEx( SampleApp_TaskID, SAMPLEAPP_SEND_PERIODIC_MSG_EVT,
    318                  (SAMPLEAPP_SEND_PERIODIC_MSG_TIMEOUT + (osal_rand() & 0x00FF)) );
   \   00008D                ; Setup parameters for call to function osal_rand
   \   00008D   12....       LCALL   ??osal_rand?relay    ; Banked call to: osal_rand
   \   000090                ; Setup parameters for call to function osal_start_timerEx
   \   000090   EA           MOV     A,R2
   \   000091   2488         ADD     A,#-0x78
   \   000093   FC           MOV     R4,A
   \   000094   E4           CLR     A
   \   000095   3413         ADDC    A,#0x13
   \   000097   FD           MOV     R5,A
   \   000098   7A01         MOV     R2,#0x1
   \   00009A   7B00         MOV     R3,#0x0
   \   00009C   90....       MOV     DPTR,#SampleApp_TaskID
   \   00009F   E0           MOVX    A,@DPTR
   \   0000A0   F9           MOV     R1,A
   \   0000A1   12....       LCALL   ??osal_start_timerEx?relay; Banked call to: osal_start_timerEx
    319          
    320              // return unprocessed events
    321              return (events ^ SAMPLEAPP_SEND_PERIODIC_MSG_EVT);
   \   0000A4   EE           MOV     A,R6
   \   0000A5   6401         XRL     A,#0x1
   \   0000A7   FA           MOV     R2,A
   \   0000A8   EF           MOV     A,R7
   \                     ??SampleApp_ProcessEvent_8:
   \   0000A9   FB           MOV     R3,A
   \   0000AA   8004         SJMP    ??SampleApp_ProcessEvent_10
    322            }
    323          
    324            // Discard unknown events
    325            return 0;
   \                     ??SampleApp_ProcessEvent_9:
   \   0000AC   7A00         MOV     R2,#0x0
   \   0000AE   7B00         MOV     R3,#0x0
   \                     ??SampleApp_ProcessEvent_10:
   \   0000B0   7F04         MOV     R7,#0x4
   \   0000B2   02....       LJMP    ?BANKED_LEAVE_XDATA
    326          }
    327          
    328          /*********************************************************************
    329           * Event Generation Functions
    330           */
    331          /*********************************************************************
    332           * @fn      SampleApp_HandleKeys
    333           *
    334           * @brief   Handles all key events for this device.
    335           *
    336           * @param   shift - true if in shift/alt.
    337           * @param   keys - bit field for key events. Valid entries:
    338           *                 HAL_KEY_SW_2
    339           *                 HAL_KEY_SW_1
    340           *
    341           * @return  none
    342           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    343          void SampleApp_HandleKeys( uint8 shift, uint8 keys )
   \                     SampleApp_HandleKeys:
    344          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
    345            (void)shift;  // Intentionally unreferenced parameter
    346            
    347            if ( keys & HAL_KEY_SW_1 )
   \   000007   A2E0         MOV     C,0xE0 /* A   */.0
   \   000009   5007         JNC     ??SampleApp_HandleKeys_0
    348            {
    349              /* This key sends the Flash Command is sent to Group 1.
    350               * This device will not receive the Flash Command from this
    351               * device (even if it belongs to group 1).
    352               */
    353              SampleApp_SendFlashMessage( SAMPLEAPP_FLASH_DURATION );
   \   00000B                ; Setup parameters for call to function SampleApp_SendFlashMessage
   \   00000B   7AE8         MOV     R2,#-0x18
   \   00000D   7B03         MOV     R3,#0x3
   \   00000F   12....       LCALL   ??SampleApp_SendFlashMessage?relay; Banked call to: SampleApp_SendFlashMessage
    354            }
    355          
    356            if ( keys & HAL_KEY_SW_2 )
   \                     ??SampleApp_HandleKeys_0:
   \   000012   EE           MOV     A,R6
   \   000013   A2E1         MOV     C,0xE0 /* A   */.1
   \   000015   5024         JNC     ??SampleApp_HandleKeys_1
    357            {
    358              /* The Flashr Command is sent to Group 1.
    359               * This key toggles this device in and out of group 1.
    360               * If this device doesn't belong to group 1, this application
    361               * will not receive the Flash command sent to group 1.
    362               */
    363              aps_Group_t *grp;
    364              grp = aps_FindGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
    365              if ( grp )
   \   000017                ; Setup parameters for call to function aps_FindGroup
   \   000017   7A01         MOV     R2,#0x1
   \   000019   7B00         MOV     R3,#0x0
   \   00001B   7914         MOV     R1,#0x14
   \   00001D   12....       LCALL   ??aps_FindGroup?relay; Banked call to: aps_FindGroup
   \   000020   8B..         MOV     ?V1,R3
   \   000022   EA           MOV     A,R2
   \   000023   45..         ORL     A,?V1
   \   000025   600B         JZ      ??SampleApp_HandleKeys_2
    366              {
    367                // Remove from the group
    368                aps_RemoveGroup( SAMPLEAPP_ENDPOINT, SAMPLEAPP_FLASH_GROUP );
   \   000027                ; Setup parameters for call to function aps_RemoveGroup
   \   000027   7A01         MOV     R2,#0x1
   \   000029   7B00         MOV     R3,#0x0
   \   00002B   7914         MOV     R1,#0x14
   \   00002D   12....       LCALL   ??aps_RemoveGroup?relay; Banked call to: aps_RemoveGroup
   \   000030   8009         SJMP    ??SampleApp_HandleKeys_1
    369              }
    370              else
    371              {
    372                // Add to the flash group
    373                aps_AddGroup( SAMPLEAPP_ENDPOINT, &SampleApp_Group );
   \                     ??SampleApp_HandleKeys_2:
   \   000032                ; Setup parameters for call to function aps_AddGroup
   \   000032   7A..         MOV     R2,#SampleApp_Group & 0xff
   \   000034   7B..         MOV     R3,#(SampleApp_Group >> 8) & 0xff
   \   000036   7914         MOV     R1,#0x14
   \   000038   12....       LCALL   ??aps_AddGroup?relay ; Banked call to: aps_AddGroup
    374              }
    375            }
    376          }
   \                     ??SampleApp_HandleKeys_1:
   \   00003B   80..         SJMP    ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine2_0:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    377          
    378          /*********************************************************************
    379           * LOCAL FUNCTIONS
    380           */
    381          
    382          /*********************************************************************
    383           * @fn      SampleApp_MessageMSGCB
    384           *
    385           * @brief   Data message processor callback.  This function processes
    386           *          any incoming data - probably from other devices.  So, based
    387           *          on cluster ID, perform the intended action.
    388           *
    389           * @param   none
    390           *
    391           * @return  none
    392           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    393          void SampleApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     SampleApp_MessageMSGCB:
    394          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
    395            uint16 flashTime;
    396          
    397            switch ( pkt->clusterId )
   \   000009   8E82         MOV     DPL,R6
   \   00000B   8F83         MOV     DPH,R7
   \   00000D   A3           INC     DPTR
   \   00000E   A3           INC     DPTR
   \   00000F   A3           INC     DPTR
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   F5..         MOV     ?V0,A
   \   000014   A3           INC     DPTR
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F5..         MOV     ?V1,A
   \   000018   78..         MOV     R0,#?V0
   \   00001A   12....       LCALL   ?US_SWITCH_DENSE
   \                     `?<Jumptable for SampleApp_MessageMSGCB>_0`:
   \   00001D   0100         DW        1
   \   00001F   01           DB        1
   \   000020   ....         DW        ??SampleApp_MessageMSGCB_0
   \   000022   ....         DW        ??SampleApp_MessageMSGCB_1
   \   000024   ....         DW        ??SampleApp_MessageMSGCB_2
    398            {
    399              case SAMPLEAPP_PERIODIC_CLUSTERID:
    400                HalUARTWrite(0,"I get data\n",11);//ÓÃÓÚÌáÊ¾ÓÐÊý¾Ý
   \                     ??SampleApp_MessageMSGCB_1:
   \   000026                ; Setup parameters for call to function HalUARTWrite
   \   000026   7C0B         MOV     R4,#0xb
   \   000028   7D00         MOV     R5,#0x0
   \   00002A   7A..         MOV     R2,#`?<Constant "I get data\\n">` & 0xff
   \   00002C   7B..         MOV     R3,#(`?<Constant "I get data\\n">` >> 8) & 0xff
   \   00002E   7900         MOV     R1,#0x0
   \   000030   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    401                HalUARTWrite(0, &pkt->cmd.Data[0],10); //´òÓ¡ÊÕµ½Êý¾Ý
   \   000033                ; Setup parameters for call to function HalUARTWrite
   \   000033   7C0A         MOV     R4,#0xa
   \   000035   7D00         MOV     R5,#0x0
   \   000037   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_0:
   \   00003A   FA           MOV     R2,A
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   FB           MOV     R3,A
   \   00003E   7900         MOV     R1,#0x0
   \   000040   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    402                HalUARTWrite(0,"\n",1);  //»Ø³µ»»ÐÐ£¬±ãÓÚ¹Û²ì
   \   000043                ; Setup parameters for call to function HalUARTWrite
   \   000043   7C01         MOV     R4,#0x1
   \   000045   7D00         MOV     R5,#0x0
   \   000047   7A..         MOV     R2,#`?<Constant "\\n">` & 0xff
   \   000049   7B..         MOV     R3,#(`?<Constant "\\n">` >> 8) & 0xff
   \   00004B   7900         MOV     R1,#0x0
   \   00004D   12....       LCALL   ??HalUARTWrite?relay ; Banked call to: HalUARTWrite
    403                break;
   \   000050   8035         SJMP    ??SampleApp_MessageMSGCB_0
   \                     ??SampleApp_MessageMSGCB_2:
   \   000052   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000055   F8           MOV     R0,A
   \   000056   A3           INC     DPTR
   \   000057   E0           MOVX    A,@DPTR
   \   000058   F9           MOV     R1,A
   \   000059                ; Setup parameters for call to function HalLedBlink
   \   000059   8882         MOV     DPL,R0
   \   00005B   8983         MOV     DPH,R1
   \   00005D   A3           INC     DPTR
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   FA           MOV     R2,A
   \   000060   8882         MOV     DPL,R0
   \   000062   8983         MOV     DPH,R1
   \   000064   A3           INC     DPTR
   \   000065   A3           INC     DPTR
   \   000066   E0           MOVX    A,@DPTR
   \   000067   F8           MOV     R0,A
   \   000068   E4           CLR     A
   \   000069   C8           XCH     A,R0
   \   00006A   F9           MOV     R1,A
   \   00006B   EA           MOV     A,R2
   \   00006C   28           ADD     A,R0
   \   00006D   F5..         MOV     ?V0,A
   \   00006F   E4           CLR     A
   \   000070   39           ADDC    A,R1
   \   000071   F5..         MOV     ?V1,A
   \   000073   7402         MOV     A,#0x2
   \   000075   78..         MOV     R0,#?V0
   \   000077   12....       LCALL   ?US_SHR
   \   00007A   AC..         MOV     R4,?V0
   \   00007C   AD..         MOV     R5,?V1
   \   00007E   7B32         MOV     R3,#0x32
   \   000080   7A04         MOV     R2,#0x4
   \   000082   7908         MOV     R1,#0x8
    404          
    405              case SAMPLEAPP_FLASH_CLUSTERID:
    406                flashTime = BUILD_UINT16(pkt->cmd.Data[1], pkt->cmd.Data[2] );
    407                HalLedBlink( HAL_LED_4, 4, 50, (flashTime / 4) );
   \   000084   12....       LCALL   ??HalLedBlink?relay  ; Banked call to: HalLedBlink
    408                break;
    409            }
    410          }
   \                     ??SampleApp_MessageMSGCB_0:
   \   000087   02....       LJMP    ??Subroutine2_0 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   EE           MOV     A,R6
   \   000001   2422         ADD     A,#0x22
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   3F           ADDC    A,R7
   \   000007   F583         MOV     DPH,A
   \   000009   E0           MOVX    A,@DPTR
   \   00000A   22           RET
    411          
    412          /*********************************************************************
    413           * @fn      SampleApp_SendPeriodicMessage
    414           *
    415           * @brief   Send the periodic message.
    416           *
    417           * @param   none
    418           *
    419           * @return  none
    420           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   12....       LCALL   ?DEALLOC_XSTACK8
   \   000003                REQUIRE ??Subroutine2_0
   \   000003                ; // Fall through to label ??Subroutine2_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    421          void SampleApp_SendPeriodicMessage( void )
   \                     SampleApp_SendPeriodicMessage:
    422          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 10
   \   000005   74F6         MOV     A,#-0xa
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    423            uint8 data[10]={'0','1','2','3','4','5','6','7','8','9'};//×Ô¶¨ÒåÊý¾Ý
   \   00000A   90....       MOV     DPTR,#`?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   740A         MOV     A,#0xa
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    424            if ( AF_DataRequest( &SampleApp_Periodic_DstAddr, &SampleApp_epDesc,
    425                                 SAMPLEAPP_PERIODIC_CLUSTERID,
    426                                 10,//×Ö½ÚÊý
    427                                 data,//Ö¸ÕëÍ·
    428                                 &SampleApp_TransID,
    429                                 AF_DISCV_ROUTE,
    430                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000016                ; Setup parameters for call to function AF_DataRequest
   \   000016   75..1E       MOV     ?V0,#0x1e
   \   000019   78..         MOV     R0,#?V0
   \   00001B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00001E   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   000021   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000024   78..         MOV     R0,#?V0
   \   000026   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000029   7403         MOV     A,#0x3
   \   00002B   12....       LCALL   ?XSTACK_DISP100_8
   \   00002E   88..         MOV     ?V0,R0
   \   000030   89..         MOV     ?V1,R1
   \   000032   78..         MOV     R0,#?V0
   \   000034   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000037   75..0A       MOV     ?V0,#0xa
   \   00003A   75..00       MOV     ?V1,#0x0
   \   00003D   78..         MOV     R0,#?V0
   \   00003F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000042   75..01       MOV     ?V0,#0x1
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV     R1,#0x20
   \   00004C   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   00004E   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000050   7A..         MOV     R2,#SampleApp_Periodic_DstAddr & 0xff
   \   000052   7B..         MOV     R3,#(SampleApp_Periodic_DstAddr >> 8) & 0xff
   \   000054   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   000057   7409         MOV     A,#0x9
   \   000059   12....       LCALL   ?DEALLOC_XSTACK8
    431            {
    432            }
    433            else
    434            {
    435              // Error occurred in request to send.
    436            }
    437          }
   \   00005C   740A         MOV     A,#0xa
   \   00005E   02....       LJMP    ?Subroutine0 & 0xFFFF
    438          
    439          /*********************************************************************
    440           * @fn      SampleApp_SendFlashMessage
    441           *
    442           * @brief   Send the flash message to group 1.
    443           *
    444           * @param   flashTime - in milliseconds
    445           *
    446           * @return  none
    447           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    448          void SampleApp_SendFlashMessage( uint16 flashTime )
   \                     SampleApp_SendFlashMessage:
    449          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 3
   \   000005   74FD         MOV     A,#-0x3
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    450            uint8 buffer[3];
    451            buffer[0] = (uint8)(SampleAppFlashCounter++);
   \   00000A   90....       MOV     DPTR,#SampleAppFlashCounter
   \   00000D   E0           MOVX    A,@DPTR
   \   00000E   85..82       MOV     DPL,?XSP + 0
   \   000011   85..83       MOV     DPH,?XSP + 1
   \   000014   F0           MOVX    @DPTR,A
   \   000015   90....       MOV     DPTR,#SampleAppFlashCounter
   \   000018   E0           MOVX    A,@DPTR
   \   000019   04           INC     A
   \   00001A   F0           MOVX    @DPTR,A
    452            buffer[1] = LO_UINT16( flashTime );
   \   00001B   7401         MOV     A,#0x1
   \   00001D   12....       LCALL   ?XSTACK_DISP0_8
   \   000020   EA           MOV     A,R2
   \   000021   F0           MOVX    @DPTR,A
    453            buffer[2] = HI_UINT16( flashTime );
   \   000022   7402         MOV     A,#0x2
   \   000024   12....       LCALL   ?XSTACK_DISP0_8
   \   000027   EB           MOV     A,R3
   \   000028   F0           MOVX    @DPTR,A
    454          
    455            if ( AF_DataRequest( &SampleApp_Flash_DstAddr, &SampleApp_epDesc,
    456                                 SAMPLEAPP_FLASH_CLUSTERID,
    457                                 3,
    458                                 buffer,
    459                                 &SampleApp_TransID,
    460                                 AF_DISCV_ROUTE,
    461                                 AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \   000029                ; Setup parameters for call to function AF_DataRequest
   \   000029   75..1E       MOV     ?V0,#0x1e
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000031   75....       MOV     ?V0,#SampleApp_TransID & 0xff
   \   000034   75....       MOV     ?V1,#(SampleApp_TransID >> 8) & 0xff
   \   000037   78..         MOV     R0,#?V0
   \   000039   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003C   7403         MOV     A,#0x3
   \   00003E   12....       LCALL   ?XSTACK_DISP100_8
   \   000041   88..         MOV     ?V0,R0
   \   000043   89..         MOV     ?V1,R1
   \   000045   78..         MOV     R0,#?V0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   75..03       MOV     ?V0,#0x3
   \   00004D   75..00       MOV     ?V1,#0x0
   \   000050   78..         MOV     R0,#?V0
   \   000052   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000055   75..02       MOV     ?V0,#0x2
   \   000058   78..         MOV     R0,#?V0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   7920         MOV     R1,#0x20
   \   00005F   7C..         MOV     R4,#SampleApp_epDesc & 0xff
   \   000061   7D..         MOV     R5,#(SampleApp_epDesc >> 8) & 0xff
   \   000063   7A..         MOV     R2,#SampleApp_Flash_DstAddr & 0xff
   \   000065   7B..         MOV     R3,#(SampleApp_Flash_DstAddr >> 8) & 0xff
   \   000067   12....       LCALL   ??AF_DataRequest?relay; Banked call to: AF_DataRequest
   \   00006A   7409         MOV     A,#0x9
   \   00006C   12....       LCALL   ?DEALLOC_XSTACK8
    462            {
    463            }
    464            else
    465            {
    466              // Error occurred in request to send.
    467            }
    468          }
   \   00006F   7403         MOV     A,#0x3
   \   000071   02....       LJMP    ?Subroutine0 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendPeriodicMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendPeriodicMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??SampleApp_SendFlashMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SampleApp_SendFlashMessage

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Hello World\\n">`:
   \   000000   48656C6C     DB "Hello World\012"
   \            6F20576F
   \            726C640A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "Group 1">`:
   \   000000   47726F75     DB "Group 1"
   \            70203100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "SampleApp">`:
   \   000000   53616D70     DB "SampleApp"
   \            6C654170
   \            7000    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "I get data\\n">`:
   \   000000   49206765     DB "I get data\012"
   \            74206461
   \            74610A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "\\n">`:
   \   000000   0A00         DB "\012"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53
   \   000006   36           DB 54
   \   000007   37           DB 55
   \   000008   38           DB 56
   \   000009   39           DB 57
    469          
    470          /*********************************************************************
    471          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0     22   SampleApp_HandleKeys
        0     10   -> SampleApp_SendFlashMessage
        0     10   -> aps_AddGroup
        0     10   -> aps_FindGroup
        0     10   -> aps_RemoveGroup
      0     14   SampleApp_Init
        0     11   -> HalLcdWriteString
        0     11   -> HalUARTWrite
        0     11   -> MT_UartInit
        0     11   -> MT_UartRegisterTaskID
        0     11   -> RegisterForKeys
        0     11   -> afRegister
        0     11   -> aps_AddGroup
        0     14   -> osal_memcpy
      0     22   SampleApp_MessageMSGCB
        0     10   -> HalLedBlink
        0     10   -> HalUARTWrite
      0     12   SampleApp_ProcessEvent
        0     12   -> SampleApp_HandleKeys
        0     12   -> SampleApp_MessageMSGCB
        0     12   -> SampleApp_SendPeriodicMessage
        0     12   -> osal_msg_deallocate
        0     12   -> osal_msg_receive
        0     12   -> osal_rand
        0     12   -> osal_start_timerEx
      1     32   SampleApp_SendFlashMessage
        0     22   -> AF_DataRequest
      0     41   SampleApp_SendPeriodicMessage
        0     29   -> AF_DataRequest


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "Group 1">
      13  ?<Constant "Hello World\n">
      12  ?<Constant "I get data\n">
      10  ?<Constant "SampleApp">
       2  ?<Constant "\n">
      10  ?<Constant {48, 49, 50, 51, 52, 53, 54, 55, 56
       6  ??SampleApp_HandleKeys?relay
       6  ??SampleApp_Init?relay
       6  ??SampleApp_MessageMSGCB?relay
       6  ??SampleApp_ProcessEvent?relay
       6  ??SampleApp_SendFlashMessage?relay
       6  ??SampleApp_SendPeriodicMessage?relay
       5  ??Subroutine2_0
       3  ?Subroutine0
      11  ?Subroutine1
       1  SampleAppFlashCounter
       1  SampleAppPeriodicCounter
       4  SampleApp_ClusterList
      12  SampleApp_Flash_DstAddr
      18  SampleApp_Group
      61  SampleApp_HandleKeys
     181  SampleApp_Init
     138  SampleApp_MessageMSGCB
       1  SampleApp_NwkState
      12  SampleApp_Periodic_DstAddr
     181  SampleApp_ProcessEvent
     116  SampleApp_SendFlashMessage
      97  SampleApp_SendPeriodicMessage
      12  SampleApp_SimpleDesc
       1  SampleApp_TaskID
       1  SampleApp_TransID
       6  SampleApp_epDesc

 
 793 bytes in segment BANKED_CODE
  36 bytes in segment BANK_RELAYS
  71 bytes in segment XDATA_ROM_C
  53 bytes in segment XDATA_Z
 
 829 bytes of CODE  memory
  71 bytes of CONST memory
  53 bytes of XDATA memory

Errors: none
Warnings: none
