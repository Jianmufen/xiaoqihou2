###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.30.1.41636 for 8051             19/Oct/2017  13:11:11 #
# Copyright 2004-2013 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#                                                                             #
#    Source file        =  D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\P #
#                          rojects\zstack\Samples\SampleApp\Source\hardware\a #
#                          dc.c                                               #
#    Command line       =  -f "D:\简宝山\寿县17-09-01                         #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wCoor #
#                          d.cfg" (-DCPU32MHZ -DROOT=__near_func              #
#                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                   #
#                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8         #
#                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)    #
#                          -f "D:\简宝山\寿县17-09-01                         #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\Tools\CC2530DB\f8wConf #
#                          ig.cfg" (-DZIGBEEPRO -DSECURE=0                    #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DLINK_STATUS_JITTER_MASK=0x007F                   #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116                           #
#                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const     #
#                          __code" -DGENERIC=__generic                        #
#                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000        #
#                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)   #
#                          -DREJOIN_POLL_RATE=440 "D:\简宝山\寿县17-09-01     #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\Source\hardware\adc.c" -D                #
#                          BUILD_ALL_DEVICES -D HOLD_AUTO_START -D            #
#                          LCD_SUPPORTED -D HAL_UART=FALSE -lC                #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\DemoEB\ #
#                          List\" -lA "D:\简宝山\寿县17-09-01                 #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\DemoEB\List\" --diag_suppress   #
#                          Pe001,Pa010 -o "D:\简宝山\寿县17-09-01             #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\DemoEB\Obj\" -e                 #
#                          --no_code_motion --debug --core=plain --dptr=16,1  #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "D:\简宝山\寿县17-09-01                         #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\" -I "D:\简宝山\寿县17-09-01    #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\Source\" -I                  #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\Sour #
#                          ce\hardware\" -I "D:\简宝山\寿县17-09-01           #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\ZMain\TI2530DB\" -I    #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\include\" -I                #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\hal\target\CC2530EB\" -I        #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\include\" -I                #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\high_level\" -I             #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\" -I        #
#                          "D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\ #
#                          Projects\zstack\Samples\SampleApp\CC2530DB\..\..\. #
#                          .\..\..\Components\mac\low_level\srf04\single_chip #
#                          \" -I "D:\简宝山\寿县17-09-01                      #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\mt\"  #
#                          -I "D:\简宝山\寿县17-09-01                         #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\osal\ #
#                          include\" -I "D:\简宝山\寿县17-09-01               #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\servi #
#                          ces\saddr\" -I "D:\简宝山\寿县17-09-01             #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\servi #
#                          ces\sdata\" -I "D:\简宝山\寿县17-09-01             #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\stack #
#                          \af\" -I "D:\简宝山\寿县17-09-01                   #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\stack #
#                          \nwk\" -I "D:\简宝山\寿县17-09-01                  #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\stack #
#                          \sapi\" -I "D:\简宝山\寿县17-09-01                 #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\stack #
#                          \sec\" -I "D:\简宝山\寿县17-09-01                  #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\stack #
#                          \sys\" -I "D:\简宝山\寿县17-09-01                  #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\stack #
#                          \zdo\" -I "D:\简宝山\寿县17-09-01                  #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\ #
#                          " -I "D:\简宝山\寿县17-09-01                       #
#                          25\程序\无线节点程序\code\Projects\zstack\Samples\ #
#                          SampleApp\CC2530DB\..\..\..\..\..\Components\zmac\ #
#                          f8w\" -Ohz --require_prototypes                    #
#    List file          =  D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\DemoEB\L #
#                          ist\adc.lst                                        #
#    Object file        =  D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\P #
#                          rojects\zstack\Samples\SampleApp\CC2530DB\DemoEB\O #
#                          bj\adc.r51                                         #
#                                                                             #
#                                                                             #
###############################################################################

D:\简宝山\寿县17-09-01 25\程序\无线节点程序\code\Projects\zstack\Samples\SampleApp\Source\hardware\adc.c
      1          #include "adc.h"

   \                                 In  segment SFR_AN, at 0x90
   \   union <unnamed> volatile __sfr _A_P1
   \                     _A_P1:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xa0
   \   union <unnamed> volatile __sfr _A_P2
   \                     _A_P2:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xf4
   \   unsigned char volatile __sfr P1SEL
   \                     P1SEL:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xfe
   \   unsigned char volatile __sfr P1DIR
   \                     P1DIR:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xff
   \   unsigned char volatile __sfr P2DIR
   \                     P2DIR:
   \   000000                DS 1

   \                                 In  segment XDATA_ROM_C, align 1
   \   static float const __xdata_rom temp_cal_table[15]
   \                     temp_cal_table:
   \   000000   00000000     DD 0H
   \   000004   00000000     DD 0H
   \   000008   00000000     DD 0H
   \   00000C   00000000     DD 0H
   \   000010   00000000     DD 0H
   \   000014   00000000     DD 0H
   \   000018   00000000     DD 0H
   \   00001C   00000000     DD 0H
   \   000020   00000000     DD 0H
   \   000024   00000000     DD 0H
   \   000028   00000000     DD 0H
   \   00002C   00000000     DD 0H
   \   000030   00000000     DD 0H
   \   000034   00000000     DD 0H
   \   000038   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \   static float const __xdata_rom RTD_TAB_PT100[15]
   \                     RTD_TAB_PT100:
   \   000000   F6A89842     DD 4298A8F6H
   \   000004   B89EA042     DD 42A09EB8H
   \   000008   3D8AA842     DD 42A88A3DH
   \   00000C   A470B042     DD 42B070A4H
   \   000010   EC51B842     DD 42B851ECH
   \   000014   142EC042     DD 42C02E14H
   \   000018   0000C842     DD 42C80000H
   \   00001C   CDCCCF42     DD 42CFCCCDH
   \   000020   7B94D742     DD 42D7947BH
   \   000024   0A57DF42     DD 42DF570AH
   \   000028   7B14E742     DD 42E7147BH
   \   00002C   CDCCEE42     DD 42EECCCDH
   \   000030   E17AF642     DD 42F67AE1H
   \   000034   D723FE42     DD 42FE23D7H
   \   000038   D7E30243     DD 4302E3D7H
      2          #include "spi.h"
      3          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      4          uint8 adc_state = START;  //AD测量状态
   \                     adc_state:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
      5              

   \                                 In  segment XDATA_Z, align 1, keep-with-next
      6          uint8 adc_done = FALSE;  //AD测量完成标志
   \                     adc_done:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
      7          
      8          //内部函数声明
      9          void ADC_Reset(void);
     10          void ADC_WriteByte(uint8 cmd);
     11          uint8 ADC_ReadByte(void);
     12          void ADC_DisSelect(void);
     13          void ADC_Select(void);
     14          void ADC_SpeedSet(void);
     15          
     16          
     17          /******************************************************************************
     18           *
     19           *               初始化部分
     20           *
     21           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     22          void ADC_Reset()  //复位AD7705
   \                     ADC_Reset:
     23          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     24            ADC_RST=0;  
   \   000004   C294         CLR     0x90.4
     25            asm("NOP");
   \   000006   00           NOP
     26            asm("NOP");
   \   000007   00           NOP
     27            asm("NOP");
   \   000008   00           NOP
     28            ADC_RST=1;
   \   000009   D294         SETB    0x90.4
     29            MicroWait(5);
   \   00000B                ; Setup parameters for call to function Onboard_wait
   \   00000B   7A05         MOV     R2,#0x5
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??Onboard_wait?relay ; Banked call to: Onboard_wait
     30          }
   \   000012   80..         SJMP    ??Subroutine5_0
   \   000014                REQUIRE _A_P1

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine5_0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     31           

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     32          void ADC_WriteByte(uint8 cmd)  //向AD7705写一个字节命令或数据
   \                     ADC_WriteByte:
     33          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
     34            SPI1_ReadWriteByte(cmd);  //使用SPI1写AD7705
   \   000005                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000005   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
     35          }
   \   000008   7F01         MOV     R7,#0x1
   \   00000A   02....       LJMP    ?BANKED_LEAVE_XDATA
     36          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
   \   000005                REQUIRE ??Subroutine5_0
   \   000005                ; // Fall through to label ??Subroutine5_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          uint8 ADC_ReadByte(void)
   \                     ADC_ReadByte:
     38          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     39            return SPI1_ReadWriteByte(0xFF); //SPI1写空指令读取AD7705
   \   000004                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000004   80..         SJMP    ?Subroutine0
     40          }
     41          
     42          //取消选择,释放SPI总线

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     43          void ADC_DisSelect(void)
   \                     ADC_DisSelect:
     44          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     45          	ADC_CS=1;
   \   000004   D2A1         SETB    0xa0.1
     46           	SPI1_ReadWriteByte(0xff);//提供额外的8个时钟
   \   000006                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000006   80..         SJMP    ?Subroutine0
   \   000008                REQUIRE _A_P2
     47          }
     48          
     49          //选择ad7705

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     50          void ADC_Select(void)
   \                     ADC_Select:
     51          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     52          	ADC_CS=0;
   \   000004   C2A1         CLR     0xa0.1
     53                  SPI1_ReadWriteByte(0xff);//提供额外的8个时钟
   \   000006                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000006   80..         SJMP    ?Subroutine0
   \   000008                REQUIRE _A_P2
     54          }
     55          
     56          //ad7705默认通信速率设定

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     57          void ADC_SpeedSet(void)
   \                     ADC_SpeedSet:
     58          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     59            SPI1_SetSpeed(15,0);  //1M
   \   000004                ; Setup parameters for call to function SPI1_SetSpeed
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   ??SPI1_SetSpeed?relay; Banked call to: SPI1_SetSpeed
     60          }
   \   00000B   80..         SJMP    ??Subroutine5_0
     61          
     62          /******************************************************************************
     63           *
     64           *  AD初始化，初始化SPI1，配置片选和复位引脚，
     65           *  复位AD7705，设置采样时钟，进行上电自校准等操作
     66           *
     67           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     68          void ADC_Init(void)  //AD7705初始化，包括初始化SPI1和复位I/O引脚配置
   \                     ADC_Init:
     69          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     70            SPI1_Init(15,0);  //SPI1初始化，速率1M
   \   000004                ; Setup parameters for call to function SPI1_Init
   \   000004   7A00         MOV     R2,#0x0
   \   000006   790F         MOV     R1,#0xf
   \   000008   12....       LCALL   ??SPI1_Init?relay    ; Banked call to: SPI1_Init
     71            
     72            P1SEL&=~(1<<0);   //P1_0通用输出，作为控制供电引脚
   \   00000B   53F4FE       ANL     0xf4,#0xfe
     73            P1DIR|=1<<0;
   \   00000E   43FE01       ORL     0xfe,#0x1
     74            ADC_CV=1;  //打开供电
   \   000011   D290         SETB    0x90.0
     75            
     76            P1SEL&=~(7<<1);  //P1_1-P1_3通用输出，作为4051的通道选择
   \   000013   53F4F1       ANL     0xf4,#0xf1
     77            P1DIR|=7<<1;
   \   000016   43FE0E       ORL     0xfe,#0xe
     78            CH_SEL(0); //4051初始选择通道0
   \   000019   C291         CLR     0x90.1
   \   00001B   C292         CLR     0x90.2
   \   00001D   C293         CLR     0x90.3
     79            
     80            P1SEL&=~(1<<4);  //P1_4配置为通用输出功能，用作AD7705复位控制引脚
   \   00001F   53F4EF       ANL     0xf4,#0xef
     81            P1DIR|=1<<4;
   \   000022   43FE10       ORL     0xfe,#0x10
     82            ADC_RST=1; //P1_4初始为1，不复位
   \   000025   D294         SETB    0x90.4
     83            
     84            P2DIR|=3<<1;  //P2_1和P2_2设置为通用输出，其中P2_1作为AD7705片选
   \   000027   43FF06       ORL     0xff,#0x6
     85            ADC_CS=1;  //不选通AD7705
   \   00002A   D2A1         SETB    0xa0.1
     86            
     87            /*ADC_Reset();        //复位AD7705
     88            ADC_WriteByte(ADC_CLKWR_REG);  //发送写时钟寄存器命令
     89            ADC_WriteByte(ADC_RATE);   //时钟配置
     90            ADC_WriteByte(ADC_SETWR_REG);  //发送写设置寄存器命令
     91            ADC_WriteByte(ADC_CONTROL);  //设置测量参数，自校准，单极性*/
     92          }
   \   00002C   80..         SJMP    ??Subroutine5_0
   \   00002E                REQUIRE P1SEL
   \   00002E                REQUIRE P1DIR
   \   00002E                REQUIRE _A_P1
   \   00002E                REQUIRE P2DIR
   \   00002E                REQUIRE _A_P2
     93          
     94          
     95          /******************************************************************************
     96           *
     97           *               读取通道的16位转换结果
     98           *
     99           */
    100          //uint16 ADC_ReadData(uint8 channel)
    101          //{
    102          //  uint8 i,data;
    103          //  uint16 result=0;
    104          //  
    105          //  ADC_SpeedSet(); //设置AD7705通信速率
    106          //  ADC_Select();  //选择AD7705
    107          //  
    108          //  for(i=0;i<200;i++)    //等待转换完成
    109          //  {
    110          //    ADC_WriteByte(ADC_STATE_REG|channel);  //读通信寄存器查看DRDY位，若为0表示转换完成，可以读取转换数据了
    111          //    data=ADC_ReadByte();
    112          //    if(!(data&0x80))
    113          //      break;  //DRDY为0表示转换完成
    114          //    else
    115          //    {
    116          //      MicroWait(1500);  //延时1.5ms
    117          //      WDT_Feed(); //喂狗，防止读取时间过长
    118          //      //HalUARTWrite(0,"w",strlen("w"));
    119          //    }
    120          //  }
    121          //  ADC_WriteByte(ADC_DATAR_REG|channel);   //读16位数据寄存器获得转换结果
    122          //  data=ADC_ReadByte();
    123          //  result=data;
    124          //  result<<=8;     //MSB first
    125          //  data=ADC_ReadByte();
    126          //  result|=data;
    127          //  
    128          //  ADC_DisSelect();  //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
    129          //  return result;
    130          //}
    131          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    132          uint16 ADC_ReadData(uint8 channel)
   \                     ADC_ReadData:
    133          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    134            uint8 i,data;
    135            uint16 result=0;
    136            
    137            ADC_SpeedSet(); //设置AD7705通信速率
   \   000007                ; Setup parameters for call to function SPI1_SetSpeed
   \   000007   7A00         MOV     R2,#0x0
   \   000009   790F         MOV     R1,#0xf
   \   00000B   12....       LCALL   ??SPI1_SetSpeed?relay; Banked call to: SPI1_SetSpeed
    138            ADC_Select();  //选择AD7705
   \   00000E                ; Setup parameters for call to function ADC_Select
   \   00000E   12....       LCALL   ??ADC_Select?relay   ; Banked call to: ADC_Select
    139            
    140            for(i=0;i<200;i++)    //等待转换完成
   \   000011   7EC8         MOV     R6,#-0x38
    141            {
    142              ADC_WriteByte(ADC_STATE_REG|channel);  //读通信寄存器查看DRDY位，若为0表示转换完成，可以读取转换数据了
   \                     ??ADC_ReadData_0:
   \   000013                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000013   7408         MOV     A,#0x8
   \   000015   4F           ORL     A,R7
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
    143              data=ADC_ReadByte();
   \   00001A                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   00001A   79FF         MOV     R1,#-0x1
   \   00001C   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
   \   00001F   E9           MOV     A,R1
    144              if(!(data&0x80))
   \   000020   A2E7         MOV     C,0xE0 /* A   */.7
   \   000022   500E         JNC     ??ADC_ReadData_1
    145                break;  //DRDY为0表示转换完成
    146              else
    147              {
    148                MicroWait(1500);  //延时1.5ms
   \   000024                ; Setup parameters for call to function Onboard_wait
   \   000024   7ADC         MOV     R2,#-0x24
   \   000026   7B05         MOV     R3,#0x5
   \   000028   12....       LCALL   ??Onboard_wait?relay ; Banked call to: Onboard_wait
    149                WDT_Feed();  //喂狗，防止读取时间过长
   \   00002B                ; Setup parameters for call to function WDT_Feed
   \   00002B   12....       LCALL   ??WDT_Feed?relay     ; Banked call to: WDT_Feed
    150                //HalUARTWrite(0,"w",strlen("w"));
    151              }
    152            }
   \   00002E   1E           DEC     R6
   \   00002F   EE           MOV     A,R6
   \   000030   70E1         JNZ     ??ADC_ReadData_0
    153            ADC_WriteByte(ADC_DATAR_REG|channel);   //读16位数据寄存器获得转换结果
   \                     ??ADC_ReadData_1:
   \   000032                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000032   7438         MOV     A,#0x38
   \   000034   4F           ORL     A,R7
   \   000035   F9           MOV     R1,A
   \   000036   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
    154            data=ADC_ReadByte();
   \   000039                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000039   79FF         MOV     R1,#-0x1
   \   00003B   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
   \   00003E   E9           MOV     A,R1
   \   00003F   FE           MOV     R6,A
    155            result=data;
    156            result<<=8;     //MSB first
    157            data=ADC_ReadByte();
   \   000040                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000040   79FF         MOV     R1,#-0x1
   \   000042   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
   \   000045   E9           MOV     A,R1
   \   000046   F5..         MOV     ?V0,A
    158            result|=data;
    159            
    160            ADC_DisSelect();  //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
   \   000048                ; Setup parameters for call to function ADC_DisSelect
   \   000048   12....       LCALL   ??ADC_DisSelect?relay; Banked call to: ADC_DisSelect
    161            return result;
   \   00004B   EE           MOV     A,R6
   \   00004C   AA..         MOV     R2,?V0
   \   00004E   FB           MOV     R3,A
   \   00004F   7F02         MOV     R7,#0x2
   \   000051   02....       LJMP    ?BANKED_LEAVE_XDATA
    162          }
    163          /******************************************************************************
    164           *
    165           *  启动一次AD转换，
    166           *  switch_ch-4051开关通道选择（0-7）
    167           *  channel-AD7705测量通道（0或1），gain-本次测量放大倍数为 2^gain，buffer-为TRUE使用缓冲器
    168           *
    169           */
    170          //void ADC_MeasureStart(uint8 switch_ch,uint8 channel,uint8 gain,uint8 buffer)
    171          //{
    172          //  //ADC_CV=1;  //打开供电
    173          //  ADC_SpeedSet(); //设置AD7705通信速率
    174          //  ADC_Select();  //选择AD7705
    175          //  
    176          //  CH_SEL(switch_ch);  //开关通道选择
    177          //  //MicroWait(10000);  //等待4051稳定
    178          //  //WDT_Feed(); //喂狗
    179          //  ADC_Reset();        //复位AD7705
    180          //  ADC_WriteByte(ADC_CLKWR_REG|channel);  //发送写时钟寄存器命令，并设置测量通道
    181          //  ADC_WriteByte(ADC_RATE);   //时钟配置
    182          //  ADC_WriteByte(ADC_SETWR_REG|channel);  //发送写设置寄存器命令
    183          //  ADC_WriteByte(ADC_CONTROL|(gain<<3)|(buffer<<1));  //设置测量参数，自校准，增益，是否需要缓冲器
    184          //  
    185          //  ADC_DisSelect(); //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
    186          //}
    187          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          void ADC_MeasureStart(uint8 switch_ch,uint8 channel,uint8 gain,uint8 buffer)
   \                     ADC_MeasureStart:
    189          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000   74F3         MOV     A,#-0xd
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 13
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FE           MOV     R6,A
   \   000007   EA           MOV     A,R2
   \   000008   FF           MOV     R7,A
   \   000009   8B..         MOV     ?V0,R3
   \   00000B   8C..         MOV     ?V1,R4
    190            ADC_CV=1;  //打开供电
   \   00000D   D290         SETB    0x90.0
    191            ADC_SpeedSet(); //设置AD7705通信速率
   \   00000F                ; Setup parameters for call to function SPI1_SetSpeed
   \   00000F   7A00         MOV     R2,#0x0
   \   000011   790F         MOV     R1,#0xf
   \   000013   12....       LCALL   ??SPI1_SetSpeed?relay; Banked call to: SPI1_SetSpeed
    192            ADC_Select();  //选择AD7705
   \   000016                ; Setup parameters for call to function ADC_Select
   \   000016   12....       LCALL   ??ADC_Select?relay   ; Banked call to: ADC_Select
    193            
    194            CH_SEL(switch_ch);  //开关通道选择
   \   000019   EE           MOV     A,R6
   \   00001A   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001C   A2E0         MOV     C,0xE0 /* A   */.0
   \   00001E   9291         MOV     0x90.1,C
   \   000020   A2E1         MOV     C,0xE0 /* A   */.1
   \   000022   A2E1         MOV     C,0xE0 /* A   */.1
   \   000024   9292         MOV     0x90.2,C
   \   000026   A2E2         MOV     C,0xE0 /* A   */.2
   \   000028   A2E2         MOV     C,0xE0 /* A   */.2
   \   00002A   9293         MOV     0x90.3,C
    195            /*MicroWait(5000);*/  //等待4051稳定  //取消，有时候会造成标准电阻测量值错误
    196          //  MicroWait(3000);
    197            ADC_Reset();        //复位AD7705
   \   00002C                ; Setup parameters for call to function ADC_Reset
   \   00002C   12....       LCALL   ??ADC_Reset?relay    ; Banked call to: ADC_Reset
    198            ADC_WriteByte(ADC_CLKWR_REG|channel);  //发送写时钟寄存器命令，并设置测量通道
   \   00002F                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   00002F   7420         MOV     A,#0x20
   \   000031   4F           ORL     A,R7
   \   000032   F9           MOV     R1,A
   \   000033   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
    199            ADC_WriteByte(ADC_RATE);   //时钟配置
   \   000036                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000036   790C         MOV     R1,#0xc
   \   000038   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
    200            ADC_WriteByte(ADC_SETWR_REG|channel);  //发送写设置寄存器命令
   \   00003B                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   00003B   7410         MOV     A,#0x10
   \   00003D   4F           ORL     A,R7
   \   00003E   F9           MOV     R1,A
   \   00003F   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
    201            ADC_WriteByte(ADC_CONTROL|(gain<<3)|(buffer<<1));  //设置测量参数，自校准，增益，是否需要缓冲器
   \   000042                ; Setup parameters for call to function SPI1_ReadWriteByte
   \   000042   E5..         MOV     A,?V1
   \   000044   C3           CLR     C
   \   000045   33           RLC     A
   \   000046   F8           MOV     R0,A
   \   000047   E5..         MOV     A,?V0
   \   000049   33           RLC     A
   \   00004A   33           RLC     A
   \   00004B   33           RLC     A
   \   00004C   54F8         ANL     A,#0xf8
   \   00004E   48           ORL     A,R0
   \   00004F   4444         ORL     A,#0x44
   \   000051   F9           MOV     R1,A
   \   000052   12....       LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
    202            
    203            ADC_DisSelect(); //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
   \   000055                ; Setup parameters for call to function ADC_DisSelect
   \   000055   12....       LCALL   ??ADC_DisSelect?relay; Banked call to: ADC_DisSelect
    204          }
   \   000058   7F05         MOV     R7,#0x5
   \   00005A   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00005D                REQUIRE _A_P1
    205          
    206          
    207          
    208          /******************************************************************************
    209           *
    210           *               传感器测量计算部分
    211           *
    212           */
    213          //计算辐射值,电压单位为mv

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    214          float CalculateRadiation(float voltage,float RadCoefficient)
   \                     CalculateRadiation:
    215          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000   74EC         MOV     A,#-0x14
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 20
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0,R2
   \   000007   8B..         MOV     ?V1,R3
   \   000009   8C..         MOV     ?V2,R4
   \   00000B   8D..         MOV     ?V3,R5
    216            voltage*=1000;
   \   00000D   90....       MOV     DPTR,#__Constant_447a0000
   \   000010   78..         MOV     R0,#?V4
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V0
   \   000017   79..         MOV     R1,#?V4
   \   000019   12....       LCALL   ?FLT_MUL
   \   00001C   7414         MOV     A,#0x14
   \   00001E   12....       LCALL   ?XSTACK_DISP0_8
   \   000021   78..         MOV     R0,#?V4
   \   000023   12....       LCALL   ?L_MOV_X
    217            
    218            if(RadCoefficient<=0)
   \   000026   90....       MOV     DPTR,#__Constant_1
   \   000029   78..         MOV     R0,#?V8
   \   00002B   12....       LCALL   ?L_MOV_X
   \   00002E   78..         MOV     R0,#?V4
   \   000030   79..         MOV     R1,#?V8
   \   000032   12....       LCALL   ?FLT_LT
   \   000035   500C         JNC     ??CalculateRadiation_0
    219            {
    220              RadCoefficient=10;
   \   000037   75..00       MOV     ?V4,#0x0
   \   00003A   75..00       MOV     ?V5,#0x0
   \   00003D   75..20       MOV     ?V6,#0x20
   \   000040   75..41       MOV     ?V7,#0x41
    221            }
    222            
    223            voltage/=RadCoefficient;
   \                     ??CalculateRadiation_0:
   \   000043   78..         MOV     R0,#?V0
   \   000045   79..         MOV     R1,#?V4
   \   000047   12....       LCALL   ?FLT_DIV
    224            
    225            voltage=MAX(voltage,0.0);
   \   00004A   90....       MOV     DPTR,#__Constant_0
   \   00004D   78..         MOV     R0,#?V4
   \   00004F   12....       LCALL   ?L_MOV_X
   \   000052   78..         MOV     R0,#?V0
   \   000054   79..         MOV     R1,#?V4
   \   000056   12....       LCALL   ?FLT_LT
   \   000059   500E         JNC     ??CalculateRadiation_1
   \   00005B   75..00       MOV     ?V0,#0x0
   \   00005E   75..00       MOV     ?V1,#0x0
   \   000061   75..00       MOV     ?V2,#0x0
   \   000064   75..00       MOV     ?V3,#0x0
   \   000067   801D         SJMP    ??CalculateRadiation_2
    226            voltage=MIN(voltage,5000.0);
   \                     ??CalculateRadiation_1:
   \   000069   90....       MOV     DPTR,#__Constant_459c4000
   \   00006C   78..         MOV     R0,#?V4
   \   00006E   12....       LCALL   ?L_MOV_X
   \   000071   78..         MOV     R0,#?V0
   \   000073   79..         MOV     R1,#?V4
   \   000075   12....       LCALL   ?FLT_LT
   \   000078   400C         JC      ??CalculateRadiation_2
   \   00007A   75..00       MOV     ?V0,#0x0
   \   00007D   75..40       MOV     ?V1,#0x40
   \   000080   75..9C       MOV     ?V2,#-0x64
   \   000083   75..45       MOV     ?V3,#0x45
    227            
    228            return voltage;
   \                     ??CalculateRadiation_2:
   \   000086   AA..         MOV     R2,?V0
   \   000088   AB..         MOV     R3,?V1
   \   00008A   AC..         MOV     R4,?V2
   \   00008C   AD..         MOV     R5,?V3
   \   00008E   7F0C         MOV     R7,#0xc
   \   000090   02....       LJMP    ?BANKED_LEAVE_XDATA
    229          }
    230          
    231          //计算PT100温度值

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          float CalculateTemp(float fr)
   \                     CalculateTemp:
    233          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000                REQUIRE ?V6
   \   000000                REQUIRE ?V7
   \   000000                REQUIRE ?V8
   \   000000                REQUIRE ?V9
   \   000000                REQUIRE ?V10
   \   000000                REQUIRE ?V11
   \   000000                REQUIRE ?V12
   \   000000                REQUIRE ?V13
   \   000000                REQUIRE ?V14
   \   000000                REQUIRE ?V15
   \   000000   74E8         MOV     A,#-0x18
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 24
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V4,R2
   \   000007   8B..         MOV     ?V5,R3
   \   000009   8C..         MOV     ?V6,R4
   \   00000B   8D..         MOV     ?V7,R5
    234          	float fTem;
    235          	float fL;
    236          	float fH;
    237                  float cal=0;  //修正值
    238          	int iTem;
    239          	uint8 cbottom,ctop;
    240          	uint8 i;
    241                  
    242                  cal=temp_cal_table[0]/100;
    243          	if(fr<RTD_TAB_PT100[0]+cal)   //添加修正值
   \   00000D   90....       MOV     DPTR,#__Constant_4298a8f6
   \   000010   78..         MOV     R0,#?V0
   \   000012   12....       LCALL   ?L_MOV_X
   \   000015   78..         MOV     R0,#?V4
   \   000017   79..         MOV     R1,#?V0
   \   000019   12....       LCALL   ?FLT_LT
   \   00001C   500B         JNC     ??CalculateTemp_0
    244          	{
    245          		return -60.0;
   \   00001E   7A00         MOV     R2,#0x0
   \   000020   7B00         MOV     R3,#0x0
   \   000022   7C70         MOV     R4,#0x70
   \   000024   7DC2         MOV     R5,#-0x3e
   \   000026   02....       LJMP    ??CalculateTemp_1 & 0xFFFF
    246          	}
    247                  cal=temp_cal_table[14]/100;
    248          	if(fr>RTD_TAB_PT100[14]+cal)   //添加修正值
   \                     ??CalculateTemp_0:
   \   000029   90....       MOV     DPTR,#__Constant_4302e3d8
   \   00002C   78..         MOV     R0,#?V0
   \   00002E   12....       LCALL   ?L_MOV_X
   \   000031   78..         MOV     R0,#?V4
   \   000033   79..         MOV     R1,#?V0
   \   000035   12....       LCALL   ?FLT_GE
   \   000038   500B         JNC     ??CalculateTemp_2
    249          	{
    250          		return 80.0;
   \   00003A   7A00         MOV     R2,#0x0
   \   00003C   7B00         MOV     R3,#0x0
   \   00003E   7CA0         MOV     R4,#-0x60
   \   000040   7D42         MOV     R5,#0x42
   \   000042   02....       LJMP    ??CalculateTemp_1 & 0xFFFF
    251          	}
    252          	cbottom=0;
   \                     ??CalculateTemp_2:
   \   000045   7E00         MOV     R6,#0x0
    253          	ctop=14;
   \   000047   7F0E         MOV     R7,#0xe
    254          	for(i=7;(ctop-cbottom)!=1;)
   \   000049   7A07         MOV     R2,#0x7
   \   00004B   8011         SJMP    ??CalculateTemp_3
    255          	{
    256                          cal=temp_cal_table[i]/100;  //添加修正值
    257          		if(fr<RTD_TAB_PT100[i]+cal)
    258          		{
    259          			ctop=i;
   \                     ??CalculateTemp_4:
   \   00004D   EA           MOV     A,R2
   \   00004E   FF           MOV     R7,A
    260          			i=(ctop+cbottom)/2;
   \                     ??CalculateTemp_5:
   \   00004F   2E           ADD     A,R6
   \   000050   F8           MOV     R0,A
   \   000051   E4           CLR     A
   \   000052   3400         ADDC    A,#0x0
   \   000054   F9           MOV     R1,A
   \   000055   7A02         MOV     R2,#0x2
   \   000057   7B00         MOV     R3,#0x0
   \   000059   12....       LCALL   ?S_DIV_MOD
   \   00005C   E8           MOV     A,R0
   \   00005D   FA           MOV     R2,A
    261          		}
   \                     ??CalculateTemp_3:
   \   00005E   8F..         MOV     ?V0,R7
   \   000060   8E..         MOV     ?V2,R6
   \   000062   E5..         MOV     A,?V0
   \   000064   C3           CLR     C
   \   000065   95..         SUBB    A,?V2
   \   000067   F8           MOV     R0,A
   \   000068   95E0         SUBB    A,0xE0 /* A   */
   \   00006A   F9           MOV     R1,A
   \   00006B   7401         MOV     A,#0x1
   \   00006D   68           XRL     A,R0
   \   00006E   7001         JNZ     ??CalculateTemp_6
   \   000070   E9           MOV     A,R1
   \                     ??CalculateTemp_6:
   \   000071   607D         JZ      ??CalculateTemp_7
   \   000073   8A..         MOV     ?V0,R2
   \   000075   75..00       MOV     ?V1,#0x0
   \   000078   7402         MOV     A,#0x2
   \   00007A   78..         MOV     R0,#?V0
   \   00007C   12....       LCALL   ?S_SHL
   \   00007F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   000082   12....       LCALL   ?L_MOV_X
   \   000085   90....       MOV     DPTR,#__Constant_42c80000
   \   000088   78..         MOV     R0,#?V8
   \   00008A   12....       LCALL   ?L_MOV_X
   \   00008D   78..         MOV     R0,#?V0
   \   00008F   79..         MOV     R1,#?V8
   \   000091   12....       LCALL   ?FLT_DIV
   \   000094   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_2:
   \   000097   12....       LCALL   ?L_MOV_X
   \   00009A   78..         MOV     R0,#?V8
   \   00009C   79..         MOV     R1,#?V0
   \   00009E   12....       LCALL   ?FLT_ADD
   \   0000A1   78..         MOV     R0,#?V4
   \   0000A3   79..         MOV     R1,#?V8
   \   0000A5   12....       LCALL   ?FLT_LT
   \   0000A8   40A3         JC      ??CalculateTemp_4
    262          		else if(fr>RTD_TAB_PT100[i]+cal)
   \   0000AA   8A..         MOV     ?V8,R2
   \   0000AC   75..00       MOV     ?V9,#0x0
   \   0000AF   7402         MOV     A,#0x2
   \   0000B1   78..         MOV     R0,#?V8
   \   0000B3   12....       LCALL   ?S_SHL
   \   0000B6   74..         MOV     A,#RTD_TAB_PT100 & 0xff
   \   0000B8   2C           ADD     A,R4
   \   0000B9   F582         MOV     DPL,A
   \   0000BB   74..         MOV     A,#(RTD_TAB_PT100 >> 8) & 0xff
   \   0000BD   35..         ADDC    A,?V9
   \   0000BF   F583         MOV     DPH,A
   \   0000C1   78..         MOV     R0,#?V8
   \   0000C3   12....       LCALL   ?L_MOV_X
   \   0000C6   78..         MOV     R0,#?V8
   \   0000C8   79..         MOV     R1,#?V0
   \   0000CA   12....       LCALL   ?FLT_ADD
   \   0000CD   78..         MOV     R0,#?V8
   \   0000CF   79..         MOV     R1,#?V4
   \   0000D1   12....       LCALL   ?FLT_LT
   \   0000D4   EA           MOV     A,R2
   \   0000D5   5008         JNC     ??CalculateTemp_8
    263          		{
    264          			cbottom=i;
   \   0000D7   FE           MOV     R6,A
    265          			i=(ctop+cbottom)/2;
   \   0000D8   8F..         MOV     ?V0,R7
   \   0000DA   E5..         MOV     A,?V0
   \   0000DC   02....       LJMP    ??CalculateTemp_5 & 0xFFFF
    266          		}
    267          		else
    268          		{
    269          			iTem=(unsigned int)i*10-60;
    270          			fTem=(float)iTem;
    271          			return fTem;
   \                     ??CalculateTemp_8:
   \   0000DF   12....       LCALL   ?Subroutine1 & 0xFFFF
    272          		}
    273          	}
   \                     ??CrossCallReturnLabel_0:
   \   0000E2   12....       LCALL   ?L_TO_FLT
   \   0000E5   AA..         MOV     R2,?V0
   \   0000E7   AB..         MOV     R3,?V1
   \   0000E9   AC..         MOV     R4,?V2
   \   0000EB   AD..         MOV     R5,?V3
   \   0000ED   02....       LJMP    ??CalculateTemp_1 & 0xFFFF
   \                     ??CalculateTemp_7:
   \   0000F0   8E..         MOV     ?V0,R6
   \   0000F2   75..00       MOV     ?V1,#0x0
   \   0000F5   7402         MOV     A,#0x2
   \   0000F7   78..         MOV     R0,#?V0
   \   0000F9   12....       LCALL   ?S_SHL
   \   0000FC   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   0000FF   12....       LCALL   ?L_MOV_X
   \   000102   90....       MOV     DPTR,#__Constant_42c80000
   \   000105   78..         MOV     R0,#?V8
   \   000107   12....       LCALL   ?L_MOV_X
   \   00010A   78..         MOV     R0,#?V0
   \   00010C   79..         MOV     R1,#?V8
   \   00010E   12....       LCALL   ?FLT_DIV
   \   000111   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_3:
   \   000114   12....       LCALL   ?L_MOV_X
   \   000117   78..         MOV     R0,#?V0
   \   000119   79..         MOV     R1,#?V8
   \   00011B   12....       LCALL   ?FLT_ADD
   \   00011E   8F..         MOV     ?V8,R7
   \   000120   75..00       MOV     ?V9,#0x0
   \   000123   7402         MOV     A,#0x2
   \   000125   78..         MOV     R0,#?V8
   \   000127   12....       LCALL   ?S_SHL
   \   00012A   AC..         MOV     R4,?V8
   \   00012C   AD..         MOV     R5,?V9
   \   00012E   78..         MOV     R0,#?V4
   \   000130   79..         MOV     R1,#?V0
   \   000132   12....       LCALL   ?FLT_SUB
   \   000135   90....       MOV     DPTR,#__Constant_41200000
   \   000138   78..         MOV     R0,#?V8
   \   00013A   12....       LCALL   ?L_MOV_X
   \   00013D   78..         MOV     R0,#?V4
   \   00013F   79..         MOV     R1,#?V8
   \   000141   12....       LCALL   ?FLT_MUL
   \   000144   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000147   78..         MOV     R0,#?V12
   \   000149   12....       LCALL   ?L_MOV_X
   \   00014C   90....       MOV     DPTR,#__Constant_42c80000
   \   00014F   78..         MOV     R0,#?V8
   \   000151   12....       LCALL   ?L_MOV_X
   \   000154   78..         MOV     R0,#?V12
   \   000156   79..         MOV     R1,#?V8
   \   000158   12....       LCALL   ?FLT_DIV
   \   00015B   12....       LCALL   ?Subroutine2 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   00015E   12....       LCALL   ?L_MOV_X
   \   000161   78..         MOV     R0,#?V12
   \   000163   79..         MOV     R1,#?V8
   \   000165   12....       LCALL   ?FLT_ADD
   \   000168   78..         MOV     R0,#?V12
   \   00016A   79..         MOV     R1,#?V0
   \   00016C   12....       LCALL   ?FLT_SUB
   \   00016F   78..         MOV     R0,#?V4
   \   000171   79..         MOV     R1,#?V12
   \   000173   12....       LCALL   ?FLT_DIV
   \   000176   EA           MOV     A,R2
   \   000177   12....       LCALL   ?Subroutine1 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   00017A   12....       LCALL   ?L_TO_FLT
   \   00017D   78..         MOV     R0,#?V4
   \   00017F   79..         MOV     R1,#?V0
   \   000181   12....       LCALL   ?FLT_ADD
   \   000184   AA..         MOV     R2,?V4
   \   000186   AB..         MOV     R3,?V5
   \   000188   AC..         MOV     R4,?V6
   \   00018A   AD..         MOV     R5,?V7
   \                     ??CalculateTemp_1:
   \   00018C   7F10         MOV     R7,#0x10
   \   00018E   02....       LJMP    ?BANKED_LEAVE_XDATA
    274          	iTem=(int)i*10-60;
    275          	fL=RTD_TAB_PT100[cbottom]+temp_cal_table[cbottom]/100;
    276          	fH=RTD_TAB_PT100[ctop]+temp_cal_table[ctop]/100;
    277          	fTem=(((fr-fL)*10)/(fH-fL))+iTem;
    278          	return fTem;
    279          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   AC..         MOV     R4,?V0
   \   000002   AD..         MOV     R5,?V1
   \   000004   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   000007   78..         MOV     R0,#?V0
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   74..         MOV     A,#temp_cal_table & 0xff
   \   000002   2C           ADD     A,R4
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(temp_cal_table >> 8) & 0xff
   \   000007   3D           ADDC    A,R5
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   74..         MOV     A,#RTD_TAB_PT100 & 0xff
   \   000002   2C           ADD     A,R4
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(RTD_TAB_PT100 >> 8) & 0xff
   \   000007   3D           ADDC    A,R5
   \   000008   F583         MOV     DPH,A
   \   00000A   78..         MOV     R0,#?V8
   \   00000C   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   75F00A       MOV     B,#0xa
   \   000003   A4           MUL     AB
   \   000004   24C4         ADD     A,#-0x3c
   \   000006   F5..         MOV     ?V0,A
   \   000008   E5F0         MOV     A,B
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   F5..         MOV     ?V1,A
   \   00000E   33           RLC     A
   \   00000F   95E0         SUBB    A,0xE0 /* A   */
   \   000011   F5..         MOV     ?V2,A
   \   000013   F5..         MOV     ?V3,A
   \   000015   78..         MOV     R0,#?V0
   \   000017   22           RET

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_447a0000:
   \   000000   00007A44     DD 447A0000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_1:
   \   000000   01000000     DD 1H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_0:
   \   000000   00000000     DD 0H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_459c4000:
   \   000000   00409C45     DD 459C4000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4298a8f6:
   \   000000   F6A89842     DD 4298A8F6H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_4302e3d8:
   \   000000   D8E30243     DD 4302E3D8H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_42c80000:
   \   000000   0000C842     DD 42C80000H

   \                                 In  segment XDATA_ROM_C, align 1
   \                     __Constant_41200000:
   \   000000   00002041     DD 41200000H

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_Reset?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_Reset

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_WriteByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_WriteByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_ReadByte?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_ReadByte

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_DisSelect?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_DisSelect

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_Select?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_Select

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_SpeedSet?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_SpeedSet

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_ReadData?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_ReadData

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??ADC_MeasureStart?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    ADC_MeasureStart

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CalculateRadiation?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CalculateRadiation

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??CalculateTemp?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    CalculateTemp
    280          
    281          /*
    282          //计算DHC3类型的温度值
    283          float CalculateTemp_DHC3(float fr)
    284          {
    285          	float fTem;
    286          	float fL;
    287          	float fH;
    288          	int iTem;
    289          	uint8 cbottom,ctop;
    290          	uint8 i;
    291          	if(fr<RTD_TAB_PT100_DHC3[0])
    292          	{
    293          		return -60.0;
    294          	}
    295          	if(fr>RTD_TAB_PT100_DHC3[12])
    296          	{
    297          		return 60.0;
    298          	}
    299          	cbottom=0;
    300          	ctop=12;
    301          	for(i=6;(ctop-cbottom)!=1;)
    302          	{
    303          		if(fr<RTD_TAB_PT100_DHC3[i])
    304          		{
    305          			ctop=i;
    306          			i=(ctop+cbottom)/2;
    307          		}
    308          		else if(fr>RTD_TAB_PT100_DHC3[i])
    309          		{
    310          			cbottom=i;
    311          			i=(ctop+cbottom)/2;
    312          		}
    313          		else
    314          		{
    315          			iTem=(unsigned int)i*10-60;
    316          			fTem=(float)iTem;
    317          			return fTem;
    318          		}
    319          	}
    320          	iTem=(int)i*10-60;
    321          	fL=RTD_TAB_PT100_DHC3[cbottom];
    322          	fH=RTD_TAB_PT100_DHC3[ctop];
    323          	fTem=(((fr-fL)*10)/(fH-fL))+iTem;
    324          	return fTem;
    325          }
    326          */
    327          
    328          /*
    329          //计算土壤水分值
    330          float CalculateSand(float voltage)
    331          {
    332          	float fTem;
    333          	float fL;
    334          	float fH;
    335          	int iTem;
    336          	uint8 cbottom,ctop;
    337          	uint8 i;
    338          	if(voltage<SAND[0])
    339          	{
    340          		return 0;
    341          	}
    342          	if(voltage>SAND[20])
    343          	{
    344          		return 100;
    345          	}
    346          	cbottom=0;
    347          	ctop=20;
    348          	for(i=10;(ctop-cbottom)!=1;)
    349          	{
    350          		if(voltage<SAND[i])
    351          		{
    352          			ctop=i;
    353          			i=(ctop+cbottom)/2;
    354          		}
    355          		else if(voltage>SAND[i])
    356          		{
    357          			cbottom=i;
    358          			i=(ctop+cbottom)/2;
    359          		}
    360          		else
    361          		{
    362          			iTem=(unsigned int)i*5;
    363          			fTem=(float)iTem;
    364          			return fTem;
    365          		}
    366          	}
    367          	iTem=(unsigned int)i*5;
    368          	fL=SAND[cbottom];
    369          	fH=SAND[ctop];
    370          	fTem=(((voltage-fL)*5)/(fH-fL))+iTem;
    371          	return fTem;
    372          }
    373          */
    374          
    375          
    376          
    377          
    378          
    379          
    380          
    381          
    382          
    383          
    384          
    385          /**************************************************************************************************
    386          **************************************************************************************************/
    387          

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     13   ADC_DisSelect
        2      0   -> SPI1_ReadWriteByte
      2      0   ADC_Init
        2      0   -> SPI1_Init
      0     13   ADC_MeasureStart
        0     13   -> ADC_DisSelect
        0     13   -> ADC_Reset
        0     13   -> ADC_Select
        0     13   -> SPI1_ReadWriteByte
        0     13   -> SPI1_SetSpeed
      2      0   ADC_ReadByte
        2      0   -> SPI1_ReadWriteByte
      0     10   ADC_ReadData
        0     10   -> ADC_DisSelect
        0     10   -> ADC_Select
        0     10   -> Onboard_wait
        0     10   -> SPI1_ReadWriteByte
        0     10   -> SPI1_SetSpeed
        0     10   -> WDT_Feed
      2     13   ADC_Reset
        2      0   -> Onboard_wait
      2     13   ADC_Select
        2      0   -> SPI1_ReadWriteByte
      2      0   ADC_SpeedSet
        2      0   -> SPI1_SetSpeed
      0      9   ADC_WriteByte
        0      9   -> SPI1_ReadWriteByte
      0     24   CalculateRadiation
      0     24   CalculateTemp


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ??ADC_DisSelect?relay
       6  ??ADC_Init?relay
       6  ??ADC_MeasureStart?relay
       6  ??ADC_ReadByte?relay
       6  ??ADC_ReadData?relay
       6  ??ADC_Reset?relay
       6  ??ADC_Select?relay
       6  ??ADC_SpeedSet?relay
       6  ??ADC_WriteByte?relay
       6  ??CalculateRadiation?relay
       6  ??CalculateTemp?relay
       7  ??Subroutine5_0
       5  ?Subroutine0
      24  ?Subroutine1
      13  ?Subroutine2
      10  ?Subroutine3
      11  ?Subroutine4
       8  ADC_DisSelect
      46  ADC_Init
      93  ADC_MeasureStart
       6  ADC_ReadByte
      84  ADC_ReadData
      20  ADC_Reset
       8  ADC_Select
      13  ADC_SpeedSet
      13  ADC_WriteByte
     147  CalculateRadiation
     401  CalculateTemp
       1  P1DIR
       1  P1SEL
       1  P2DIR
      60  RTD_TAB_PT100
       1  _A_P1
       1  _A_P2
       4  __Constant_0
       4  __Constant_1
       4  __Constant_41200000
       4  __Constant_4298a8f6
       4  __Constant_42c80000
       4  __Constant_4302e3d8
       4  __Constant_447a0000
       4  __Constant_459c4000
       1  adc_done
       1  adc_state
      60  temp_cal_table

 
 909 bytes in segment BANKED_CODE
  66 bytes in segment BANK_RELAYS
   5 bytes in segment SFR_AN
 152 bytes in segment XDATA_ROM_C
   2 bytes in segment XDATA_Z
 
 975 bytes of CODE  memory
 120 bytes of CONST memory (+ 32 bytes shared)
   0 bytes of DATA  memory (+  5 bytes shared)
   2 bytes of XDATA memory

Errors: none
Warnings: none
