///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.30.1.41636 for 8051            27/May/2017  14:45:06 /
// Copyright 2004-2013 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//                                                                            /
//    Source file        =  E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\Source\ha /
//                          rdware\adc.c                                      /
//    Command line       =  -f E:\工作\上海长望\项目\宿州农田小气候\code20170 /
//                          412\code\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wCoord.cfg           /
//                          (-DCPU32MHZ -DROOT=__near_func                    /
//                          -DMAC_CFG_APP_PENDING_QUEUE=TRUE                  /
//                          -DMAC_CFG_TX_DATA_MAX=5 -DMAC_CFG_TX_MAX=8        /
//                          -DMAC_CFG_RX_MAX=5 -DZDO_COORDINATOR -DRTR_NWK)   /
//                          -f E:\工作\上海长望\项目\宿州农田小气候\code20170 /
//                          412\code\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\Tools\CC2530DB\f8wConfig.cfg          /
//                          (-DZIGBEEPRO -DSECURE=0 -DZG_SECURE_DYNAMIC=0     /
//                          -DREFLECTOR -DDEFAULT_CHANLIST=0x00000800         /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFF1                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 E:\工作\上海长望\项目\宿州 /
//                          农田小气候\code20170412\code\Projects\zstack\Samp /
//                          les\SampleApp\Source\hardware\adc.c -D ZTOOL_P1   /
//                          -D HAL_PA_LNA -D NV_INIT -D NV_RESTORE -D         /
//                          xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D       /
//                          xLCD_SUPPORTED=DEBUG -lC                          /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB\List\ -lA                           /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB\List\ --diag_suppress Pe001,Pa010   /
//                          -o E:\工作\上海长望\项目\宿州农田小气候\code20170 /
//                          412\code\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\CoordinatorEB\Obj\ -e --no_code_motion         /
//                          --debug --core=plain --dptr=16,1                  /
//                          --data_model=large --code_model=banked            /
//                          --calling_convention=xdata_reentrant              /
//                          --place_constants=data_rom --nr_virtual_regs 8    /
//                          -I E:\工作\上海长望\项目\宿州农田小气候\code20170 /
//                          412\code\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\ -I E:\工作\上海长望\项目\宿州农田小气候\code2 /
//                          0170412\code\Projects\zstack\Samples\SampleApp\CC /
//                          2530DB\..\Source\ -I E:\工作\上海长望\项目\宿州农 /
//                          田小气候\code20170412\code\Projects\zstack\Sample /
//                          s\SampleApp\CC2530DB\..\Source\hardware\ -I       /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\ZMain\TI2530DB\ -I                       /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\ZMain\ -I E:\工作\上海长望\项目\宿州农田 /
//                          小气候\code20170412\code\Projects\zstack\Samples\ /
//                          SampleApp\CC2530DB\..\..\..\..\..\Components\hal\ /
//                          include\ -I E:\工作\上海长望\项目\宿州农田小气候\ /
//                          code20170412\code\Projects\zstack\Samples\SampleA /
//                          pp\CC2530DB\..\..\..\..\..\Components\hal\target\ /
//                          CC2530EB\ -I E:\工作\上海长望\项目\宿州农田小气候 /
//                          \code20170412\code\Projects\zstack\Samples\Sample /
//                          App\CC2530DB\..\..\..\..\..\Components\mac\includ /
//                          e\ -I E:\工作\上海长望\项目\宿州农田小气候\code20 /
//                          170412\code\Projects\zstack\Samples\SampleApp\CC2 /
//                          530DB\..\..\..\..\..\Components\mac\high_level\   /
//                          -I E:\工作\上海长望\项目\宿州农田小气候\code20170 /
//                          412\code\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\Components\mac\low_level\srf04\ /
//                           -I E:\工作\上海长望\项目\宿州农田小气候\code2017 /
//                          0412\code\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\mac\low_level\srf04 /
//                          \single_chip\ -I E:\工作\上海长望\项目\宿州农田小 /
//                          气候\code20170412\code\Projects\zstack\Samples\Sa /
//                          mpleApp\CC2530DB\..\..\..\..\..\Components\mt\    /
//                          -I E:\工作\上海长望\项目\宿州农田小气候\code20170 /
//                          412\code\Projects\zstack\Samples\SampleApp\CC2530 /
//                          DB\..\..\..\..\..\Components\osal\include\ -I     /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\services\saddr\ -I      /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\services\sdata\ -I      /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\af\ -I            /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\nwk\ -I           /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\sapi\ -I          /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\sec\ -I           /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\sys\ -I           /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\stack\zdo\ -I           /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\zmac\ -I                /
//                          E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          ..\..\..\..\..\Components\zmac\f8w\ -Ohz          /
//                          --require_prototypes                              /
//    List file          =  E:\工作\上海长望\项目\宿州农田小气候\code20170412 /
//                          \code\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          CoordinatorEB\List\adc.s51                        /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME adc

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?V0
        EXTERN ?V1
        EXTERN ?V2
        EXTERN ?V3
        EXTERN ?V4
        EXTERN ?V5
        EXTERN ?V6
        EXTERN ?V7
        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?FLT_ADD
        EXTERN ?FLT_DIV
        EXTERN ?FLT_GE
        EXTERN ?FLT_LT
        EXTERN ?FLT_MUL
        EXTERN ?FLT_SUB
        EXTERN ?L_MOV_TO_X
        EXTERN ?L_MOV_X
        EXTERN ?L_TO_FLT
        EXTERN ?S_DIV_MOD
        EXTERN ?S_SHL
        EXTERN ?XLOAD_R2345
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??ADC_DisSelect?relay
        FUNCTION ??ADC_DisSelect?relay,0203H
        PUBLIC ??ADC_Init?relay
        FUNCTION ??ADC_Init?relay,0203H
        PUBLIC ??ADC_MeasureStart?relay
        FUNCTION ??ADC_MeasureStart?relay,0203H
        PUBLIC ??ADC_ReadByte?relay
        FUNCTION ??ADC_ReadByte?relay,0203H
        PUBLIC ??ADC_ReadData?relay
        FUNCTION ??ADC_ReadData?relay,0203H
        PUBLIC ??ADC_Reset?relay
        FUNCTION ??ADC_Reset?relay,0203H
        PUBLIC ??ADC_Select?relay
        FUNCTION ??ADC_Select?relay,0203H
        PUBLIC ??ADC_SpeedSet?relay
        FUNCTION ??ADC_SpeedSet?relay,0203H
        PUBLIC ??ADC_WriteByte?relay
        FUNCTION ??ADC_WriteByte?relay,0203H
        PUBLIC ??CalculateRadiation?relay
        FUNCTION ??CalculateRadiation?relay,0203H
        PUBLIC ??CalculateTemp?relay
        FUNCTION ??CalculateTemp?relay,0203H
        PUBLIC ADC_DisSelect
        FUNCTION ADC_DisSelect,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADC_Init
        FUNCTION ADC_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADC_MeasureStart
        FUNCTION ADC_MeasureStart,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        PUBLIC ADC_ReadByte
        FUNCTION ADC_ReadByte,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADC_ReadData
        FUNCTION ADC_ReadData,0a1203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC ADC_Reset
        FUNCTION ADC_Reset,0a1203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADC_Select
        FUNCTION ADC_Select,021203H
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADC_SpeedSet
        FUNCTION ADC_SpeedSet,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC ADC_WriteByte
        FUNCTION ADC_WriteByte,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        PUBLIC CalculateRadiation
        FUNCTION CalculateRadiation,080203H
        ARGFRAME XSTACK, 4, STACK
        LOCFRAME XSTACK, 20, STACK
        PUBLIC CalculateTemp
        FUNCTION CalculateTemp,080203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 4, STACK
        LOCFRAME XSTACK, 24, STACK
        PUBWEAK P1DIR
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBWEAK __Constant_0
        PUBWEAK __Constant_1
        PUBWEAK __Constant_41200000
        PUBWEAK __Constant_4298a8f6
        PUBWEAK __Constant_42c80000
        PUBWEAK __Constant_4302e3d8
        PUBWEAK __Constant_447a0000
        PUBWEAK __Constant_459c4000
        PUBLIC adc_done
        PUBLIC adc_state
        
          CFI Names cfiNames0
          CFI StackFrame CFA_SP SP IDATA
          CFI StackFrame CFA_PSP16 PSP16 XDATA
          CFI StackFrame CFA_XSP16 XSP16 XDATA
          CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
          CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
          CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
          CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
          CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
          CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
          CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
          CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
          CFI Resource SP:8, PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
          CFI VirtualResource ?RET:24
          CFI Resource ?BRET_EXT:8
          CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
          CFI ResourceParts PSP16 PSPH, PSPL
          CFI ResourceParts XSP16 XSPH, XSPL
          CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-3
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B Undefined
          CFI A Undefined
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 Undefined
          CFI R5 Undefined
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT Frame(CFA_SP, 3)
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 1
          CFI DataAlign -1
          CFI ReturnAddress ?RET CODE
          CFI CFA_DOVERLAY Used
          CFI CFA_IOVERLAY Used
          CFI CFA_SP SP+-2
          CFI CFA_PSP16 PSP16+0
          CFI CFA_XSP16 XSP16+0
          CFI `PSW.CY` SameValue
          CFI `B.BR0` SameValue
          CFI `B.BR1` SameValue
          CFI `B.BR2` SameValue
          CFI `B.BR3` SameValue
          CFI `B.BR4` SameValue
          CFI `B.BR5` SameValue
          CFI `B.BR6` SameValue
          CFI `B.BR7` SameValue
          CFI `VB.BR8` SameValue
          CFI `VB.BR9` SameValue
          CFI `VB.BR10` SameValue
          CFI `VB.BR11` SameValue
          CFI `VB.BR12` SameValue
          CFI `VB.BR13` SameValue
          CFI `VB.BR14` SameValue
          CFI `VB.BR15` SameValue
          CFI VB SameValue
          CFI B SameValue
          CFI A SameValue
          CFI PSW SameValue
          CFI DPL0 SameValue
          CFI DPH0 SameValue
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI V0 SameValue
          CFI V1 SameValue
          CFI V2 SameValue
          CFI V3 SameValue
          CFI V4 SameValue
          CFI V5 SameValue
          CFI V6 SameValue
          CFI V7 SameValue
          CFI PSPH Undefined
          CFI PSPL Undefined
          CFI XSPH Undefined
          CFI XSPL Undefined
          CFI ?RET Concat
          CFI ?BRET_EXT SameValue
          CFI ?RET_HIGH Frame(CFA_SP, 2)
          CFI ?RET_LOW Frame(CFA_SP, 1)
          CFI EndCommon cfiCommon1
        
Onboard_wait        SYMBOL "Onboard_wait"
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
SPI1_Init           SYMBOL "SPI1_Init"
??SPI1_Init?relay   SYMBOL "?relay", SPI1_Init
SPI1_ReadWriteByte  SYMBOL "SPI1_ReadWriteByte"
??SPI1_ReadWriteByte?relay SYMBOL "?relay", SPI1_ReadWriteByte
SPI1_SetSpeed       SYMBOL "SPI1_SetSpeed"
??SPI1_SetSpeed?relay SYMBOL "?relay", SPI1_SetSpeed
WDT_Feed            SYMBOL "WDT_Feed"
??WDT_Feed?relay    SYMBOL "?relay", WDT_Feed
ADC_DisSelect       SYMBOL "ADC_DisSelect"
??ADC_DisSelect?relay SYMBOL "?relay", ADC_DisSelect
ADC_Init            SYMBOL "ADC_Init"
??ADC_Init?relay    SYMBOL "?relay", ADC_Init
ADC_MeasureStart    SYMBOL "ADC_MeasureStart"
??ADC_MeasureStart?relay SYMBOL "?relay", ADC_MeasureStart
ADC_ReadByte        SYMBOL "ADC_ReadByte"
??ADC_ReadByte?relay SYMBOL "?relay", ADC_ReadByte
ADC_ReadData        SYMBOL "ADC_ReadData"
??ADC_ReadData?relay SYMBOL "?relay", ADC_ReadData
ADC_Reset           SYMBOL "ADC_Reset"
??ADC_Reset?relay   SYMBOL "?relay", ADC_Reset
ADC_Select          SYMBOL "ADC_Select"
??ADC_Select?relay  SYMBOL "?relay", ADC_Select
ADC_SpeedSet        SYMBOL "ADC_SpeedSet"
??ADC_SpeedSet?relay SYMBOL "?relay", ADC_SpeedSet
ADC_WriteByte       SYMBOL "ADC_WriteByte"
??ADC_WriteByte?relay SYMBOL "?relay", ADC_WriteByte
CalculateRadiation  SYMBOL "CalculateRadiation"
??CalculateRadiation?relay SYMBOL "?relay", CalculateRadiation
CalculateTemp       SYMBOL "CalculateTemp"
??CalculateTemp?relay SYMBOL "?relay", CalculateTemp

        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??SPI1_Init?relay
        FUNCTION ??SPI1_Init?relay,00H
        EXTERN ??SPI1_ReadWriteByte?relay
        FUNCTION ??SPI1_ReadWriteByte?relay,00H
        EXTERN ??SPI1_SetSpeed?relay
        FUNCTION ??SPI1_SetSpeed?relay,00H
        EXTERN ??WDT_Feed?relay
        FUNCTION ??WDT_Feed?relay,00H
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SPI1_Init
        FUNCTION SPI1_Init,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SPI1_ReadWriteByte
        FUNCTION SPI1_ReadWriteByte,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN SPI1_SetSpeed
        FUNCTION SPI1_SetSpeed,0202H
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN WDT_Feed
        FUNCTION WDT_Feed,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC

// E:\工作\上海长望\项目\宿州农田小气候\code20170412\code\Projects\zstack\Samples\SampleApp\Source\hardware\adc.c
//    1 #include "adc.h"

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
// static float const __xdata_rom temp_cal_table[15]
temp_cal_table:
        DATA32
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
// static float const __xdata_rom RTD_TAB_PT100[15]
RTD_TAB_PT100:
        DATA32
        DD 4298A8F6H
        DD 42A09EB8H
        DD 42A88A3DH
        DD 42B070A4H
        DD 42B851ECH
        DD 42C02E14H
        DD 42C80000H
        DD 42CFCCCDH
        DD 42D7947BH
        DD 42DF570AH
        DD 42E7147BH
        DD 42EECCCDH
        DD 42F67AE1H
        DD 42FE23D7H
        DD 4302E3D7H
//    2 #include "spi.h"
//    3 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    4 uint8 adc_state = START;  //AD测量状态
adc_state:
        DS 1
        REQUIRE __INIT_XDATA_Z
//    5     

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//    6 uint8 adc_done = FALSE;  //AD测量完成标志
adc_done:
        DS 1
        REQUIRE __INIT_XDATA_Z
//    7 
//    8 //内部函数声明
//    9 void ADC_Reset(void);
//   10 void ADC_WriteByte(uint8 cmd);
//   11 uint8 ADC_ReadByte(void);
//   12 void ADC_DisSelect(void);
//   13 void ADC_Select(void);
//   14 void ADC_SpeedSet(void);
//   15 
//   16 
//   17 /******************************************************************************
//   18  *
//   19  *               初始化部分
//   20  *
//   21  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   22 void ADC_Reset()  //复位AD7705
ADC_Reset:
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function ADC_Reset
        CODE
//   23 {
        FUNCALL ADC_Reset, Onboard_wait
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   24   ADC_RST=0;  
        CLR     0x90.4
//   25   asm("NOP");
        NOP
//   26   asm("NOP");
        NOP
//   27   asm("NOP");
        NOP
//   28   ADC_RST=1;
        SETB    0x90.4
//   29   MicroWait(5);
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x5
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay ; Banked call to: Onboard_wait
//   30 }
        SJMP    ??Subroutine6_0
          CFI EndBlock cfiBlock0
        REQUIRE _A_P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
          CFI Block cfiBlock1 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        MOV     R1,#-0x1
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
          CFI EndBlock cfiBlock1
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
          CFI Block cfiBlock2 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+-5
          CFI DPL0 Frame(CFA_SP, 4)
          CFI DPH0 Frame(CFA_SP, 5)
        POP     DPH
          CFI CFA_SP SP+-4
          CFI DPH0 SameValue
        POP     DPL
          CFI CFA_SP SP+-3
          CFI DPL0 SameValue
        LJMP    ?BRET
          CFI EndBlock cfiBlock2
//   31  

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   32 void ADC_WriteByte(uint8 cmd)  //向AD7705写一个字节命令或数据
ADC_WriteByte:
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function ADC_WriteByte
        CODE
//   33 {
        FUNCALL ADC_WriteByte, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
//   34   SPI1_ReadWriteByte(cmd);  //使用SPI1写AD7705
        ; Setup parameters for call to function SPI1_ReadWriteByte
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//   35 }
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock3
//   36 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   37 uint8 ADC_ReadByte(void)
ADC_ReadByte:
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function ADC_ReadByte
        CODE
//   38 {
        FUNCALL ADC_ReadByte, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   39   return SPI1_ReadWriteByte(0xFF); //SPI1写空指令读取AD7705
        ; Setup parameters for call to function SPI1_ReadWriteByte
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock4
//   40 }
//   41 
//   42 //取消选择,释放SPI总线

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   43 void ADC_DisSelect(void)
ADC_DisSelect:
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function ADC_DisSelect
        CODE
//   44 {
        FUNCALL ADC_DisSelect, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   45 	ADC_CS=1;
        SETB    0xa0.1
//   46  	SPI1_ReadWriteByte(0xff);//提供额外的8个时钟
        ; Setup parameters for call to function SPI1_ReadWriteByte
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock5
        REQUIRE _A_P2
//   47 }
//   48 
//   49 //选择ad7705

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   50 void ADC_Select(void)
ADC_Select:
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function ADC_Select
        CODE
//   51 {
        FUNCALL ADC_Select, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   52 	ADC_CS=0;
        CLR     0xa0.1
//   53         SPI1_ReadWriteByte(0xff);//提供额外的8个时钟
        ; Setup parameters for call to function SPI1_ReadWriteByte
        SJMP    ?Subroutine0
          CFI EndBlock cfiBlock6
        REQUIRE _A_P2
//   54 }
//   55 
//   56 //ad7705默认通信速率设定

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   57 void ADC_SpeedSet(void)
ADC_SpeedSet:
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function ADC_SpeedSet
        CODE
//   58 {
        FUNCALL ADC_SpeedSet, SPI1_SetSpeed
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   59   SPI1_SetSpeed(15,0);  //1M
        ; Setup parameters for call to function SPI1_SetSpeed
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??SPI1_SetSpeed?relay; Banked call to: SPI1_SetSpeed
//   60 }
        SJMP    ??Subroutine6_0
          CFI EndBlock cfiBlock7
//   61 
//   62 /******************************************************************************
//   63  *
//   64  *  AD初始化，初始化SPI1，配置片选和复位引脚，
//   65  *  复位AD7705，设置采样时钟，进行上电自校准等操作
//   66  *
//   67  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   68 void ADC_Init(void)  //AD7705初始化，包括初始化SPI1和复位I/O引脚配置
ADC_Init:
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function ADC_Init
        CODE
//   69 {
        FUNCALL ADC_Init, SPI1_Init
        LOCFRAME ISTACK, 2, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 0, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 2, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 0, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        PUSH    DPL
          CFI DPL0 Frame(CFA_SP, 4)
          CFI CFA_SP SP+-4
        PUSH    DPH
          CFI DPH0 Frame(CFA_SP, 5)
          CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//   70   SPI1_Init(15,0);  //SPI1初始化，速率1M
        ; Setup parameters for call to function SPI1_Init
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??SPI1_Init?relay    ; Banked call to: SPI1_Init
//   71   
//   72   P1SEL&=~(1<<0);   //P1_0通用输出，作为控制供电引脚
        ANL     0xf4,#0xfe
//   73   P1DIR|=1<<0;
        ORL     0xfe,#0x1
//   74   ADC_CV=1;  //打开供电
        SETB    0x90.0
//   75   
//   76   P1SEL&=~(7<<1);  //P1_1-P1_3通用输出，作为4051的通道选择
        ANL     0xf4,#0xf1
//   77   P1DIR|=7<<1;
        ORL     0xfe,#0xe
//   78   CH_SEL(0); //4051初始选择通道0
        CLR     0x90.1
        CLR     0x90.2
        CLR     0x90.3
//   79   
//   80   P1SEL&=~(1<<4);  //P1_4配置为通用输出功能，用作AD7705复位控制引脚
        ANL     0xf4,#0xef
//   81   P1DIR|=1<<4;
        ORL     0xfe,#0x10
//   82   ADC_RST=1; //P1_4初始为1，不复位
        SETB    0x90.4
//   83   
//   84   P2DIR|=3<<1;  //P2_1和P2_2设置为通用输出，其中P2_1作为AD7705片选
        ORL     0xff,#0x6
//   85   ADC_CS=1;  //不选通AD7705
        SETB    0xa0.1
//   86   
//   87   /*ADC_Reset();        //复位AD7705
//   88   ADC_WriteByte(ADC_CLKWR_REG);  //发送写时钟寄存器命令
//   89   ADC_WriteByte(ADC_RATE);   //时钟配置
//   90   ADC_WriteByte(ADC_SETWR_REG);  //发送写设置寄存器命令
//   91   ADC_WriteByte(ADC_CONTROL);  //设置测量参数，自校准，单极性*/
//   92 }
        SJMP    ??Subroutine6_0
          CFI EndBlock cfiBlock8
        REQUIRE P1SEL
        REQUIRE P1DIR
        REQUIRE _A_P1
        REQUIRE P2DIR
        REQUIRE _A_P2
//   93 
//   94 
//   95 /******************************************************************************
//   96  *
//   97  *               读取通道的16位转换结果
//   98  *
//   99  */
//  100 //uint16 ADC_ReadData(uint8 channel)
//  101 //{
//  102 //  uint8 i,data;
//  103 //  uint16 result=0;
//  104 //  
//  105 //  ADC_SpeedSet(); //设置AD7705通信速率
//  106 //  ADC_Select();  //选择AD7705
//  107 //  
//  108 //  for(i=0;i<200;i++)    //等待转换完成
//  109 //  {
//  110 //    ADC_WriteByte(ADC_STATE_REG|channel);  //读通信寄存器查看DRDY位，若为0表示转换完成，可以读取转换数据了
//  111 //    data=ADC_ReadByte();
//  112 //    if(!(data&0x80))
//  113 //      break;  //DRDY为0表示转换完成
//  114 //    else
//  115 //    {
//  116 //      MicroWait(1500);  //延时1.5ms
//  117 //      WDT_Feed(); //喂狗，防止读取时间过长
//  118 //      //HalUARTWrite(0,"w",strlen("w"));
//  119 //    }
//  120 //  }
//  121 //  ADC_WriteByte(ADC_DATAR_REG|channel);   //读16位数据寄存器获得转换结果
//  122 //  data=ADC_ReadByte();
//  123 //  result=data;
//  124 //  result<<=8;     //MSB first
//  125 //  data=ADC_ReadByte();
//  126 //  result|=data;
//  127 //  
//  128 //  ADC_DisSelect();  //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
//  129 //  return result;
//  130 //}
//  131 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  132 uint16 ADC_ReadData(uint8 channel)
ADC_ReadData:
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function ADC_ReadData
        CODE
//  133 {
        FUNCALL ADC_ReadData, SPI1_SetSpeed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, ADC_Select
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, WDT_Feed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_ReadData, ADC_DisSelect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  134   uint8 i,data;
//  135   uint16 result=0;
//  136   
//  137   ADC_SpeedSet(); //设置AD7705通信速率
        ; Setup parameters for call to function SPI1_SetSpeed
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??SPI1_SetSpeed?relay; Banked call to: SPI1_SetSpeed
//  138   ADC_Select();  //选择AD7705
        ; Setup parameters for call to function ADC_Select
        LCALL   ??ADC_Select?relay   ; Banked call to: ADC_Select
//  139   
//  140   for(i=0;i<200;i++)    //等待转换完成
        MOV     R6,#-0x38
//  141   {
//  142     ADC_WriteByte(ADC_STATE_REG|channel);  //读通信寄存器查看DRDY位，若为0表示转换完成，可以读取转换数据了
??ADC_ReadData_0:
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     A,#0x8
        ORL     A,R7
        MOV     R1,A
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//  143     data=ADC_ReadByte();
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     R1,#-0x1
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
        MOV     A,R1
//  144     if(!(data&0x80))
        MOV     C,0xE0 /* A   */.7
        JNC     ??ADC_ReadData_1
//  145       break;  //DRDY为0表示转换完成
//  146     else
//  147     {
//  148       MicroWait(1500);  //延时1.5ms
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#-0x24
        MOV     R3,#0x5
        LCALL   ??Onboard_wait?relay ; Banked call to: Onboard_wait
//  149       WDT_Feed();  //喂狗，防止读取时间过长
        ; Setup parameters for call to function WDT_Feed
        LCALL   ??WDT_Feed?relay     ; Banked call to: WDT_Feed
//  150       //HalUARTWrite(0,"w",strlen("w"));
//  151     }
//  152   }
        DEC     R6
        MOV     A,R6
        JNZ     ??ADC_ReadData_0
//  153   ADC_WriteByte(ADC_DATAR_REG|channel);   //读16位数据寄存器获得转换结果
??ADC_ReadData_1:
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     A,#0x38
        ORL     A,R7
        MOV     R1,A
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//  154   data=ADC_ReadByte();
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     R1,#-0x1
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
        MOV     A,R1
        MOV     R6,A
//  155   result=data;
//  156   result<<=8;     //MSB first
//  157   data=ADC_ReadByte();
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     R1,#-0x1
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
        MOV     A,R1
        MOV     ?V0,A
//  158   result|=data;
//  159   
//  160   ADC_DisSelect();  //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
        ; Setup parameters for call to function ADC_DisSelect
        LCALL   ??ADC_DisSelect?relay; Banked call to: ADC_DisSelect
//  161   return result;
        MOV     A,R6
        MOV     R2,?V0
        MOV     R3,A
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock9
//  162 }
//  163 /******************************************************************************
//  164  *
//  165  *  启动一次AD转换，
//  166  *  switch_ch-4051开关通道选择（0-7）
//  167  *  channel-AD7705测量通道（0或1），gain-本次测量放大倍数为 2^gain，buffer-为TRUE使用缓冲器
//  168  *
//  169  */
//  170 //void ADC_MeasureStart(uint8 switch_ch,uint8 channel,uint8 gain,uint8 buffer)
//  171 //{
//  172 //  //ADC_CV=1;  //打开供电
//  173 //  ADC_SpeedSet(); //设置AD7705通信速率
//  174 //  ADC_Select();  //选择AD7705
//  175 //  
//  176 //  CH_SEL(switch_ch);  //开关通道选择
//  177 //  //MicroWait(10000);  //等待4051稳定
//  178 //  //WDT_Feed(); //喂狗
//  179 //  ADC_Reset();        //复位AD7705
//  180 //  ADC_WriteByte(ADC_CLKWR_REG|channel);  //发送写时钟寄存器命令，并设置测量通道
//  181 //  ADC_WriteByte(ADC_RATE);   //时钟配置
//  182 //  ADC_WriteByte(ADC_SETWR_REG|channel);  //发送写设置寄存器命令
//  183 //  ADC_WriteByte(ADC_CONTROL|(gain<<3)|(buffer<<1));  //设置测量参数，自校准，增益，是否需要缓冲器
//  184 //  
//  185 //  ADC_DisSelect(); //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
//  186 //}
//  187 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  188 void ADC_MeasureStart(uint8 switch_ch,uint8 channel,uint8 gain,uint8 buffer)
ADC_MeasureStart:
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function ADC_MeasureStart
        CODE
//  189 {
        FUNCALL ADC_MeasureStart, SPI1_SetSpeed
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, ADC_Select
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, ADC_Reset
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, SPI1_ReadWriteByte
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL ADC_MeasureStart, ADC_DisSelect
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 13, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 13, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        MOV     A,#-0xd
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 13)
        ; Saved register size: 13
        ; Auto size: 0
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
        MOV     ?V0,R3
        MOV     ?V1,R4
//  190   ADC_CV=1;  //打开供电
        SETB    0x90.0
//  191   ADC_SpeedSet(); //设置AD7705通信速率
        ; Setup parameters for call to function SPI1_SetSpeed
        MOV     R2,#0x0
        MOV     R1,#0xf
        LCALL   ??SPI1_SetSpeed?relay; Banked call to: SPI1_SetSpeed
//  192   ADC_Select();  //选择AD7705
        ; Setup parameters for call to function ADC_Select
        LCALL   ??ADC_Select?relay   ; Banked call to: ADC_Select
//  193   
//  194   CH_SEL(switch_ch);  //开关通道选择
        MOV     A,R6
        MOV     C,0xE0 /* A   */.0
        MOV     C,0xE0 /* A   */.0
        MOV     0x90.1,C
        MOV     C,0xE0 /* A   */.1
        MOV     C,0xE0 /* A   */.1
        MOV     0x90.2,C
        MOV     C,0xE0 /* A   */.2
        MOV     C,0xE0 /* A   */.2
        MOV     0x90.3,C
//  195   /*MicroWait(5000);*/  //等待4051稳定  //取消，有时候会造成标准电阻测量值错误
//  196 //  MicroWait(3000);
//  197   ADC_Reset();        //复位AD7705
        ; Setup parameters for call to function ADC_Reset
        LCALL   ??ADC_Reset?relay    ; Banked call to: ADC_Reset
//  198   ADC_WriteByte(ADC_CLKWR_REG|channel);  //发送写时钟寄存器命令，并设置测量通道
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     A,#0x20
        ORL     A,R7
        MOV     R1,A
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//  199   ADC_WriteByte(ADC_RATE);   //时钟配置
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     R1,#0xc
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//  200   ADC_WriteByte(ADC_SETWR_REG|channel);  //发送写设置寄存器命令
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     A,#0x10
        ORL     A,R7
        MOV     R1,A
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//  201   ADC_WriteByte(ADC_CONTROL|(gain<<3)|(buffer<<1));  //设置测量参数，自校准，增益，是否需要缓冲器
        ; Setup parameters for call to function SPI1_ReadWriteByte
        MOV     A,?V1
        CLR     C
        RLC     A
        MOV     R0,A
        MOV     A,?V0
        RLC     A
        RLC     A
        RLC     A
        ANL     A,#0xf8
        ORL     A,R0
        ORL     A,#0x44
        MOV     R1,A
        LCALL   ??SPI1_ReadWriteByte?relay; Banked call to: SPI1_ReadWriteByte
//  202   
//  203   ADC_DisSelect(); //取消片选，可在ad转换期间使用spi上的其它器件，如SD卡等
        ; Setup parameters for call to function ADC_DisSelect
        LCALL   ??ADC_DisSelect?relay; Banked call to: ADC_DisSelect
//  204 }
        MOV     R7,#0x5
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock10
        REQUIRE _A_P1
//  205 
//  206 
//  207 
//  208 /******************************************************************************
//  209  *
//  210  *               传感器测量计算部分
//  211  *
//  212  */
//  213 //计算辐射值,电压单位为mv

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  214 float CalculateRadiation(float voltage,float RadCoefficient)
CalculateRadiation:
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function CalculateRadiation
        CODE
//  215 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 4
        MOV     A,#-0x4
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 20)
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?Subroutine3 & 0xFFFF
//  216   voltage*=1000;
??CrossCallReturnLabel_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_447a0000
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  217   
//  218   if(RadCoefficient<=0)
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_1
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_LT
        JNC     ??CalculateRadiation_0
//  219   {
//  220     RadCoefficient=10;
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x20
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x41
        MOVX    @DPTR,A
//  221   }
//  222   
//  223   voltage/=RadCoefficient;
??CalculateRadiation_0:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     A,#0x14
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_DIV
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
//  224   
//  225   voltage=MAX(voltage,0.0);
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_0
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_LT
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        JNC     ??CalculateRadiation_1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        INC     DPTR
        SJMP    ??CalculateRadiation_2
//  226   voltage=MIN(voltage,5000.0);
??CalculateRadiation_1:
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_459c4000
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_LT
        JC      ??CalculateRadiation_3
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#-0x64
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#0x45
??CalculateRadiation_2:
        MOVX    @DPTR,A
//  227   
//  228   return voltage;
??CalculateRadiation_3:
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        LCALL   ?XLOAD_R2345
        MOV     A,#0x4
          CFI EndBlock cfiBlock11
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  229 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
          CFI Block cfiBlock12 Using cfiCommon0
          CFI NoFunction
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 20)
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI Invalid
        LCALL   ?DEALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 16)
          CFI Valid
        MOV     R7,#0x8
        LJMP    ?BANKED_LEAVE_XDATA
          CFI EndBlock cfiBlock12
//  230 
//  231 //计算PT100温度值

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  232 float CalculateTemp(float fr)
CalculateTemp:
          CFI Block cfiBlock13 Using cfiCommon0
          CFI Function CalculateTemp
        CODE
//  233 {
        REQUIRE ?V0
        REQUIRE ?V1
        REQUIRE ?V2
        REQUIRE ?V3
        REQUIRE ?V4
        REQUIRE ?V5
        REQUIRE ?V6
        REQUIRE ?V7
        MOV     A,#-0x10
        LCALL   ?BANKED_ENTER_XDATA
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI CFA_SP SP+0
          CFI CFA_XSP16 add(XSP16, 16)
        ; Saved register size: 16
        ; Auto size: 8
        MOV     A,#-0x8
        LCALL   ?ALLOC_XSTACK8
          CFI CFA_XSP16 add(XSP16, 24)
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        LCALL   ?Subroutine3 & 0xFFFF
//  234 	float fTem;
//  235 	float fL;
//  236 	float fH;
//  237         float cal=0;  //修正值
//  238 	int iTem;
//  239 	uint8 cbottom,ctop;
//  240 	uint8 i;
//  241         
//  242         cal=temp_cal_table[0]/100;
//  243 	if(fr<RTD_TAB_PT100[0]+cal)   //添加修正值
??CrossCallReturnLabel_1:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_4298a8f6
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_LT
        JNC     ??CalculateTemp_0
//  244 	{
//  245 		return -60.0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#0x70
        MOV     R5,#-0x3e
        LJMP    ??CalculateTemp_1 & 0xFFFF
//  246 	}
//  247         cal=temp_cal_table[14]/100;
//  248 	if(fr>RTD_TAB_PT100[14]+cal)   //添加修正值
??CalculateTemp_0:
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_4302e3d8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_GE
        JNC     ??CalculateTemp_2
//  249 	{
//  250 		return 80.0;
        MOV     R2,#0x0
        MOV     R3,#0x0
        MOV     R4,#-0x60
        MOV     R5,#0x42
        LJMP    ??CalculateTemp_1 & 0xFFFF
//  251 	}
//  252 	cbottom=0;
??CalculateTemp_2:
        MOV     R6,#0x0
//  253 	ctop=14;
        MOV     R7,#0xe
//  254 	for(i=7;(ctop-cbottom)!=1;)
        MOV     R4,#0x7
        SJMP    ??CalculateTemp_3
//  255 	{
//  256                 cal=temp_cal_table[i]/100;  //添加修正值
//  257 		if(fr<RTD_TAB_PT100[i]+cal)
//  258 		{
//  259 			ctop=i;
??CalculateTemp_4:
        MOV     A,R4
        MOV     R7,A
//  260 			i=(ctop+cbottom)/2;
??CalculateTemp_5:
        ADD     A,R6
        MOV     R0,A
        CLR     A
        ADDC    A,#0x0
        MOV     R1,A
        MOV     R2,#0x2
        MOV     R3,#0x0
        LCALL   ?S_DIV_MOD
        MOV     A,R0
        MOV     R4,A
//  261 		}
??CalculateTemp_3:
        MOV     ?V2,R7
        MOV     ?V0,R6
        MOV     A,?V2
        CLR     C
        SUBB    A,?V0
        MOV     R0,A
        SUBB    A,0xE0 /* A   */
        MOV     R1,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??CalculateTemp_6
        MOV     A,R1
??CalculateTemp_6:
        JNZ     $+5
        LJMP    ??CalculateTemp_7 & 0xFFFF
        MOV     ?V0,R4
        MOV     ?V1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0
        LCALL   ?S_SHL
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_7:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_DIV
        MOV     ?V0,?V4
        MOV     ?V1,?V5
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        PUSH    ?V0
          CFI CFA_SP SP+-1
        PUSH    ?V1
          CFI CFA_SP SP+-2
        PUSH    ?V2
          CFI CFA_SP SP+-3
        PUSH    ?V3
          CFI CFA_SP SP+-4
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_ADD
        POP     ?V3
          CFI CFA_SP SP+-3
        POP     ?V2
          CFI CFA_SP SP+-2
        POP     ?V1
          CFI CFA_SP SP+-1
        POP     ?V0
          CFI CFA_SP SP+0
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_LT
        JNC     $+5
        LJMP    ??CalculateTemp_4 & 0xFFFF
//  262 		else if(fr>RTD_TAB_PT100[i]+cal)
        MOV     ?V0,R4
        MOV     ?V1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     A,#RTD_TAB_PT100 & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(RTD_TAB_PT100 >> 8) & 0xff
        ADDC    A,?V1
        MOV     DPH,A
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_ADD
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_LT
        MOV     A,R4
        JNC     ??CalculateTemp_8
//  263 		{
//  264 			cbottom=i;
        MOV     R6,A
//  265 			i=(ctop+cbottom)/2;
        MOV     ?V0,R7
        MOV     A,?V0
        LJMP    ??CalculateTemp_5 & 0xFFFF
//  266 		}
//  267 		else
//  268 		{
//  269 			iTem=(unsigned int)i*10-60;
//  270 			fTem=(float)iTem;
//  271 			return fTem;
??CalculateTemp_8:
        MOV     B,#0xa
        MUL     AB
        ADD     A,#-0x3c
        MOV     ?V0,A
        MOV     A,B
        ADDC    A,#-0x1
        MOV     ?V1,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V2,A
        MOV     ?V3,A
        MOV     R0,#?V0
        LCALL   ?L_TO_FLT
        LJMP    ??CalculateTemp_9 & 0xFFFF
//  272 		}
//  273 	}
??CalculateTemp_7:
        MOV     ?V1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0
        LCALL   ?S_SHL
        LCALL   ?Subroutine2 & 0xFFFF
??CrossCallReturnLabel_8:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_DIV
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_2:
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_ADD
        MOV     ?V0,?V4
        MOV     ?V1,?V5
        MOV     ?V2,?V6
        MOV     ?V3,?V7
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_TO_X
        MOV     ?V0,R7
        MOV     ?V1,#0x0
        MOV     A,#0x2
        MOV     R0,#?V0
        LCALL   ?S_SHL
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     A,#0x4
        LCALL   ?XSTACK_DISP0_8
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_SUB
        MOV     DPTR,#__Constant_41200000
        MOV     R0,#?V4
        LCALL   ?L_MOV_X
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_MUL
        PUSH    ?V0
          CFI CFA_SP SP+-1
        PUSH    ?V1
          CFI CFA_SP SP+-2
        PUSH    ?V2
          CFI CFA_SP SP+-3
        PUSH    ?V3
          CFI CFA_SP SP+-4
        LCALL   ??Subroutine7_0 & 0xFFFF
??CrossCallReturnLabel_6:
        LCALL   ?L_MOV_X
        MOV     DPTR,#__Constant_42c80000
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_DIV
        LCALL   ?Subroutine4 & 0xFFFF
??CrossCallReturnLabel_3:
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_ADD
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     R0,#?V0
        LCALL   ?L_MOV_X
        MOV     R0,#?V4
        MOV     R1,#?V0
        LCALL   ?FLT_SUB
        POP     ?V3
          CFI CFA_SP SP+-3
        POP     ?V2
          CFI CFA_SP SP+-2
        POP     ?V1
          CFI CFA_SP SP+-1
        POP     ?V0
          CFI CFA_SP SP+0
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_DIV
        MOV     A,R4
        MOV     B,#0xa
        MUL     AB
        ADD     A,#-0x3c
        MOV     ?V4,A
        MOV     A,B
        ADDC    A,#-0x1
        MOV     ?V5,A
        RLC     A
        SUBB    A,0xE0 /* A   */
        MOV     ?V6,A
        MOV     ?V7,A
        MOV     R0,#?V4
        LCALL   ?L_TO_FLT
        MOV     R0,#?V0
        MOV     R1,#?V4
        LCALL   ?FLT_ADD
??CalculateTemp_9:
        MOV     R2,?V0
        MOV     R3,?V1
        MOV     R4,?V2
        MOV     R5,?V3
??CalculateTemp_1:
        MOV     A,#0x8
        LJMP    ?Subroutine1 & 0xFFFF
          CFI EndBlock cfiBlock13
//  274 	iTem=(int)i*10-60;
//  275 	fL=RTD_TAB_PT100[cbottom]+temp_cal_table[cbottom]/100;
//  276 	fH=RTD_TAB_PT100[ctop]+temp_cal_table[ctop]/100;
//  277 	fTem=(((fr-fL)*10)/(fH-fL))+iTem;
//  278 	return fTem;
//  279 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
          CFI Block cfiCond14 Using cfiCommon0
          CFI Function CalculateTemp
          CFI Conditional ??CrossCallReturnLabel_2
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function CalculateTemp
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_3
          CFI (cfiCond15) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond15) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond15) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond15) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond15) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond15) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond15) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond15) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond15) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond15) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond15) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond15) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond15) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond15) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond15) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond15) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond15) CFA_SP SP+-6
          CFI (cfiCond15) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_5:
        MOV     R0,#?V0
        RET
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
          CFI Block cfiCond17 Using cfiCommon0
          CFI Function CalculateTemp
          CFI Conditional ??CrossCallReturnLabel_4
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond18 Using cfiCommon0
          CFI (cfiCond18) Function CalculateTemp
          CFI (cfiCond18) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_2
          CFI (cfiCond18) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond18) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond18) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond18) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond18) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond18) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond18) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond18) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond18) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond18) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond18) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond18) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond18) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond18) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond18) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond18) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond18) CFA_SP SP+-4
          CFI (cfiCond18) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond19 Using cfiCommon0
          CFI (cfiCond19) Function CalculateTemp
          CFI (cfiCond19) Conditional ??CrossCallReturnLabel_5, ??CrossCallReturnLabel_3
          CFI (cfiCond19) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond19) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond19) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond19) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond19) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond19) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond19) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond19) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond19) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond19) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond19) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond19) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond19) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond19) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond19) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond19) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond19) CFA_SP SP+-8
          CFI (cfiCond19) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker20 Using cfiCommon1
          CFI (cfiPicker20) NoFunction
          CFI (cfiPicker20) Picker
        MOV     A,#RTD_TAB_PT100 & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(RTD_TAB_PT100 >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        RET
          CFI EndBlock cfiCond17
          CFI EndBlock cfiCond18
          CFI EndBlock cfiCond19
          CFI EndBlock cfiPicker20

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
          CFI Block cfiCond21 Using cfiCommon0
          CFI Function CalculateRadiation
          CFI Conditional ??CrossCallReturnLabel_0
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 20)
          CFI Block cfiCond22 Using cfiCommon0
          CFI (cfiCond22) Function CalculateTemp
          CFI (cfiCond22) Conditional ??CrossCallReturnLabel_1
          CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond22) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond22) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond22) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond22) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond22) CFA_SP SP+-2
          CFI (cfiCond22) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker23 Using cfiCommon1
          CFI (cfiPicker23) NoFunction
          CFI (cfiPicker23) Picker
        MOV     A,R2
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R3
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R4
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R5
        MOVX    @DPTR,A
        RET
          CFI EndBlock cfiCond21
          CFI EndBlock cfiCond22
          CFI EndBlock cfiPicker23

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
          CFI Block cfiCond24 Using cfiCommon0
          CFI Function CalculateTemp
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-2
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond25 Using cfiCommon0
          CFI (cfiCond25) Function CalculateTemp
          CFI (cfiCond25) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond25) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond25) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond25) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond25) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond25) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond25) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond25) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond25) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond25) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond25) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond25) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond25) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond25) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond25) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond25) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond25) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond25) CFA_SP SP+-2
          CFI (cfiCond25) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker26 Using cfiCommon1
          CFI (cfiPicker26) NoFunction
          CFI (cfiPicker26) Picker
        MOV     R2,?V0
        MOV     R3,?V1
          CFI EndBlock cfiCond24
          CFI EndBlock cfiCond25
          CFI EndBlock cfiPicker26
        REQUIRE ??Subroutine7_0
        ; // Fall through to label ??Subroutine7_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine7_0:
          CFI Block cfiCond27 Using cfiCommon0
          CFI Function CalculateTemp
          CFI Conditional ??CrossCallReturnLabel_6
          CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI CFA_SP SP+-6
          CFI CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond28 Using cfiCommon0
          CFI (cfiCond28) Function CalculateTemp
          CFI (cfiCond28) Conditional ??CrossCallReturnLabel_7
          CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond28) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond28) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond28) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond28) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond28) CFA_SP SP+-2
          CFI (cfiCond28) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiCond29 Using cfiCommon0
          CFI (cfiCond29) Function CalculateTemp
          CFI (cfiCond29) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-16)))
          CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-15)))
          CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-14)))
          CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-13)))
          CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-12)))
          CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-11)))
          CFI (cfiCond29) V4 load(1, XDATA, add(CFA_XSP16, literal(-10)))
          CFI (cfiCond29) V5 load(1, XDATA, add(CFA_XSP16, literal(-9)))
          CFI (cfiCond29) V6 load(1, XDATA, add(CFA_XSP16, literal(-8)))
          CFI (cfiCond29) V7 load(1, XDATA, add(CFA_XSP16, literal(-7)))
          CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
          CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
          CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
          CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
          CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
          CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
          CFI (cfiCond29) CFA_SP SP+-2
          CFI (cfiCond29) CFA_XSP16 add(XSP16, 24)
          CFI Block cfiPicker30 Using cfiCommon1
          CFI (cfiPicker30) NoFunction
          CFI (cfiPicker30) Picker
        MOV     A,#temp_cal_table & 0xff
        ADD     A,R2
        MOV     DPL,A
        MOV     A,#(temp_cal_table >> 8) & 0xff
        ADDC    A,R3
        MOV     DPH,A
        MOV     R0,#?V4
        RET
          CFI EndBlock cfiCond27
          CFI EndBlock cfiCond28
          CFI EndBlock cfiCond29
          CFI EndBlock cfiPicker30

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_447a0000:
        DD 447A0000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_1:
        DD 1H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_0:
        DD 0H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_459c4000:
        DD 459C4000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4298a8f6:
        DD 4298A8F6H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_4302e3d8:
        DD 4302E3D8H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_42c80000:
        DD 42C80000H

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA32
__Constant_41200000:
        DD 41200000H

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_Reset?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_Reset

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_WriteByte?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_WriteByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_ReadByte?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_ReadByte

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_DisSelect?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_DisSelect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_Select?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_Select

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_SpeedSet?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_SpeedSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_Init?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_ReadData?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_ReadData

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??ADC_MeasureStart?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    ADC_MeasureStart

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CalculateRadiation?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CalculateRadiation

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??CalculateTemp?relay:
        CODE
        LCALL   ?BDISPATCH
        DATA24
        DC24    CalculateTemp

        END
//  280 
//  281 /*
//  282 //计算DHC3类型的温度值
//  283 float CalculateTemp_DHC3(float fr)
//  284 {
//  285 	float fTem;
//  286 	float fL;
//  287 	float fH;
//  288 	int iTem;
//  289 	uint8 cbottom,ctop;
//  290 	uint8 i;
//  291 	if(fr<RTD_TAB_PT100_DHC3[0])
//  292 	{
//  293 		return -60.0;
//  294 	}
//  295 	if(fr>RTD_TAB_PT100_DHC3[12])
//  296 	{
//  297 		return 60.0;
//  298 	}
//  299 	cbottom=0;
//  300 	ctop=12;
//  301 	for(i=6;(ctop-cbottom)!=1;)
//  302 	{
//  303 		if(fr<RTD_TAB_PT100_DHC3[i])
//  304 		{
//  305 			ctop=i;
//  306 			i=(ctop+cbottom)/2;
//  307 		}
//  308 		else if(fr>RTD_TAB_PT100_DHC3[i])
//  309 		{
//  310 			cbottom=i;
//  311 			i=(ctop+cbottom)/2;
//  312 		}
//  313 		else
//  314 		{
//  315 			iTem=(unsigned int)i*10-60;
//  316 			fTem=(float)iTem;
//  317 			return fTem;
//  318 		}
//  319 	}
//  320 	iTem=(int)i*10-60;
//  321 	fL=RTD_TAB_PT100_DHC3[cbottom];
//  322 	fH=RTD_TAB_PT100_DHC3[ctop];
//  323 	fTem=(((fr-fL)*10)/(fH-fL))+iTem;
//  324 	return fTem;
//  325 }
//  326 */
//  327 
//  328 /*
//  329 //计算土壤水分值
//  330 float CalculateSand(float voltage)
//  331 {
//  332 	float fTem;
//  333 	float fL;
//  334 	float fH;
//  335 	int iTem;
//  336 	uint8 cbottom,ctop;
//  337 	uint8 i;
//  338 	if(voltage<SAND[0])
//  339 	{
//  340 		return 0;
//  341 	}
//  342 	if(voltage>SAND[20])
//  343 	{
//  344 		return 100;
//  345 	}
//  346 	cbottom=0;
//  347 	ctop=20;
//  348 	for(i=10;(ctop-cbottom)!=1;)
//  349 	{
//  350 		if(voltage<SAND[i])
//  351 		{
//  352 			ctop=i;
//  353 			i=(ctop+cbottom)/2;
//  354 		}
//  355 		else if(voltage>SAND[i])
//  356 		{
//  357 			cbottom=i;
//  358 			i=(ctop+cbottom)/2;
//  359 		}
//  360 		else
//  361 		{
//  362 			iTem=(unsigned int)i*5;
//  363 			fTem=(float)iTem;
//  364 			return fTem;
//  365 		}
//  366 	}
//  367 	iTem=(unsigned int)i*5;
//  368 	fL=SAND[cbottom];
//  369 	fH=SAND[ctop];
//  370 	fTem=(((voltage-fL)*5)/(fH-fL))+iTem;
//  371 	return fTem;
//  372 }
//  373 */
//  374 
//  375 
//  376 
//  377 
//  378 
//  379 
//  380 
//  381 
//  382 
//  383 
//  384 
//  385 /**************************************************************************************************
//  386 **************************************************************************************************/
//  387 
// 
// 1 206 bytes in segment BANKED_CODE
//    66 bytes in segment BANK_RELAYS
//     5 bytes in segment SFR_AN
//   152 bytes in segment XDATA_ROM_C
//     2 bytes in segment XDATA_Z
// 
// 1 272 bytes of CODE  memory
//   120 bytes of CONST memory (+ 32 bytes shared)
//     0 bytes of DATA  memory (+  5 bytes shared)
//     2 bytes of XDATA memory
//
//Errors: none
//Warnings: none
